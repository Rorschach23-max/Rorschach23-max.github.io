<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>htmlcss</title>
      <link href="/2024/09/05/htmlcss/"/>
      <url>/2024/09/05/htmlcss/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML4"><a href="#HTML4" class="headerlink" title="HTML4"></a>HTML4</h1><h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><p>超链接内部可以嵌套任何元素，除了超链接</p><p><strong>主要作用：</strong>从当前页面进行跳转。 </p><p><strong>可以实现：</strong>①跳转到指定页面、②跳转到指定文件（也可触发下载）、③跳转到锚点位置、④唤起指定 应用</p><h3 id="跳转到页面"><a href="#跳转到页面" class="headerlink" title="跳转到页面"></a>跳转到页面</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 跳转其他网页 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.jd.com/&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>去京东<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 跳转本地网页 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;./10_HTML排版标签.html&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_self&quot;</span>&gt;</span>去看排版标签<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="跳转到文件"><a href="#跳转到文件" class="headerlink" title="跳转到文件"></a>跳转到文件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 浏览器能直接打开的文件 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;./resource/图片.jpg&quot;</span>&gt;</span>看图片<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 浏览器不能打开的文件，会自动触发下载 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;./resource/内部资源.zip&quot;</span>&gt;</span>内部资源<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 强制触发下载 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;./resource/小电影.mp4&quot;</span> <span class="attr">download</span>=<span class="string">&quot;电影片段.mp4&quot;</span>&gt;</span>下载电影<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意1：若浏览器无法打开文件，则会引导用户下载。</p><p> 注意2：若想强制触发下载，请使用 download 属性，属性值即为下载文件的名称。</p></blockquote><h3 id="跳转到锚点"><a href="#跳转到锚点" class="headerlink" title="跳转到锚点"></a>跳转到锚点</h3><p>第一步 设置锚点</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 第一种方式：a标签配合name属性 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>=<span class="string">&quot;test1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 第二种方式：其他标签配合id属性 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">h2</span> <span class="attr">id</span>=<span class="string">&quot;test2&quot;</span>&gt;</span>我是一个位置<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第二步 跳转锚点</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 跳转到test1锚点--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#test1&quot;</span>&gt;</span>去test1锚点<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 跳到本页面顶部 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>回到顶部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 跳转到其他页面锚点 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;demo.html#test1&quot;</span>&gt;</span>去demo.html页面的test1锚点<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 刷新本页面 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>刷新本页面<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="唤起指定应用"><a href="#唤起指定应用" class="headerlink" title="唤起指定应用"></a>唤起指定应用</h3><p>通过 a 标签，可以唤起设备应用程序。  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 唤起设备拨号 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;tel:10010&quot;</span>&gt;</span>电话联系<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 唤起设备发送邮件 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;mailto:10010@qq.com&quot;</span>&gt;</span>邮件联系<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 唤起设备发送短信 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;sms:10086&quot;</span>&gt;</span>短信联系<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>要把大象放冰箱总共分几步<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span>把冰箱门打开<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span>把大象放进去<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span>把冰箱门关上<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>我想去的几个城市<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span>成都<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span>西安<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span>武汉<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><h3 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h3><p><code>table</code> ：表格</p><p><code>caption</code> ：表格标题 </p><p><code>thead</code> ：表格头部</p><p><code>tbody</code> ：表格主体</p><p><code>tfoot</code> ：表格注脚</p><p><code>tr</code> ：每一行 </p><p><code>th 、td</code>：每一个单元格（备注：表格头部中用 th ，表格主体、表格脚注中用：td</p><h3 id="具体编码"><a href="#具体编码" class="headerlink" title="具体编码"></a>具体编码</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">caption</span>&gt;</span>2024玩过的游戏<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>游戏<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>时长<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>评分<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>类型<span class="tag">&lt;/<span class="name">th</span>&gt;</span>    </span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>博德之门<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>300+h<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>10<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>crpg<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>黑神话悟空<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>50+h<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>10<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>arpg<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>艾尔登法环<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1000+h<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>10<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>arpg<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tfoot</span>&gt;</span><span class="tag">&lt;/<span class="name">tfoot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="常用属性"><a href="#常用属性" class="headerlink" title="常用属性"></a>常用属性</h3><table><thead><tr><th>标签名</th><th>标签语义</th><th>常用属性</th><th>单&#x2F;双标签</th></tr></thead><tbody><tr><td><code>table</code></td><td>表格</td><td><code>width</code>：设置表格宽度。<br><code>height</code>：设置表格<strong>最小</strong>高度。<br><code>border</code>：设置表格边框宽度。<br><code>cellspacing</code>：设置单元格之间的间距。</td><td>双</td></tr><tr><td><code>thead</code></td><td>表格头部</td><td><code>height</code>：设置表格头部高度。<br><code>align</code>：设置单元格的水平对齐方式。<br><code>valign</code>：设置单元格的垂直对齐方式。</td><td>双</td></tr><tr><td><code>tbody</code></td><td>表格主体</td><td>常用属性与 <code>thead</code> 相同。</td><td>双</td></tr><tr><td><code>tr</code></td><td>行</td><td>常用属性与 <code>thead</code> 相同。</td><td>双</td></tr><tr><td><code>tfoot</code></td><td>表格脚注</td><td>常用属性与 <code>thead</code> 相同。</td><td>双</td></tr><tr><td><code>td</code></td><td>普通单元格</td><td><code>width</code>：设置单元格的宽度。<br><code>height</code>：设置单元格的高度。<br><code>align</code>：设置单元格的水平对齐方式。<br><code>valign</code>：设置单元格的垂直对齐方式。<br><code>rowspan</code>：指定要跨的行数。<br><code>colspan</code>：指定要跨的列数。</td><td>双</td></tr><tr><td><code>th</code></td><td>表头单元格</td><td>常用属性与 <code>td</code> 相同。</td><td>双</td></tr></tbody></table><h2 id="常用标签补充"><a href="#常用标签补充" class="headerlink" title="常用标签补充"></a>常用标签补充</h2><table><thead><tr><th>标签名</th><th>标签含义</th><th>单&#x2F;双标签</th></tr></thead><tbody><tr><td><code>br</code></td><td>换行</td><td>单</td></tr><tr><td><code>hr</code></td><td>分隔</td><td>单</td></tr><tr><td><code>pre</code></td><td>按原文显示（一般用于在页面中嵌入大段代码）</td><td>双</td></tr></tbody></table><h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><h3 id="常用表单控件"><a href="#常用表单控件" class="headerlink" title="常用表单控件"></a>常用表单控件</h3><table><thead><tr><th>序号</th><th>标签类型</th><th>常用属性及注意事项</th><th>示例代码</th></tr></thead><tbody><tr><td>①</td><td>文本输入框</td><td><code>name</code> 属性：数据的名称。<br> <code>value</code> 属性：输入框的默认输入值。<br> <code>maxlength</code> 属性：输入框最大可输入长度。</td><td><code>&lt;input type=&quot;text&quot; name=&quot;username&quot; value=&quot;默认值&quot; maxlength=&quot;20&quot;&gt;</code></td></tr><tr><td>②</td><td>密码输入框</td><td><code>name</code> 属性：数据的名称。<br> <code>value</code> 属性：输入框的默认输入值（一般不用，无意义）。<br> <code>maxlength</code> 属性：输入框最大可输入长度。</td><td><code>&lt;input type=&quot;password&quot; name=&quot;password&quot; maxlength=&quot;20&quot;&gt;</code></td></tr><tr><td>③</td><td>单选框</td><td><code>name</code> 属性：数据的名称，注意：想要单选效果，多个 radio 的 <code>name</code> 属性值要保持一致。<br> <code>value</code> 属性：提交的数据值。<br> <code>checked</code> 属性：让该单选按钮默认选中。</td><td><code>&lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;female&quot;&gt; 女&lt;br&gt;&lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;male&quot; checked&gt; 男</code></td></tr><tr><td>④</td><td>复选框</td><td><code>name</code> 属性：数据的名称。<br> <code>value</code> 属性：提交的数据值。<br> <code>checked</code> 属性：让该复选框默认选中。</td><td><code>&lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; value=&quot;smoke&quot; checked&gt; 抽烟&lt;br&gt;&lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; value=&quot;drink&quot;&gt; 喝酒</code></td></tr><tr><td>⑤</td><td>隐藏域</td><td><code>name</code> 属性：指定数据的名称。<br> <code>value</code> 属性：指定的是真正提交的数据。</td><td><code>&lt;input type=&quot;hidden&quot; name=&quot;tag&quot; value=&quot;100&quot;&gt;</code></td></tr><tr><td>⑥</td><td>提交按钮</td><td>注意：<br> 1. <code>button</code> 标签 <code>type</code> 属性的默认值是 <code>submit</code>。<br> 2. <code>button</code> 不要指定 <code>name</code> 属性。<br> 3. <code>input</code> 标签编写的按钮，使用 <code>value</code> 属性指定按钮文字。</td><td><code>&lt;input type=&quot;submit&quot; value=&quot;点我提交表单&quot;&gt;&lt;br&gt;&lt;button&gt;点我提交表单&lt;/button&gt;</code></td></tr><tr><td>⑦</td><td>重置按钮</td><td>注意点：<br> 1. <code>button</code> 不要指定 <code>name</code> 属性。<br> 2. <code>input</code> 标签编写的按钮，使用 <code>value</code> 属性指定按钮文字。</td><td><code>&lt;input type=&quot;reset&quot; value=&quot;点我重置&quot;&gt;&lt;br&gt;&lt;button type=&quot;reset&quot;&gt;点我重置&lt;/button&gt;</code></td></tr><tr><td>⑧</td><td>普通按钮</td><td>注意点：普通按钮的 <code>type</code> 值为 <code>button</code>，若不写 <code>type</code> 值是 <code>submit</code> 会引起表单的提交。</td><td><code>&lt;input type=&quot;button&quot; value=&quot;普通按钮&quot;&gt;&lt;br&gt;&lt;button type=&quot;button&quot;&gt;普通按钮&lt;/button&gt;</code></td></tr><tr><td>⑨</td><td>文本域</td><td>常用属性如下：<br> 1. <code>rows</code> 属性：指定默认显示的行数，会影响文本域的高度。<br> 2. <code>cols</code> 属性：指定默认显示的列数，会影响文本域的宽度。<br> 3. 不能编写 <code>type</code> 属性，其他属性与文本框一致。</td><td><code>&lt;textarea name=&quot;msg&quot; rows=&quot;22&quot; cols=&quot;3&quot;&gt;我是文本域&lt;/textarea&gt;</code></td></tr><tr><td>⑩</td><td>下拉框</td><td>常用属性及注意事项：<br> 1. <code>name</code> 属性：指定数据的名称。<br> 2. <code>option</code> 标签设置 <code>value</code> 属性，提交的数据是 <code>value</code> 的值（建议设置 <code>value</code> 属性）。<br> 3. <code>option</code> 标签设置了 <code>selected</code> 属性，表示默认选中。</td><td><code>&lt;select name=&quot;from&quot;&gt;&lt;option value=&quot;黑&quot;&gt;黑龙江&lt;/option&gt;&lt;option value=&quot;辽&quot;&gt;辽宁&lt;/option&gt;&lt;option value=&quot;粤&quot; selected&gt;广东&lt;/option&gt;&lt;/select&gt;</code></td></tr></tbody></table><h3 id="禁用表单控件"><a href="#禁用表单控件" class="headerlink" title="禁用表单控件"></a>禁用表单控件</h3><p>给表单控件的标签设置  disabled 既可禁用表单控件</p><blockquote><p>input 、 textarea 、 button 、 select 、 option 都可以设置  </p></blockquote><h3 id="label标签"><a href="#label标签" class="headerlink" title="label标签"></a>label标签</h3><p><code>label</code> 标签可与表单控件相关联，关联之后点击文字，与之对应的表单控件就会获取焦点。</p><p> 两种与 <code>label</code> 关联方式如下： </p><ol><li>让<code>label</code>标签的 <code>for</code> 属性的值等于表单控件的 <code>id</code></li><li>把表单控件套在 <code>label</code>标签的里面。</li></ol><h1 id="CSS2"><a href="#CSS2" class="headerlink" title="CSS2"></a>CSS2</h1><h2 id="CSS编写位置"><a href="#CSS编写位置" class="headerlink" title="CSS编写位置"></a>CSS编写位置</h2><h3 id="行内样式"><a href="#行内样式" class="headerlink" title="行内样式"></a>行内样式</h3><p>写在标签的<code>style</code> 属性中，（又称：内联样式）。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&quot;color:red;font-size:60px;&quot;</span>&gt;</span>用例<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="内部样式"><a href="#内部样式" class="headerlink" title="内部样式"></a>内部样式</h3><p>写在html 页面内部,单独放在<code>style</code>标签中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">     <span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">         <span class="attribute">font-size</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">     &#125;</span></span><br><span class="line"><span class="language-css"> </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="外部样式"><a href="#外部样式" class="headerlink" title="外部样式"></a>外部样式</h3><p>写在单独的<code>.css</code>文件中，随后在<code>html</code>中引入使用</p><ol><li><p>新建一个扩展名为<code>.css</code>的样式文件</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">     <span class="attribute">color</span>: red;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">40px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在<code>HTML</code>文件中引入</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./xxx.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><p><strong>优先级规则</strong>：行内样式 &gt; 内部样式 &#x3D; 外部样式</p><blockquote><ol><li>内部样式、外部样式，这二者的优先级相同，且：后面的 会覆盖 前面的（简记：“后来 者居上”）。</li><li>同一个样式表中，优先级也和编写顺序有关，且：后面的 会覆盖 前面的（简记：“后来 者居上”）。</li></ol></blockquote><h2 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h2><h3 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h3><h4 id="通配选择器"><a href="#通配选择器" class="headerlink" title="通配选择器"></a>通配选择器</h4><p><strong>作用：</strong>选中所有元素</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line"> <span class="attribute">color</span>: orange;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">40px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="元素选择器"><a href="#元素选择器" class="headerlink" title="元素选择器"></a>元素选择器</h4><p><strong>作用：</strong> 为<strong>某种元素</strong>设统一样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: orange;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">40px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h4><p><strong>作用：</strong>根据元素的<code>class</code>值，来选中某些元素</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.active</span> &#123;</span><br><span class="line"> <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a><code>id</code>选择器</h4><p><strong>作用：</strong>根据元素的<code>id</code>属性值，选中某个元素</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#earthy</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">60px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="复合选择器"><a href="#复合选择器" class="headerlink" title="复合选择器"></a>复合选择器</h3><h4 id="交集选择器"><a href="#交集选择器" class="headerlink" title="交集选择器"></a>交集选择器</h4><p><strong>作用：</strong>选中<strong>同时符合多个条件</strong>的元素</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">button</span><span class="selector-class">.active</span> &#123;</span><br><span class="line"><span class="attribute">color</span>: blue</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="并集选择器"><a href="#并集选择器" class="headerlink" title="并集选择器"></a>并集选择器</h4><p><strong>作用：</strong>多个条件，符合一个即可的元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.rich,</span><br><span class="line">.beauty &#123;</span><br><span class="line">   font-size: 40px;</span><br><span class="line">   background-color: skyblue;</span><br><span class="line">   width: 200px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h4><p><strong>作用：</strong>选中指定元素中，符合要求的<strong>后代元素</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 选中ul中的所有li */</span></span><br><span class="line"> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line"> <span class="attribute">color</span>: red;  </span><br><span class="line">&#125;</span><br><span class="line"> <span class="comment">/* 选中ul中所有li中的a */</span></span><br><span class="line"> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line"> <span class="attribute">color</span>: orange;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">/* 选中类名为subject元素中的所有li */</span></span><br><span class="line"> <span class="selector-class">.subject</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line"> <span class="attribute">color</span>: blue;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">/* 选中类名为subject元素中的所有类名为front-end的li */</span></span><br><span class="line"> <span class="selector-class">.subject</span> <span class="selector-tag">li</span><span class="selector-class">.front-end</span> &#123;</span><br><span class="line"> <span class="attribute">color</span>: blue;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="子代选择器"><a href="#子代选择器" class="headerlink" title="子代选择器"></a>子代选择器</h4><p>作用： 选中指定元素中，符合要求的<strong>子元素</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* div中的子代a元素 */</span></span><br><span class="line"> <span class="selector-tag">div</span>&gt;<span class="selector-tag">a</span> &#123;</span><br><span class="line"> <span class="attribute">color</span>: red;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">/* 类名为persons的元素中的子代a元素 */</span></span><br><span class="line"> <span class="selector-class">.persons</span>&gt;<span class="selector-tag">a</span>&#123;</span><br><span class="line"> <span class="attribute">color</span>: red;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="兄弟选择器"><a href="#兄弟选择器" class="headerlink" title="兄弟选择器"></a>兄弟选择器</h4><p><strong>相邻兄弟选择器</strong></p><p><strong>作用</strong>：选中紧挨着的<strong>下一个</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>+<span class="selector-tag">p</span> &#123;</span><br><span class="line"><span class="attribute">color</span>: red</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>通用兄弟选择器</strong></p><p>作用：选中<strong>下面的所有符合要求兄弟</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>~<span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h4><p>作用：选中属性值符合一定要求的元素。</p><p> 语法： </p><ol><li><p><code>[属性名] </code>选中具有某个属性的元素。</p></li><li><p><code>[属性名=&quot;值&quot;]</code> 选中包含某个属性，且属性值等于指定值的元素。</p></li><li><p><code>[属性名^=&quot;值&quot;]</code> 选中包含某个属性，且属性值以指定的值开头的元素。</p></li><li><p><code>[属性名$=&quot;值&quot;] </code>选中包含某个属性，且属性值以指定的值结尾的元素。</p></li><li><p><code>[属性名*=“值”] </code>选择包含某个属性，属性值包含指定值的元素。</p></li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 选中具有title属性的元素 */</span></span><br><span class="line"> <span class="selector-tag">div</span><span class="selector-attr">[title]</span>&#123;<span class="attribute">color</span>:red;&#125;</span><br><span class="line"> <span class="comment">/* 选中title属性值为atguigu的元素 */</span></span><br><span class="line"> <span class="selector-tag">div</span><span class="selector-attr">[title=<span class="string">&quot;winter&quot;</span>]</span>&#123;<span class="attribute">color</span>:red;&#125;</span><br><span class="line"> <span class="comment">/* 选中title属性值以a开头的元素 */</span></span><br><span class="line"> <span class="selector-tag">div</span><span class="selector-attr">[title^=<span class="string">&quot;a&quot;</span>]</span>&#123;<span class="attribute">color</span>:red;&#125;</span><br><span class="line"> <span class="comment">/* 选中title属性值以u结尾的元素 */</span></span><br><span class="line"> <span class="selector-tag">div</span><span class="selector-attr">[title$=<span class="string">&quot;u&quot;</span>]</span>&#123;<span class="attribute">color</span>:red;&#125;</span><br><span class="line"> <span class="comment">/* 选中title属性值包含g的元素 */</span></span><br><span class="line"> <span class="selector-tag">div</span><span class="selector-attr">[title*=<span class="string">&quot;g&quot;</span>]</span>&#123;<span class="attribute">color</span>:red;&#125;</span><br></pre></td></tr></table></figure><h4 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h4><p><strong>动态伪类</strong></p><ol><li><p><code>:link</code>  </p><ul><li>表示超链接未被访问的状态。</li></ul></li><li><p><code>:visited</code>  </p><ul><li>表示超链接已经被访问过的状态。</li></ul></li><li><p><code>:hover</code>  </p><ul><li>表示鼠标悬停在元素上的状态。</li></ul></li><li><p><code>:active</code>  </p><ul><li>表示元素被激活的状态。  </li><li><strong>激活</strong>：按下鼠标但不松开。  </li><li><strong>注意</strong>：遵循 <code>LVHA</code> 的顺序，即：<code>link</code> -&gt; <code>visited</code> -&gt; <code>hover</code> -&gt; <code>active</code>。</li></ul></li><li><p><code>:focus</code>  </p><ul><li>表示获取焦点的元素。  </li><li>通常表单类元素才能使用 <code>:link</code>、<code>:visited</code>、<code>:hover</code>、<code>:focus</code> 伪类。  </li><li>当用户点击元素、触摸元素，或通过键盘（如按 <code>tab</code> 键）选择元素时，元素会获得焦点。</li></ul></li></ol><p><strong>结构伪类</strong></p><ol><li><p><code>:first-child</code>  </p><ul><li>选中所有兄弟元素中的第一个。</li></ul></li><li><p><code>:last-child</code>  </p><ul><li>选中所有兄弟元素中的最后一个。</li></ul></li><li><p><code>:nth-child(n)</code>  </p><ul><li>选中所有兄弟元素中的第 <code>n</code> 个。</li></ul></li><li><p><code>:first-of-type</code>  </p><ul><li>选中所有同类型兄弟元素中的第一个。</li></ul></li><li><p><code>:last-of-type</code>  </p><ul><li>选中所有同类型兄弟元素中的最后一个。</li></ul></li><li><p><code>:nth-of-type(n)</code>  </p><ul><li>选中所有同类型兄弟元素中的第 <code>n</code> 个。</li></ul></li></ol><blockquote><p><code>0</code> 或不写：什么都选不中 —— 几乎不用。</p><p><code>n</code>：选中所有子元素 —— 几乎不用。</p><p><code>1</code> 到正无穷的整数：选中对应序号的子元素。</p><p><code>2n</code> 或 <code>even</code>：选中序号为偶数的子元素。</p><p><code>2n+1</code> 或 <code>odd</code>：选中序号为奇数的子元素。</p><p><code>n+3</code>：选中前 3 个子元素。</p></blockquote><p><strong>否定伪类</strong></p><p><code>:not(选择器) </code>排除满足括号中条件的元素。</p><p><strong>UI伪类</strong></p><ol><li><code>:checked</code> 被选中的复选框或单选按钮。</li><li><code>:enable</code> 可用的表单元素（没有  <code>disabled</code> 属性）。 </li><li><code>:disabled</code> 不可用的表单元素（有 <code>disabled</code> 属性）。</li></ol><h4 id="伪元素选择器"><a href="#伪元素选择器" class="headerlink" title="伪元素选择器"></a>伪元素选择器</h4><ol><li><p><code>::first-letter</code>  </p><ul><li>选中元素中的第一个文字。</li></ul></li><li><p><code>::first-line</code>  </p><ul><li>选中元素中的第一行文字。</li></ul></li><li><p><code>::selection</code>  </p><ul><li>选中被鼠标选中的内容。</li></ul></li><li><p><code>::placeholder</code>  </p><ul><li>选中输入框的提示文字。</li></ul></li><li><p><code>::before</code>  </p><ul><li>在元素最开始的位置创建一个子元素（必须用 <code>content</code> 属性指定内容）。</li></ul></li><li><p><code>::after</code>  </p><ul><li>在元素最后的位置创建一个子元素（必须用 <code>content</code> 属性指定内容）。</li></ul></li></ol><h3 id="选择器优先级"><a href="#选择器优先级" class="headerlink" title="选择器优先级"></a>选择器优先级</h3><p>行内样式 &gt; ID选择器 &gt; (伪)类选择器 &gt; (伪)元素选择器 &gt; 通配选择器</p><p><code>!important</code>权重最高（跟在值后面）</p><p><strong>复合选择器的优先级</strong></p><p>优先级由四个部分组成，用“<code>A, B, C, </code>”表示，具体计算规则如下：</p><ol><li><code>A</code>: ID选择器的数量。</li><li><code>B</code>: 类选择器、属性选择器、伪类选择器的数量。</li><li><code>C</code>: 元素选择器、伪元素选择器的数量。</li></ol><p>从左到右，一位一位比较，一旦比出胜负，不再比较</p><h2 id="CSS三大特性"><a href="#CSS三大特性" class="headerlink" title="CSS三大特性"></a>CSS三大特性</h2><p><strong>层叠性（Cascade）</strong><br>层叠性指的是当多个样式同时作用于一个元素时，CSS会按照一定的规则来决定哪个样式最终生效。这些规则包括样式的来源（如外部样式表、内联样式等）、选择器的优先级、以及样式的定义顺序。具体层叠规则包括：</p><ul><li>样式来源优先级：浏览器默认样式 &lt; 外部样式表 &lt; 内部样式表 &lt; 内联样式。</li><li>选择器的权重（具体选择器比通用选择器优先级高）。</li><li>后定义的样式优先。</li></ul><p><strong>继承性（Inheritance）</strong><br>继承性指的是某些CSS属性可以从父元素传递给子元素。例如，<code>color</code>（字体颜色）和<code>font-family</code>（字体类型）等属性是可以继承的。而像<code>padding</code>（内边距）和<code>margin</code>（外边距）这样的属性则不会被继承。继承性帮助减少样式重复设置，提高代码可维护性。</p><p><strong>优先级（Specificity）</strong><br>优先级决定了当多个选择器作用于同一元素时，哪个选择器的样式会生效。优先级的计算规则根据选择器的类型来决定，越具体的选择器优先级越高。具体规则如下：</p><ul><li>ID选择器（<code>#id</code>）优先级最高。</li><li>类选择器（<code>.class</code>）、伪类选择器等次之。</li><li>元素选择器（<code>div</code>、<code>p</code>等）优先级较低。</li></ul><h2 id="CSS颜色"><a href="#CSS颜色" class="headerlink" title="CSS颜色"></a>CSS颜色</h2><h3 id="表示方式一：颜色名"><a href="#表示方式一：颜色名" class="headerlink" title="表示方式一：颜色名"></a>表示方式一：颜色名</h3><p>编写方式：直接使用颜色对应的英文单词</p><h3 id="表示方式二：rgb或rgba"><a href="#表示方式二：rgb或rgba" class="headerlink" title="表示方式二：rgb或rgba"></a>表示方式二：rgb或rgba</h3><p>使用 红、黄、蓝 这三种光的三原色进行组合。</p><ul><li>r 表示 红色 </li><li>g 表示 绿色</li><li>b 表示 蓝色</li><li>a 表示 透明度</li></ul><p>举例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 使用 0~255 之间的数字表示一种颜色 */</span></span><br><span class="line"> <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>);<span class="comment">/* 红色 */</span></span><br><span class="line"> <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>);<span class="comment">/* 绿色 */</span></span><br><span class="line"> <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>);<span class="comment">/* 蓝色 */</span></span><br><span class="line"> <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);<span class="comment">/* 黑色 */</span></span><br><span class="line"> <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>);<span class="comment">/* 白色 */</span></span><br><span class="line"> <span class="comment">/* 混合出任意一种颜色 */</span></span><br><span class="line"> <span class="attribute">color</span>:<span class="built_in">rgb</span>(<span class="number">138</span>, <span class="number">43</span>, <span class="number">226</span>) <span class="comment">/* 紫罗兰色 */</span></span><br><span class="line"> color:<span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>);<span class="comment">/* 半透明的红色 */</span></span><br><span class="line"> <span class="comment">/* 也可以使用百分比表示一种颜色（用的少） */</span></span><br><span class="line"> <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">100%</span>, <span class="number">0%</span>, <span class="number">0%</span>);<span class="comment">/* 红色 */</span></span><br><span class="line"> <span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">100%</span>, <span class="number">0%</span>, <span class="number">0%</span>,<span class="number">50%</span>);<span class="comment">/* 半透明的红色 */</span></span><br></pre></td></tr></table></figure><h3 id="表达方式三：-HEX或HEXA"><a href="#表达方式三：-HEX或HEXA" class="headerlink" title="表达方式三： HEX或HEXA"></a>表达方式三： HEX或HEXA</h3><p>HEX 的原理同与  0~255 的数字，要么都是 rgb 一样，依然是通过：红、绿、蓝色 进行组合，只不过要用 6位（分成3组） 来 表达， 格式为：<code>#rrggbb</code></p><blockquote><p>每一位数字的范围是 <code>0~f</code> </p><p>所以每一种光的最小值是 00 最大值是ff</p></blockquote><p>示例</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">color</span>: <span class="number">#ff0000</span>;<span class="comment">/* 红色 */</span></span><br><span class="line"><span class="attribute">color</span>: <span class="number">#00ff00</span>;<span class="comment">/* 绿色 */</span></span><br><span class="line"><span class="attribute">color</span>: <span class="number">#0000ff</span>;<span class="comment">/* 蓝色 */</span></span><br><span class="line"><span class="attribute">color</span>: <span class="number">#000000</span>;<span class="comment">/* 黑色 */</span></span><br><span class="line"><span class="attribute">color</span>: <span class="number">#ffffff</span>;<span class="comment">/* 白色 */</span></span><br><span class="line"><span class="comment">/* 如果每种颜色的两位都是相同的，就可以简写*/</span></span><br><span class="line"><span class="attribute">color</span>: <span class="number">#ff9988</span>;<span class="comment">/* 可简为：#f98 */</span></span><br><span class="line"><span class="comment">/* 但要注意前三位简写了，那么透明度就也要简写 */</span></span><br><span class="line"><span class="attribute">color</span>: <span class="number">#ff998866</span>;<span class="comment">/* 可简为：#f986 */</span></span><br></pre></td></tr></table></figure><h3 id="表达方式四：-HSL或HSLA"><a href="#表达方式四：-HSL或HSLA" class="headerlink" title="表达方式四： HSL或HSLA"></a>表达方式四： HSL或HSLA</h3><p><code>HSL</code> 是通过：色相、饱和度、亮度，来表示一个颜色的，格式为：  <code>hsl(色相,饱和度,亮度)</code></p><ul><li><strong>色相（Hue）</strong>: 范围是 0° ~ 360°，例如：<ul><li>0°: 红色</li><li>60°: 黄色</li><li>120°: 绿色</li><li>180°: 青色</li><li>240°: 蓝色</li><li>300°: 紫色</li></ul></li><li><strong>饱和度（Saturation）</strong>: 0% ~ 100%，代表颜色的纯度，0% 是灰色，100% 是完全纯色。</li><li><strong>亮度（Lightness）</strong>: 0% ~ 100%，0% 是黑色，100% 是白色，50% 为正常亮度。</li><li><strong>透明度（Alpha）</strong>: 0 表示完全透明，1 表示完全不透明。</li></ul><p>例如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hsla(<span class="number">120</span>, <span class="number">50%</span>, <span class="number">50%</span>, <span class="number">0.7</span>)</span><br></pre></td></tr></table></figure><h2 id="CSS字体属性"><a href="#CSS字体属性" class="headerlink" title="CSS字体属性"></a>CSS字体属性</h2><h3 id="字体大小（Font-Size）"><a href="#字体大小（Font-Size）" class="headerlink" title="字体大小（Font Size）"></a>字体大小（Font Size）</h3><p>在 HSL 的基础上，HSLA 添加了透明度属性，用于控制颜色的透明度。</p><p><strong>属性名：</strong></p><p><code>font-size</code></p><p><strong>作用：</strong></p><p>控制字体的大小。</p><p><strong>语法：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;  </span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">40px</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ol><li>Chrome 浏览器支持的最小文字为 12px ，默认的文字大小为 16px ，并且 0px 会自动 消失。 </li><li>不同浏览器默认的字体大小可能不一致，所以最好给一个明确的值，不要用默认大 小。 </li><li>通常以给  body 设置 font-size 属性，这样 body 中的其他元素就都可以继承了。</li></ol></blockquote><h3 id="字体类型（Font-Family）"><a href="#字体类型（Font-Family）" class="headerlink" title="字体类型（Font Family）"></a>字体类型（Font Family）</h3><p><strong>属性名：</strong></p><p><code>font-family</code></p><p><strong>作用：</strong></p><p>控制字体的类型。</p><p><strong>语法：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&quot;STCaiyun&quot;</span>, <span class="string">&quot;Microsoft YaHei&quot;</span>, sans-serif;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ol><li><p>使用字体的<strong>英文名字</strong>会有更好的兼容性，具体的英文名称可以自行查询，或者在电脑的设置中寻找。</p></li><li><p>如果字体名称中包含空格，必须使用<strong>引号</strong>包裹起来。</p></li><li><p>可以设置<strong>多个字体</strong>，浏览器会按照从左到右的顺序逐个查找，找到的字体就会被使用，如果没有找到会继续使用后面的字体，通常在最后写上 <code>serif</code>（衬线字体）或 <code>sans-serif</code>（无衬线字体）作为兜底字体。</p></li><li><p>在 Windows 系统中，默认的字体为<strong>微软雅黑</strong>（Microsoft YaHei）。</p></li></ol></blockquote><h3 id="字体风格-font-style"><a href="#字体风格-font-style" class="headerlink" title="字体风格  ( font style)"></a>字体风格  ( font style)</h3><p><strong>属性名</strong>：<br><code>font-style</code></p><p><strong>作用</strong>：<br>控制字体是否为斜体。</p><p><strong>常用值</strong>：</p><ol><li><code>normal</code>：正常（默认值）</li><li><code>italic</code>：斜体（使用字体自带的斜体效果）</li><li><code>oblique</code>：斜体（强制倾斜产生的斜体效果）</li></ol><p>实现斜体时，推荐使用 <code>sans-serif</code>（非衬线字体）。</p><p>例如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;  </span><br><span class="line">  <span class="attribute">font-style</span>: italic;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字体粗细-font-weight"><a href="#字体粗细-font-weight" class="headerlink" title="字体粗细 (font weight)"></a>字体粗细 (font weight)</h3><p><strong>属性名</strong>：<br><code>font-weight</code></p><p><strong>作用</strong>：<br>控制字体的粗细。</p><p><strong>常用值</strong>：</p><ul><li><strong>关键词</strong>：</li></ul><ol><li><code>lighter</code>：细</li><li><code>normal</code>：正常</li><li><code>bold</code>：粗</li><li><code>bolder</code>：很粗（多数字体不支持）</li></ol><ul><li><strong>数值</strong>：</li></ul><ol><li>100 ~ 300 等同于 100 ~ 1000 且无单位，数值越大，字体越粗（具体效果取决于字体设计）。</li><li>400 ~ 500 等同于 <code>normal</code>，600 ~ 700 等同于 <code>bold</code>。</li></ol><h3 id="字体复合属性"><a href="#字体复合属性" class="headerlink" title="字体复合属性"></a>字体复合属性</h3><p><strong>属性名</strong>：<br><code>font</code>（复合属性）</p><p><strong>作用</strong>：<br>同时设置字体的样式、粗细、大小、行高和字体类型。</p><p><strong>语法</strong>：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">font</span>: font-style font-weight font-size/line-height font-family;</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">font</span>: italic bold <span class="number">16px</span>/<span class="number">24px</span> <span class="string">&quot;Arial&quot;</span>, sans-serif;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码同时设置了：</p><ul><li>字体为斜体 (<code>italic</code>)</li><li>字体为粗体 (<code>bold</code>)</li><li>字体大小为 16px，行高为 24px</li><li>字体类型为 <code>Arial</code>，如果找不到就使用 <code>sans-serif</code></li></ul><h2 id="CSS文本属性"><a href="#CSS文本属性" class="headerlink" title="CSS文本属性"></a>CSS文本属性</h2><h3 id="文本颜色"><a href="#文本颜色" class="headerlink" title="文本颜色"></a>文本颜色</h3><p><strong>属性名：</strong><br><code>color</code></p><p><strong>作用：</strong><br>控制文字的颜色。</p><p><strong>可选值：</strong>  </p><ol><li>颜色名  </li><li>rgb 或 rgba  </li><li>HEX 或 HEXA（十六进制）  </li><li>HSL 或 HSLA</li></ol><p>开发中常用的是：<br><code>rgb/rgba</code> 或  </p><p><strong>举例：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123; </span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">112</span>, <span class="number">45</span>, <span class="number">78</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="文本间距"><a href="#文本间距" class="headerlink" title="文本间距"></a>文本间距</h3><p><strong>字母间距：</strong><br><code>letter-spacing</code></p><p><strong>单词间距：</strong><br><code>word-spacing</code> （通过空格识别词）</p><p><strong>属性值：</strong><br>使用像素（px）作为单位，正值增加间距，负值缩小间距。</p><p><strong>举例：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">letter-spacing</span>: <span class="number">2px</span>;</span><br><span class="line">    <span class="attribute">word-spacing</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="文本修饰"><a href="#文本修饰" class="headerlink" title="文本修饰"></a>文本修饰</h3><p><strong>属性名：</strong><br><code>text-decoration</code></p><p><strong>作用：</strong><br>控制文本的各种装饰线。</p><p><strong>可选值：</strong>  </p><ol><li><code>none</code> ：无装饰线（常用）  </li><li><code>underline</code> ：下划线（常用）  </li><li><code>overline</code> ：上划线  </li><li><code>line-through</code> ：删除线</li></ol><p><strong>可搭配如下值使用：</strong>  </p><ol><li><code>dotted</code> ：虚线  </li><li><code>wavy</code> ：波浪线  </li><li>也可以指定颜色</li></ol><p><strong>举例：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123; </span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="文本缩进"><a href="#文本缩进" class="headerlink" title="文本缩进"></a>文本缩进</h3><p><strong>属性名：</strong><br><code>text-indent</code></p><p><strong>作用：</strong><br>控制文本首字母的缩进。</p><p><strong>属性值：</strong><br>CSS 中的长度单位，例如：<code>px</code></p><p><strong>举例：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123; </span><br><span class="line">    <span class="attribute">text-indent</span>: <span class="number">40px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="文本对齐—水平"><a href="#文本对齐—水平" class="headerlink" title="文本对齐—水平"></a>文本对齐—水平</h3><p><strong>属性名：</strong><br><code>text-align</code></p><p><strong>作用：</strong><br>控制文本的水平对齐方式。</p><p><strong>常用值：</strong>  </p><ol><li><code>left</code> ：左对齐（默认值）  </li><li><code>right</code> ：右对齐  </li><li><code>center</code> ：居中对齐</li></ol><p><strong>举例：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123; </span><br><span class="line">    <span class="attribute">text-align</span>: center; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="行高"><a href="#行高" class="headerlink" title="行高"></a>行高</h3><p><strong>属性名：</strong><br><code>line-height</code></p><p><strong>作用：</strong><br>控制一行文字的高度。</p><p><strong>可选值：</strong>  </p><ol><li><code>normal</code> ：由浏览器根据文字大小决定的一个默认值。  </li><li>像素（px）。  </li><li>数字：参考自身 <code>font-size</code> 的倍数（很常用）。  </li><li>百分比：参考自身 <code>font-size</code> 的百分比。</li></ol><p><strong>举例：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123; </span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">60px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.5</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">150%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>行高注意事项</strong></p><blockquote><p><code>line-height</code> 过小会怎样？——文字产生重叠，且最小值是 0，不能为负数。</p><p><code>line-height</code> 是可以继承的，且为了更好的呈现文字，建议使用数值。</p><p><code>line-height</code> 和 <code>height</code> 是什么关系？</p><ul><li>设置了 <code>height</code>，那么高度就是 <code>height</code> 的值。</li><li>不设置 <code>height</code> 的时候，会根据 <code>line-height</code> 计算高度。</li></ul></blockquote><p><strong>应用场景</strong></p><blockquote><p>对于多行文字：控制行与行之间的距离。</p><p>对于单行文字：让 <code>height</code> 等于 <code>line-height</code>，可以实现文字垂直居中。</p></blockquote><h3 id="文本对齐-垂直"><a href="#文本对齐-垂直" class="headerlink" title="文本对齐-垂直"></a>文本对齐-垂直</h3><ol><li><p><strong>顶部：</strong><br>无需任何属性，在垂直方向上，默认就是顶部对齐。</p></li><li><p><strong>居中：</strong><br>对于单行文字，让 <code>height = line-height</code> 即可。<br><strong>问题：</strong> 多行文字垂直居中怎么办？——定位</p></li><li><p><strong>底部：</strong><br>对于单行文字，目前一个临时的方式：<br>让 <code>line-height = (height × 2) - font-size - x</code>。<br><strong>备注：</strong> <code>x</code> 是根据字体族动态决定的一个值。<br><strong>问题：</strong> 垂直方向上的底部对齐，更好的解决办法是什么？——定位。****</p></li></ol><h3 id="vertical-align"><a href="#vertical-align" class="headerlink" title="vertical-align"></a>vertical-align</h3><p><strong>属性名：</strong><br><code>vertical-align</code></p><p><strong>作用：</strong><br>用于指定同一行元素之间，或表格单元格内文字的垂直对齐方式。</p><p><strong>常用值：</strong>  </p><ol><li><code>baseline</code>（默认值）：使元素的基线与父元素的基线对齐。  </li><li><code>top</code>：使元素的顶部与其所在行的顶部对齐。  </li><li><code>middle</code>：使元素的中部与父元素的基线加上父元素字母 x 的一半对齐。  </li><li><code>bottom</code>：使元素的底部与其所在行的底部对齐。</li></ol><p><strong>特别注意：</strong>  </p><blockquote><p><code>vertical-align</code> 不能控制块元素 。</p></blockquote><h2 id="CSS列表属性"><a href="#CSS列表属性" class="headerlink" title="CSS列表属性"></a>CSS列表属性</h2><p><strong>列表相关的属性：</strong><br>可以作用在 <code>ul</code>、<code>ol</code>、<code>li</code> 元素上。</p><p><strong>CSS 属性名及功能：</strong></p><ol><li><p><strong><code>list-style-type</code></strong><br><strong>作用：</strong> 设置列表符号<br><strong>常用值如下：</strong>  </p><ul><li><code>none</code>：不显示前面的标识（很常用！）  </li><li><code>square</code>：实心方块  </li><li><code>disc</code>：圆形  </li><li><code>decimal</code>：数字  </li><li><code>lower-roman</code>：小写罗马字  </li><li><code>upper-roman</code>：大写罗马字  </li><li><code>lower-alpha</code>：小写字母  </li><li><code>upper-alpha</code>：大写字母</li></ul></li><li><p><strong><code>list-style-position</code></strong><br><strong>作用：</strong> 设置列表符号的位置<br><strong>常用值如下：</strong>  </p><ul><li><code>inside</code>：在 <code>li</code> 的里面  </li><li><code>outside</code>：在 <code>li</code> 的外边</li></ul></li><li><p><strong><code>list-style-image</code></strong><br><strong>作用：</strong> 自定义列表符号<br><strong>常用值：</strong>  </p><ul><li><code>url(图片地址)</code></li></ul></li><li><p><strong><code>list-style</code></strong><br><strong>作用：</strong> 复合属性，允许没有数量、顺序的要求。</p></li></ol><p><strong>举例：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">list-style-type</span>: square;</span><br><span class="line">    <span class="attribute">list-style-position</span>: inside;</span><br><span class="line">    <span class="attribute">list-style-image</span>: <span class="built_in">url</span>(<span class="string">&#x27;image.png&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CSS表格属性"><a href="#CSS表格属性" class="headerlink" title="CSS表格属性"></a>CSS表格属性</h2><h3 id="表格元素通用属性"><a href="#表格元素通用属性" class="headerlink" title="表格元素通用属性"></a>表格元素通用属性</h3><p><strong>CSS 属性名及功能：</strong></p><ol><li><p><strong><code>border-width</code></strong><br><strong>作用：</strong> 设置边框宽度<br><strong>属性值：</strong> CSS 中可用的长度值（如 <code>px</code>, <code>em</code>, 等）</p></li><li><p><strong><code>border-color</code></strong><br><strong>作用：</strong> 设置边框颜色<br><strong>属性值：</strong> CSS 中可用的颜色值（如 <code>red</code>, <code>#000000</code>, <code>rgb()</code> 等）</p></li><li><p><strong><code>border-style</code></strong><br><strong>作用：</strong> 设置边框风格<br><strong>常用值如下：</strong>  </p><ul><li><code>none</code>：无边框（默认值）  </li><li><code>solid</code>：实线  </li><li><code>dashed</code>：虚线  </li><li><code>dotted</code>：点线  </li><li><code>double</code>：双实线</li></ul></li><li><p><strong><code>border</code></strong><br><strong>作用：</strong> 边框复合属性，允许同时设置宽度、颜色和样式，没有数量和顺序的要求。</p></li></ol><p><strong>举例：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">border-width</span>: <span class="number">2px</span>;</span><br><span class="line">    <span class="attribute">border-color</span>: <span class="number">#333</span>;</span><br><span class="line">    <span class="attribute">border-style</span>: solid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="表格专属属性"><a href="#表格专属属性" class="headerlink" title="表格专属属性"></a>表格专属属性</h3><h2 id="CSS-属性名及功能："><a href="#CSS-属性名及功能：" class="headerlink" title="CSS 属性名及功能："></a><strong>CSS 属性名及功能：</strong></h2><ol><li><p><strong><code>table-layout</code></strong><br><strong>作用：</strong> 设置列宽度<br><strong>常用值：</strong>  </p><ul><li><code>auto</code>：自动，列宽根据内容计算（默认值）  </li><li><code>fixed</code>：固定列宽，平均分配</li></ul></li><li><p><strong><code>border-spacing</code></strong><br><strong>作用：</strong> 设置单元格间距<br><strong>属性值：</strong> CSS 中可用的长度值<br><strong>生效前提：</strong> 单元格边框不能合并。</p></li><li><p><strong><code>border-collapse</code></strong><br><strong>作用：</strong> 合并单元格边框<br><strong>常用值：</strong>  </p><ul><li><code>collapse</code>：合并  </li><li><code>separate</code>：不合并</li></ul></li><li><p><strong><code>empty-cells</code></strong><br><strong>作用：</strong> 隐藏没有内容的单元格<br><strong>常用值：</strong>  </p><ul><li><code>show</code>：显示（默认值）  </li><li><code>hide</code>：隐藏<br><strong>生效前提：</strong> 单元格不能合并。</li></ul></li><li><p><strong><code>caption-side</code></strong><br><strong>作用：</strong> 设置表格标题位置<br><strong>常用值：</strong>  </p><ul><li><code>top</code>：在表格上方（默认值）  </li><li><code>bottom</code>：在表格下方</li></ul></li></ol><p><strong>举例：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">table</span> &#123;</span><br><span class="line">    <span class="attribute">table-layout</span>: fixed;</span><br><span class="line">    <span class="attribute">border-spacing</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border-collapse</span>: collapse;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">caption</span> &#123;</span><br><span class="line">    <span class="attribute">caption-side</span>: bottom;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CSS背景属性"><a href="#CSS背景属性" class="headerlink" title="CSS背景属性"></a>CSS背景属性</h2><p><strong>CSS 属性名及功能：</strong></p><ol><li><p><strong><code>background-color</code></strong><br><strong>作用：</strong> 设置背景颜色<br><strong>属性值：</strong> 符合 CSS 中颜色规范的值<br><strong>默认值：</strong> <code>transparent</code></p></li><li><p><strong><code>background-image</code></strong><br><strong>作用：</strong> 设置背景图片<br><strong>属性值：</strong> <code>url(图片的地址)</code></p></li><li><p><strong><code>background-repeat</code></strong><br><strong>作用：</strong> 设置背景重复方式<br><strong>常用值如下：</strong>  </p><ul><li><code>repeat</code>：重复，铺满整个元素（默认值）  </li><li><code>repeat-x</code>：只在水平方向重复  </li><li><code>repeat-y</code>：只在垂直方向重复  </li><li><code>no-repeat</code>：不重复</li></ul></li><li><p><strong><code>background-position</code></strong><br><strong>作用：</strong> 设置背景图片的位置<br><strong>通过关键字设置位置：</strong>  </p><ul><li>水平：<code>left</code>、<code>center</code>、<code>right</code>  </li><li>垂直：<code>top</code>、<code>center</code>、<code>bottom</code>  </li><li>如果只写一个值，另一个方向的值取 <code>center</code></li></ul><p><strong>通过长度指定坐标位置：</strong><br>以元素左上角为坐标原点，设置图片左上角的位置。  </p><ul><li>两个值，分别为 x 坐标和 y 坐标  </li><li>只写一个值，表示 x 坐标，y 坐标取 <code>center</code></li></ul></li><li><p><strong><code>background</code></strong><br><strong>作用：</strong> 复合属性，允许同时设置背景颜色、图片、重复方式、位置等，没有数量和顺序要求。</p></li></ol><p><strong>举例：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f0f0f0</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&#x27;image.png&#x27;</span>);</span><br><span class="line">    <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">    <span class="attribute">background-position</span>: center top;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CSS鼠标属性"><a href="#CSS鼠标属性" class="headerlink" title="CSS鼠标属性"></a>CSS鼠标属性</h2><p><strong>CSS 属性名：</strong><br><code>cursor</code></p><p><strong>作用：</strong><br>设置鼠标光标的样式。</p><p><strong>常用值：</strong>  </p><ul><li><code>pointer</code> ：小手  </li><li><code>move</code> ：移动图标  </li><li><code>text</code> ：文字选择器  </li><li><code>crosshair</code> ：十字架  </li><li><code>wait</code> ：等待  </li><li><code>help</code> ：帮助</li></ul><p><strong>举例：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CSS盒子模型"><a href="#CSS盒子模型" class="headerlink" title="CSS盒子模型"></a>CSS盒子模型</h2><h3 id="CSS-长度单位"><a href="#CSS-长度单位" class="headerlink" title="CSS 长度单位"></a>CSS 长度单位</h3><ol><li>px：像素。 </li><li>em：相对元素（即当前元素或父元素） font-size 的倍数。 </li><li>rem：相对根字体大小，html标签就是根。</li><li>%：相对父元素计算。 </li><li><code>vw</code> 和 <code>vh</code> 视口的%，10vw即窗口宽度的10%</li></ol><blockquote><p>注意：CSS中设置长度，必须加单位，否则样式无效！</p></blockquote><h2 id="元素的显示模式"><a href="#元素的显示模式" class="headerlink" title="元素的显示模式"></a>元素的显示模式</h2><h3 id="块元素-block"><a href="#块元素-block" class="headerlink" title="块元素(block)"></a>块元素(block)</h3><blockquote><p>特点</p><ol><li>在页面中独占一行，不会与任何元素共用一行</li><li>默认宽度： 撑满父元素</li><li>默认高度： 由内容撑开</li><li>可以通过<code>css</code>设置宽高</li></ol></blockquote><p>块元素常见有哪些</p><blockquote><ol><li>主体结构标签： <code>html</code> <code>body</code></li><li>排版标签： <code>h1</code>~&#96;h6<code> ,</code>hr<code> ,</code>p<code>,</code>pre<code>,</code>div&#96;</li><li>列表标签： <code>ul</code>, <code>ol</code>,<code>li</code>,<code>dl</code>,<code>dt</code>,<code>dd</code></li><li>表格相关标签： <code>table</code>,<code>tbody</code>,<code>thead</code>, <code>tfoot</code>,<code>tr</code>,<code>caption</code></li><li><code>form</code>与<code>option</code></li></ol></blockquote><h3 id="行内元素（inline）"><a href="#行内元素（inline）" class="headerlink" title="行内元素（inline）"></a>行内元素（inline）</h3><blockquote><p>特点</p><ol><li>在页面中不独占一行，一行中不能容纳下的行内元素，会在下一行继续排列</li><li>默认宽度： 由内容撑开</li><li>默认高度： 由内容撑开</li><li>无法通过<code>css</code>设置宽高</li></ol></blockquote><p>行内元素常见有哪些</p><blockquote><ol><li>文本标签： <code>br</code>,<code>em</code>,<code>strong</code>,<code>sup</code>,<code>sub</code>,<code>del</code>,<code>ins</code></li><li><code>a</code>与<code>label</code></li></ol></blockquote><h3 id="行内块元素-inline-block"><a href="#行内块元素-inline-block" class="headerlink" title="行内块元素 (inline-block)"></a>行内块元素 (inline-block)</h3><blockquote><p>特点： </p><ol><li>在页面中不独占一行，一行中不能容纳下的行内元素，会在下一行继续排列</li><li>默认宽度： 由内容撑开</li><li>默认高度： 由内容撑开</li><li>可以通过<code>css</code>设置狂高</li></ol></blockquote><p>行内块元素常见有哪些？</p><blockquote><ol><li>图片： <code>img</code></li><li>单元格：<code>td</code>,<code>th</code></li><li>表单控件： <code>input</code>,<code>textarea</code>,<code>select</code>,<code>button</code></li><li>框架标签： <code>iframe</code></li></ol></blockquote><h4 id="修改元素的显示模式"><a href="#修改元素的显示模式" class="headerlink" title="修改元素的显示模式"></a>修改元素的显示模式</h4><p>通过修改<code>css</code>中的<code>display</code>的属性可以修改元素的默认显示模式</p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td><code>none</code></td><td>隐藏</td></tr><tr><td><code>block</code></td><td>块级元素</td></tr><tr><td><code>inline</code></td><td>内联元素</td></tr><tr><td><code>inline-block</code></td><td>行内块元素</td></tr></tbody></table><h2 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h2><p><code>css</code>会把所有的<code>html</code>元素堪称一个盒子，所有的样式都是基于这个盒子</p><ol><li>**margin(外边距)**： 盒子与外界的距离</li><li>**border(边框)**： 盒子的边框</li><li><strong>padding（内边距）</strong>： 紧贴内容的补白区域</li><li><strong>content（内容）</strong>：元素中的文本或者后代元素都是它的内容</li></ol><p>图示如下：</p><p><img src="/../img/md/%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B.png"></p><p>盒子的大小 &#x3D; <code>content</code> + 左右<code>padding</code>  + 左右<code>border</code></p><blockquote><p>外边距<code>margin</code>不会影响盒子的大小，但会影响盒子的位置</p></blockquote><h2 id="盒子内容区-content"><a href="#盒子内容区-content" class="headerlink" title="盒子内容区(content)"></a>盒子内容区(content)</h2><table><thead><tr><th>css属性</th><th>功能</th></tr></thead><tbody><tr><td><code>width</code></td><td>内容区宽度</td></tr><tr><td><code>max-width</code></td><td>内容区最大宽度</td></tr><tr><td><code>min-width</code></td><td>内容区最小宽度</td></tr><tr><td><code>height</code></td><td>内容去高度</td></tr><tr><td><code>max-height</code></td><td>内容区最大高度</td></tr><tr><td><code>min-height</code></td><td>内容区最小高度</td></tr></tbody></table><blockquote><p>注意：</p><p><code>max-width</code>,<code>min-width</code>一般不与<code>width</code>一起使用</p><p><code>max-height</code>,<code>min-height</code>一般不与<code>height</code>一起使用</p></blockquote><p>默认宽度就是不设置width属性时，元素呈现的宽度</p><p><strong>总宽度</strong> &#x3D; 父的<code>content</code> - 自身的左右<code>margin</code></p><p><strong>内容区的宽度</strong> &#x3D; 父的<code>content</code> - 自身的左右<code>margin</code> - 自身的左右<code>border</code> - 自身的左右<code>padding</code></p><h2 id="盒子内边距-padding"><a href="#盒子内边距-padding" class="headerlink" title="盒子内边距(padding)"></a>盒子内边距(padding)</h2><table><thead><tr><th>css属性</th><th>功能</th></tr></thead><tbody><tr><td><code>padding-top</code></td><td>上内边距</td></tr><tr><td><code>padding-right</code></td><td>右内边距</td></tr><tr><td><code>padding-bottom</code></td><td>下内边距</td></tr><tr><td><code>padding-left</code></td><td>左内边距</td></tr><tr><td><code>padding</code></td><td>复合属性</td></tr></tbody></table><p><code>padding</code>复合属性的使用规则：</p><ol><li><code>padding: 10px;</code> 四个方向内边距都是<code>10px</code></li><li><code>padding:10px 20px;</code> 上下<code>10px</code> 左右<code>20px</code> </li><li><code>padding:10px 20px 30px;</code> 上<code>10px</code> 左右<code>20px</code> 下<code>30px</code></li><li><code>padding:10px 20px 30px 40px;</code> 上<code>10px</code> 右<code>20px</code>  下<code>30px</code> 左<code>40px</code></li></ol><h2 id="盒子边框-border"><a href="#盒子边框-border" class="headerlink" title="盒子边框(border)"></a>盒子边框(border)</h2><p><code>border</code> 属性在 CSS 中用于定义元素边框的样式、宽度和颜色。可以为各个方向的边框单独设置，也可以使用简写属性同时设置四个方向的边框。</p><p><strong><code>border-style</code></strong></p><ul><li>用于定义边框线的样式。</li><li>可以为四个方向统一设置，也可以分别设置。</li><li>常见的属性值：<ul><li><code>none</code> – 无边框（默认值）。</li><li><code>solid</code> – 实线。</li><li><code>dashed</code> – 虚线。</li><li><code>dotted</code> – 点线。</li><li><code>double</code> – 双实线。</li></ul></li></ul><p> <strong><code>border-width</code></strong></p><ul><li>指定边框的宽度。</li><li>可以统一设置四个方向的宽度，也可以分别设置。</li><li>默认值通常为 <code>medium</code>，也可以使用长度单位如 <code>px</code>、<code>em</code>、<code>%</code> 等。</li></ul><p><strong><code>border-color</code></strong></p><ul><li>指定边框的颜色。</li><li>可以为四个方向统一设置颜色，也可以分别设置。</li><li>默认颜色通常为黑色。</li></ul><p> **<code>border</code> **</p><ul><li>将 <code>border-width</code>、<code>border-style</code> 和 <code>border-color</code> 合并到一行中。</li><li>语法：<code>border: &lt;宽度&gt; &lt;样式&gt; &lt;颜色&gt;;</code></li><li>示例：<code>border: 2px solid red;</code></li><li>该简写属性的值顺序灵活，但必须至少包含一个样式值。</li></ul><table><thead><tr><th>属性名称</th><th>功能</th><th>属性值</th></tr></thead><tbody><tr><td><code>border-style</code></td><td>设置边框线风格</td><td><code>none</code>，<code>solid</code>，<code>dashed</code>，<code>dotted</code>，<code>double</code></td></tr><tr><td><code>border-width</code></td><td>设置边框宽度</td><td>长度单位（<code>px</code>, <code>em</code>, <code>%</code>），默认 <code>medium</code></td></tr><tr><td><code>border-color</code></td><td>设置边框颜色</td><td>颜色值，默认 <code>black</code></td></tr><tr><td><code>border</code></td><td>边框简写属性</td><td><code>&lt;宽度&gt; &lt;样式&gt; &lt;颜色&gt;</code></td></tr><tr><td><code>border-top</code></td><td>设置上边框</td><td>包含 <code>style</code>，<code>width</code>，<code>color</code></td></tr><tr><td><code>border-right</code></td><td>设置右边框</td><td>包含 <code>style</code>，<code>width</code>，<code>color</code></td></tr><tr><td><code>border-bottom</code></td><td>设置下边框</td><td>包含 <code>style</code>，<code>width</code>，<code>color</code></td></tr><tr><td><code>border-left</code></td><td>设置左边框</td><td>包含 <code>style</code>，<code>width</code>，<code>color</code></td></tr><tr><td><code>border-top-style</code></td><td>上边框线风格</td><td>与 <code>border-style</code> 相同</td></tr><tr><td><code>border-right-style</code></td><td>右边框线风格</td><td>与 <code>border-style</code> 相同</td></tr><tr><td><code>border-bottom-style</code></td><td>下边框线风格</td><td>与 <code>border-style</code> 相同</td></tr><tr><td><code>border-left-style</code></td><td>左边框线风格</td><td>与 <code>border-style</code> 相同</td></tr><tr><td><code>border-top-width</code></td><td>上边框宽度</td><td>与 <code>border-width</code> 相同</td></tr><tr><td><code>border-right-width</code></td><td>右边框宽度</td><td>与 <code>border-width</code> 相同</td></tr><tr><td><code>border-bottom-width</code></td><td>下边框宽度</td><td>与 <code>border-width</code> 相同</td></tr><tr><td><code>border-left-width</code></td><td>左边框宽度</td><td>与 <code>border-width</code> 相同</td></tr><tr><td><code>border-top-color</code></td><td>上边框颜色</td><td>与 <code>border-color</code> 相同</td></tr><tr><td><code>border-right-color</code></td><td>右边框颜色</td><td>与 <code>border-color</code> 相同</td></tr><tr><td><code>border-bottom-color</code></td><td>下边框颜色</td><td>与 <code>border-color</code> 相同</td></tr><tr><td><code>border-left-color</code></td><td>左边框颜色</td><td>与 <code>border-color</code> 相同</td></tr></tbody></table><h2 id="盒子外边距-margin"><a href="#盒子外边距-margin" class="headerlink" title="盒子外边距(margin)"></a>盒子外边距(margin)</h2><table><thead><tr><th>CSS属性名</th><th>功能</th><th>属性值</th></tr></thead><tbody><tr><td><code>margin-left</code></td><td>左外边距</td><td><code>CSS</code>中的长度值</td></tr><tr><td><code>margin-right</code></td><td>右外边距</td><td><code>CSS</code>中的长度值</td></tr><tr><td><code>margin-top</code></td><td>上外边距</td><td><code>CSS</code>中的长度值</td></tr><tr><td><code>margin-bottom</code></td><td>下外边距</td><td><code>CSS</code>中的长度值</td></tr><tr><td><code>margin</code></td><td>复合属性，可以写1-4个值，规律同<code>padding</code></td><td><code>CSS</code>中的长度值</td></tr></tbody></table><h3 id="margin注意事项"><a href="#margin注意事项" class="headerlink" title="margin注意事项"></a>margin注意事项</h3><blockquote><ol><li>子元素的<code>margin</code>，是参考父元素的<code>content</code>计算的。(因为子元素出于父元素的<code>content</code>中)</li><li><code>margin-left</code>, <code>margin-top</code>影响自己的位置；<code>margin-bottom</code>,<code>margin-right</code>：影响后面兄弟的位置</li><li><code>block</code>，<code>inline-block</code>，均可以完美设置四个方向的<code>margin</code>；但<code>inline</code>，只能完美设置左右的<code>margin</code>，上下<code>margin</code>无效</li><li><code>margin</code>的值可以是<code>auto</code>,如果给一个有宽度的块级元素设置左右<code>margin</code>都为<code>auto</code>，该块级元素会在父元素水平居中</li><li><code>margin</code>的值可以是负值</li></ol></blockquote><h3 id="margin塌陷问题"><a href="#margin塌陷问题" class="headerlink" title="margin塌陷问题"></a>margin塌陷问题</h3><p><strong>什么是<code>margin</code>塌陷</strong>？</p><p>第一个元素的<code>margin-top</code>会作用在父元素上，最后一个元素的<code>margin-bottom</code>会作用在父元素上</p><p><strong>如何解决</strong></p><ul><li>方案一： 给父元素设置不为0的<code>padding</code></li><li>方案二： 给父元素设置宽度不为0的<code>border</code></li><li>方案三： 给父元素设置css样式<code>overflow: hidden</code></li></ul><h3 id="margin合并问题"><a href="#margin合并问题" class="headerlink" title="margin合并问题"></a>margin合并问题</h3><p><strong>什么是<code>margin</code>合并</strong></p><p>上面兄弟元素的<code>margin-bottom</code>会和下面兄弟元素的<code>margin-top</code>合并，取一个最大的值，而不是相加</p><p><strong>如何解决</strong></p><p>无需解决，布局时上下兄弟元素，只给一个设置上下外边距即可</p><h2 id="处理内容溢出"><a href="#处理内容溢出" class="headerlink" title="处理内容溢出"></a>处理内容溢出</h2><table><thead><tr><th>css属性名</th><th>功能</th><th>属性值</th></tr></thead><tbody><tr><td><code>overflow</code></td><td>溢出内容的处理方式</td><td><code>visible</code>:显示，默认值 <code>hidden</code>:隐藏<br /> <code>scroll</code>: 显示滚动条，不论内容是否溢出<br /><code>auto</code>:自动显示滚动条，内容不溢出不显示</td></tr><tr><td><code>overflow-x</code></td><td>水平方向溢出内容的处理方式</td><td>同<code>overflow</code></td></tr><tr><td><code>overflow-y</code></td><td>垂直方向溢出内容的处理方式</td><td>同<code>overflow</code></td></tr></tbody></table><h2 id="隐藏元素的方式"><a href="#隐藏元素的方式" class="headerlink" title="隐藏元素的方式"></a>隐藏元素的方式</h2><p><strong>visibility属性</strong></p><p><code>visibility</code>属性默认值是<code>show</code>，如果设置为<code>hidden</code>，元素会隐藏</p><p>元素看不见了，还占有原来的位置</p><p><strong>display属性</strong></p><p>设置<code>display:none</code>，就可以让元素隐藏</p><p>彻底地隐藏</p><h2 id="元素继承"><a href="#元素继承" class="headerlink" title="元素继承"></a>元素继承</h2><p>如果元素本身没有某个样式，则会继承父元素的样式</p><p><strong>会继承的css属性</strong></p><p>字体属性、文本属性（除了vertical-align）、文字颜色等</p><p><strong>不会继承的css属性</strong></p><p>边框，背景，内边距，外边距，宽高，溢出方式等</p><blockquote><p>能继承的属性，往往都是不影响布局的</p></blockquote><h2 id="布局居中的技巧"><a href="#布局居中的技巧" class="headerlink" title="布局居中的技巧"></a>布局居中的技巧</h2><p><strong>水平居中</strong></p><ul><li>若子元素为(有宽度)<strong>块元素</strong>，给父元素加上： <code>margin: 0 auto</code></li><li>若子元素为<strong>行内元素、行内块元素</strong>，给父元素加上：<code>text-align: center</code></li></ul><p><strong>垂直居中</strong></p><ul><li>若子元素为<strong>块元素</strong>，给子元素加上:<code>margintop: (值为：父元素content - 子元素盒子高) / 2</code></li><li>若子元素为行内元素，行内块元素，让父元素的<code>height</code>等于父元素的<code>line-height</code>，每个子元素加上<code>vertical-align: middle</code></li></ul><h2 id="行内（块）元素之间的空白问题"><a href="#行内（块）元素之间的空白问题" class="headerlink" title="行内（块）元素之间的空白问题"></a>行内（块）元素之间的空白问题</h2><h3 id="问题1"><a href="#问题1" class="headerlink" title="问题1"></a>问题1</h3><p><strong>行内元素、行内块元素，彼此之间的换行会被浏览器解析为一个空白字符。</strong></p><p><strong>解决方案：</strong></p><p>给父元素设置<code>font-size: 0</code>，再给需要显示文字的元素，单独设置字体大小</p><h3 id="问题2"><a href="#问题2" class="headerlink" title="问题2"></a>问题2</h3><p><strong>行内块元素默认与文本的基线对齐，而文本的基线与文本最底端有一定距离</strong></p><p><strong>解决方案：</strong></p><ol><li>行内块元素设置<code>vertical-align</code>，值不为<code>baseline</code>即可</li><li>给父元素设置<code>font-size: 0</code>。如果行内块内部还有文本，则需单独设置<code>font-size</code></li></ol><h2 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h2><h3 id="元素浮动后的特点"><a href="#元素浮动后的特点" class="headerlink" title="元素浮动后的特点"></a>元素浮动后的特点</h3><ol><li>脱离文档流</li><li>无论浮动前，元素的显示模式是什么，浮动后，默认内容由宽高撑开，且可以设置宽高</li><li>不会独占一行，可以与其他元素共用一行</li><li>不会出现<code>margin</code>合并和<code>margin</code>塌陷问题，能够有效设置<code>margin</code>和<code>padding</code></li><li>不会像行内（块）元素一样被当作文本处理（没有行内块的空白问题）</li></ol><h3 id="元素浮动产生的影响"><a href="#元素浮动产生的影响" class="headerlink" title="元素浮动产生的影响"></a>元素浮动产生的影响</h3><p><strong>对兄弟元素的影响：</strong>后面的兄弟元素，会占据浮动元素之前的位置，在浮动元素的下面，对前面的兄弟无影响</p><p><strong>对父元素的影响：</strong>不能撑起父元素的高度，导致父元素高度塌陷，但父元素的宽度依然束缚浮动的元素</p><h3 id="解决浮动产生的影响（清除浮动）"><a href="#解决浮动产生的影响（清除浮动）" class="headerlink" title="解决浮动产生的影响（清除浮动）"></a>解决浮动产生的影响（清除浮动）</h3><ul><li><p>方案1：所有浮动元素后面添加块级元素，并为该块级元素设置<code>clear: both</code></p></li><li><p><strong>方案2</strong>： 给浮动元素的父元素设置伪元素，通过伪元素清除浮动，原理与1相同</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.father</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">clear</span>: both</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>布局规则，父元素中的元素要么全部浮动，要么全部不浮动</p></blockquote><h3 id="浮动相关属性"><a href="#浮动相关属性" class="headerlink" title="浮动相关属性"></a>浮动相关属性</h3><table><thead><tr><th>CSS属性</th><th>功能</th><th>属性值</th></tr></thead><tbody><tr><td><code>float</code></td><td>设置浮动</td><td><code>left</code>:设置左浮动<br /> <code>right</code>: 设置右浮动<br /> <code>none</code>: 不浮动，默认值</td></tr><tr><td><code>clear</code></td><td>清除浮动，清楚前面兄弟元素浮动元素的响应</td><td><code>left</code>: 清除前面左浮动的影响<br /> <code>right</code>: 清除前面右浮动的影响<br /> <code>both</code>: 清楚前面左右浮动的影响</td></tr></tbody></table><h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><h3 id="相对定位"><a href="#相对定位" class="headerlink" title="相对定位"></a>相对定位</h3><p><strong>如何设置相对定位？</strong></p><ul><li><p>给元素设置<code>position: relative</code></p></li><li><p>可以使用<code>left</code>,<code>right</code>,<code>top</code>,<code>bottom</code>四个属性调整位置</p><p><code>left: 20px</code>距离参考点左端20px （即向右移动20px）</p><p><code>left: -20px</code>距离参考点左端-20px （即向左移动20px）</p><p><code>right: 20px</code> 距离参考点右端20px （即向左移动20px）</p><p><code>right: -20px</code> 距离参考点右端-20px (即向右移动20px)</p></li></ul><p><strong>相对定位的参考点在哪里？</strong></p><ul><li>相对自己原来的位置</li></ul><p><strong>相对定位的特点：</strong></p><ol><li><p>不脱离文档流</p></li><li><p>有定位属性的元素的显示<strong>层级</strong>比普通元素高，无论什么定位，显示层级都是一样的</p><p>默认规则是：</p><ul><li>有定位属性的元素会盖在普通元素之上</li><li>都发生定位的两个元素，后写的元素会盖在先写的元素之上</li></ul></li><li><p><code>left</code>和<code>right</code>不能一起设置，<code>top</code>和<code>bottom</code>不能一起设置</p></li><li><p>相对定位的元素可以继续设置浮动和<code>margin</code>，但不建议</p></li></ol><blockquote><p>绝大多数情况下，相对定位会和绝对定位配合使用</p></blockquote><h3 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h3><p><strong>设置绝对定位</strong></p><ul><li>给元素设置<code>position: absolute</code></li><li>可以使用<code>left</code>, <code>right</code>, <code>top</code>, <code>bottom</code>四个属性调整位置，用法同相对定位</li></ul><p><strong>绝对定位的参考点在哪里？</strong></p><ul><li>参考该元素的<strong>包含块</strong></li></ul><blockquote><p>什么是包含块？</p><ol><li>对于没有脱离文档流： 包含块就是父元素</li><li>对于脱离文档流的元素： 包含块是第一个拥有定位属性的祖先元素（如果所有祖先都没定位，那包含块就是整个页面）</li></ol></blockquote><p><strong>绝对定位元素的特点：</strong></p><ol><li>脱离文档流，会对后面的兄弟元素、父元素有影响</li><li><code>left</code>不能和<code>right</code>一起设置，<code>top</code>不能和<code>bottom</code>一起设置</li><li>绝对定位、浮动不能一起设置，如果同时设置，浮动失效，以定位为主</li><li>绝对定位的元素，也能通过<code>margin</code>调整位置，但不推荐</li><li>无论什么类型的元素(行内、行内块、块级) 设置为绝对定位之后，都变成了<strong>定位元素</strong></li></ol><blockquote><p>何为定位元素？ –默认宽高被内容撑开，且能自由设置宽高</p></blockquote><h3 id="固定定位"><a href="#固定定位" class="headerlink" title="固定定位"></a>固定定位</h3><p><strong>如何设置固定定位</strong></p><ul><li>给元素设置<code>position: fixed</code></li><li>可以使用<code>left</code>，<code>right</code>,<code>top</code>,<code>bottom</code></li></ul><p><strong>固定定位的参考点在哪里</strong></p><ul><li>参考它的<strong>视口</strong></li></ul><blockquote><p>什么是视口？ ——对于<code>pc</code>浏览器而言，即浏览器窗口</p></blockquote><p><strong>固定定位元素的特点</strong></p><ol><li>脱离文档流，对之后的父亲兄弟元素有影响</li><li><code>left</code>不能和<code>right</code>一起设置，<code>top</code>和<code>bottom</code>不能一起设置</li><li>固定定位和浮动不能一起设置，一起设置后浮动失效，以固定定位为主</li><li>固定定位的元素，也能通过<code>margin</code>调整设置，不推荐</li><li>固定定位后的元素会变成定位元素</li></ol><h3 id="粘性定位"><a href="#粘性定位" class="headerlink" title="粘性定位"></a>粘性定位</h3><p><strong>如何设置为粘性定位？</strong></p><ul><li>给元素设置<code>position: sticky</code>即可粘性定位</li><li>可以使用<code>left</code>,<code>right</code>,<code>top</code>,<code>bottom</code>四个属性调整位置，不过最常用的是<code>top</code>值</li></ul><p><strong>粘性定位的参考点在哪里？</strong></p><ul><li>离它最近的一个拥有”滚动机制”的祖先元素</li></ul><p><strong>粘性定位元素特点</strong></p><ul><li>不脱离文档流，专门用于滚动窗口时的新的定位方式</li><li>最常用的值是<code>top</code></li><li>粘性定位和浮动可以同时设置，但不推荐</li><li>粘性定位和<code>margin</code>可以同时设置，但不推荐</li></ul><h3 id="定位层级"><a href="#定位层级" class="headerlink" title="定位层级"></a>定位层级</h3><ol><li>具有定位属性的元素的显示层级比普通元素高，无论什么定位，显示层级都是一样的</li><li>如果发生重叠，后面的元素会显示在前面元素上</li><li>可以通过<code>css</code>属性<code>z-index</code>调整元素的层级</li><li><code>z-index</code>的属性是数字，没有单位，值越大显示层级越高</li><li>只有定位的元素设置<code>z-index</code>才有效</li><li>如果<code>z-index</code>值大的元素，依然没有覆盖掉<code>z-index</code>小的元素，可能是因为其包含块的层级问题</li></ol><h3 id="定位的特殊应用"><a href="#定位的特殊应用" class="headerlink" title="定位的特殊应用"></a>定位的特殊应用</h3><blockquote><p>注意：</p><ol><li>发生固定定位、绝对定位后，元素变成了定位元素，默认宽高被内容撑开，且依然可以设置宽高</li><li>发生相对定位后，元素依然是之前的显示模式</li><li>以下所说的特殊应用，只针对<strong>绝对定位</strong>和<strong>固定定位</strong>的元素</li></ol></blockquote><p><strong>让定位元素充满包含块</strong></p><ol><li>块宽想与包含块一致，可以给定位元素设置<code>left</code>和<code>right</code>为<code>0</code></li><li>高度想与包含块一致，<code>top</code>和<code>bottom</code>设置为0</li></ol><p><strong>让定位元素在包含块中居中</strong></p><ul><li><p>方案一</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">left</span>:<span class="number">0</span>;</span><br><span class="line"><span class="attribute">right</span>:<span class="number">0</span>;</span><br><span class="line"><span class="attribute">top</span>:<span class="number">0</span>;</span><br><span class="line"><span class="attribute">bottom</span>:<span class="number">0</span>;</span><br><span class="line"><span class="attribute">margin</span>:auto;</span><br></pre></td></tr></table></figure></li><li><p>方案二</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line"><span class="attribute">margin-left</span>: 负的宽度一半;</span><br><span class="line"><span class="attribute">margin-top</span>: 负的高度一半;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>注意： 该定位的元素必须设置宽高</p></blockquote><h1 id="HTML5"><a href="#HTML5" class="headerlink" title="HTML5"></a>HTML5</h1><h2 id="新增语义化标签"><a href="#新增语义化标签" class="headerlink" title="新增语义化标签"></a>新增语义化标签</h2><h3 id="布局标签"><a href="#布局标签" class="headerlink" title="布局标签"></a>布局标签</h3><table><thead><tr><th>标签名</th><th>语义</th><th>单&#x2F;双标签</th></tr></thead><tbody><tr><td><code>header</code></td><td>整个页面，或部分区域的头部</td><td>双</td></tr><tr><td><code>footer</code></td><td>整个页面，或部分区域的底部</td><td>双</td></tr><tr><td><code>nav</code></td><td>导航</td><td>双</td></tr><tr><td><code>article</code></td><td>文章、帖子、杂志、新闻、博客、评论等</td><td>双</td></tr><tr><td><code>section</code></td><td>页面中的某段文字，或文章中的某段文字（里面文字通常会包含标题）</td><td>双</td></tr><tr><td><code>aside</code></td><td>侧边栏</td><td>双</td></tr></tbody></table><p>关于<code>article</code>和<code>section</code></p><blockquote><ol><li>article里面可以有多个section。</li><li>section强调的是分段或分块，如果你想将一块内容分成几段的时候，可使用section元 素。</li><li>article比section更强调独立性，一块内容如果比较独立、比较完整，应该使用 article元素</li></ol></blockquote><h3 id="状态标签"><a href="#状态标签" class="headerlink" title="状态标签"></a>状态标签</h3><p><strong><code>meter</code> 标签</strong></p><p><strong>语义</strong>：定义已知范围内的标量测量。也被称为 <code>gauge</code>（尺度），双标签，例如：电量、磁盘用量等。</p><p><strong>属性值描述</strong>：</p><ul><li><code>high</code>：数值规定高值</li><li><code>low</code>：数值规定低值</li><li><code>max</code>：数值规定最大值</li><li><code>min</code>：数值规定最小值</li><li><code>optimum</code>：数值规定最优值</li><li><code>value</code>：数值规定当前值</li></ul><p><strong>常用属性如下</strong>：</p><table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td><code>high</code></td><td>数值</td><td>规定高值</td></tr><tr><td><code>low</code></td><td>数值</td><td>规定低值</td></tr><tr><td><code>max</code></td><td>数值</td><td>规定最大值</td></tr><tr><td><code>min</code></td><td>数值</td><td>规定最小值</td></tr><tr><td><code>optimum</code></td><td>数值</td><td>规定最优值</td></tr><tr><td><code>value</code></td><td>数值</td><td>规定当前值</td></tr></tbody></table><p><strong><code>progress</code> 标签</strong></p><p><strong>语义</strong>：显示某个任务完成的进度的指示器，一般用于表示进度条，双标签，例如：工作完成进度等。</p><p><strong>常用属性如下</strong>：</p><table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td><code>max</code></td><td>数值</td><td>规定目标值</td></tr><tr><td><code>value</code></td><td>数值</td><td>规定当前进度</td></tr></tbody></table><h3 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h3><table><thead><tr><th>标签名</th><th>语义</th><th>单&#x2F;双标签</th></tr></thead><tbody><tr><td><code>datalist</code></td><td>用于搜索框的关键字提示</td><td>双</td></tr><tr><td><code>details</code></td><td>用于展示问题和答案，或对专有名词进行解释</td><td>双</td></tr><tr><td><code>summary</code></td><td>写在 <code>details</code> 的里面，用于指定问题或专有名词</td><td>双</td></tr></tbody></table><p><code>datalist</code> 示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">list</span>=<span class="string">&quot;mydata&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">&quot;mydata&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;周冬雨&quot;</span>&gt;</span>周冬雨<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;周杰伦&quot;</span>&gt;</span>周杰伦<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;温兆伦&quot;</span>&gt;</span>温兆伦<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;马冬梅&quot;</span>&gt;</span>马冬梅<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">datalist</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>details</code> 和 <code>summary</code> 示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">details</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">summary</span>&gt;</span>如何走上人生巅峰？<span class="tag">&lt;/<span class="name">summary</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>一步一步走呗<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">details</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="文本标签"><a href="#文本标签" class="headerlink" title="文本标签"></a>文本标签</h3><p><strong>文本注音</strong></p><table><thead><tr><th>标签名</th><th>语义</th><th>单&#x2F;双标签</th></tr></thead><tbody><tr><td><code>ruby</code></td><td>包裹需要注音的文字</td><td>双</td></tr><tr><td><code>rt</code></td><td>写注音，<code>rt</code> 标签写在 <code>ruby</code> 的里面</td><td>双</td></tr></tbody></table><p><strong>示例代码：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ruby</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>魑魅魍魉<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">rt</span>&gt;</span>chī mèi wǎng liǎng<span class="tag">&lt;/<span class="name">rt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ruby</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>文本标记</strong></p><table><thead><tr><th>标签名</th><th>语义</th><th>单&#x2F;双标签</th></tr></thead><tbody><tr><td><code>mark</code></td><td>标记</td><td>双</td></tr></tbody></table><p><strong>注意</strong>：W3C 建议 <code>mark</code> 用于标记搜索结果中的关键字。</p><h2 id="新增表单功能"><a href="#新增表单功能" class="headerlink" title="新增表单功能"></a>新增表单功能</h2><h3 id="表单控件新增属性"><a href="#表单控件新增属性" class="headerlink" title="表单控件新增属性"></a>表单控件新增属性</h3><table><thead><tr><th>属性名</th><th>功能</th></tr></thead><tbody><tr><td><code>placeholder</code></td><td>提示文字（不是默认值<code>value</code>）,适用于<strong>文字输入类</strong>的表单控件</td></tr><tr><td><code>required</code></td><td>表示该输入项必填，适用于<strong>除按钮外</strong>其他表单控件</td></tr><tr><td><code>autofocus</code></td><td>自动获取表单焦点，适用于所有控件。设置多个时生效第一个</td></tr><tr><td><code>autocomplete</code></td><td>自动补全，可设置为<code>on</code>和<code>off</code>，适用于文字输入类的表单控件<br />密码输入框，多行输入框不可用</td></tr><tr><td><code>pattern</code></td><td>填写正则表达式，适用于于文本输入类表单控件<br />多行输入框不可用；输入空不验证，需与<code>required</code>配合</td></tr></tbody></table><h3 id="input-新增属性值"><a href="#input-新增属性值" class="headerlink" title="input 新增属性值"></a>input 新增属性值</h3><table><thead><tr><th>属性名</th><th>功能描述</th></tr></thead><tbody><tr><td><code>email</code></td><td><strong>邮箱</strong>类型的输入框，表单提交时会验证格式，输入为空则不验证格式。</td></tr><tr><td><code>url</code></td><td><strong>URL</strong> 类型的输入框，表单提交时会验证格式，输入为空则不验证格式。</td></tr><tr><td><code>number</code></td><td><strong>数字</strong>类型的输入框，表单提交时会验证格式，输入为空则不验证格式。</td></tr><tr><td><code>search</code></td><td><strong>搜索</strong>类型的输入框，表单提交时不会验证格式。</td></tr><tr><td><code>tel</code></td><td><strong>电话</strong>类型的输入框，表单提交时不会验证格式，在移动端使用时，会唤起数字键盘。</td></tr><tr><td><code>range</code></td><td><strong>范围</strong>选择框，默认值为 50，表单提交时不会验证格式。</td></tr><tr><td><code>color</code></td><td><strong>颜色</strong>选择框，默认值为黑色，表单提交时不会验证格式。</td></tr><tr><td><code>date</code></td><td><strong>日期</strong>选择框，默认值为空，表单提交时不会验证格式。</td></tr><tr><td><code>month</code></td><td><strong>月份</strong>选择框，默认值为空，表单提交时不会验证格式。</td></tr><tr><td><code>week</code></td><td>周选择框，默认值为空，表单提交时不会验证格式。</td></tr><tr><td><code>time</code></td><td><strong>时间</strong>选择框，默认值为空，表单提交时不会验证格式。</td></tr><tr><td><code>datetime-local</code></td><td><strong>日期 + 时间</strong>选择框，默认值为空，表单提交时不会验证格式。</td></tr></tbody></table><h2 id="新增多媒体标签"><a href="#新增多媒体标签" class="headerlink" title="新增多媒体标签"></a>新增多媒体标签</h2><h3 id="视频标签"><a href="#视频标签" class="headerlink" title="视频标签"></a>视频标签</h3><p><code>&lt;video&gt;</code>用来定义视频</p><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td><code>src</code></td><td>URL 地址，视频地址</td></tr><tr><td><code>width</code></td><td>像素值，设置视频播放器的宽度</td></tr><tr><td><code>height</code></td><td>像素值，设置视频播放器的高度</td></tr><tr><td><code>controls</code></td><td>向用户显示视频控件（比如播放&#x2F;暂停按钮）</td></tr><tr><td><code>muted</code></td><td>视频静音</td></tr><tr><td><code>autoplay</code></td><td>视频自动播放</td></tr><tr><td><code>loop</code></td><td>循环播放</td></tr><tr><td><code>poster</code></td><td>URL 地址，视频封面</td></tr><tr><td><code>preload</code></td><td>预加载选项，<code>auto</code> &#x2F; <code>metadata</code> &#x2F; <code>none</code>。<br>视频预加载，如果使用 <code>autoplay</code>，则忽略该属性。</td></tr></tbody></table><h3 id="音频标签"><a href="#音频标签" class="headerlink" title="音频标签"></a>音频标签</h3><p><code>&lt;audio&gt;</code>用来定义音频</p><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td><code>src</code></td><td>URL 地址，音频地址</td></tr><tr><td><code>controls</code></td><td>向用户显示音频控件（比如播放&#x2F;暂停按钮）</td></tr><tr><td><code>autoplay</code></td><td>音频自动播放</td></tr><tr><td><code>muted</code></td><td>音频静音</td></tr><tr><td><code>loop</code></td><td>循环播放</td></tr><tr><td><code>preload</code></td><td>预加载选项，<code>auto</code> &#x2F; <code>metadata</code> &#x2F; <code>none</code>。<br>音频预加载，如果使用 <code>autoplay</code>，则忽略该属性。</td></tr><tr><td><code>none</code></td><td>不预加载音频。</td></tr><tr><td><code>metadata</code></td><td>仅预先获取音频的元数据（例如长度）。</td></tr><tr><td><code>auto</code></td><td>可以下载整个音频文件，即使用户不希望使用它。</td></tr></tbody></table><h2 id="HTML5-兼容性处理"><a href="#HTML5-兼容性处理" class="headerlink" title="HTML5 兼容性处理"></a>HTML5 兼容性处理</h2><ul><li>添加元信息，让浏览器处于最优渲染模式。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 设置IE总是使用最新的文档模式进行渲染 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=Edge&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 优先使用 webkit (Chromium) 内核进行渲染，针对360等壳浏览器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;renderer&quot;</span> <span class="attr">content</span>=<span class="string">&quot;webkit&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用 html5shiv 让低版本浏览器认识 H5 的语义化标签。</p><ul><li>使用 <code>html5shiv</code> 让低版本浏览器认识 HTML5 的语义化标签。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--[if lt IE 9]&gt;</span></span><br><span class="line"><span class="comment">  &lt;script src=&quot;../sources/js/html5shiv.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure><p>扩展条件注释符号：</p><blockquote><ul><li><code>lt</code> 小于</li><li><code>lte</code> 小于等于</li><li><code>gt</code> 大于</li><li><code>gte</code> 大于等于</li><li><code>!</code> 逻辑非</li></ul></blockquote><h1 id="CSS3"><a href="#CSS3" class="headerlink" title="CSS3"></a>CSS3</h1><h2 id="私有前缀"><a href="#私有前缀" class="headerlink" title="私有前缀"></a>私有前缀</h2><ul><li><p><code>W3C</code>新提出的<code>CSS</code>特性，在被浏览器正式支持前，需要用浏览器的私有前缀来测试，正式支持后则不需要</p></li><li><p>查询CSS3兼容性的网站 [caniuse](<a href="https://caniuse.com/">Can I use… Support tables for HTML5, CSS3, etc</a>)</p></li><li><p>举例</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-webkit-<span class="attribute">border-radius</span>: <span class="number">20px</span>;</span><br><span class="line">-moz-<span class="attribute">border-radius</span>: <span class="number">20px</span>;</span><br><span class="line">-ms-<span class="attribute">border-radius</span>: <span class="number">20px</span>;</span><br><span class="line">-o-<span class="attribute">border-radius</span>: <span class="number">20px</span>;</span><br><span class="line"> <span class="attribute">border-radius</span>: <span class="number">20px</span>;</span><br><span class="line"></span><br><span class="line">Chrome 浏览器：-webkit</span><br><span class="line">Safari 浏览器： -webkit</span><br><span class="line">Firefox 浏览器：-moz</span><br><span class="line">Edge 浏览器：-webkit</span><br><span class="line">旧 Opera 浏览器：-o</span><br><span class="line">旧 IE 浏览器：-ms-</span><br></pre></td></tr></table></figure></li></ul><h2 id="新增盒模型相关属性"><a href="#新增盒模型相关属性" class="headerlink" title="新增盒模型相关属性"></a>新增盒模型相关属性</h2><h3 id="box-sizing-怪异盒模型"><a href="#box-sizing-怪异盒模型" class="headerlink" title="box-sizing 怪异盒模型"></a><code>box-sizing</code> 怪异盒模型</h3><table><thead><tr><th>可选值</th><th>含义</th></tr></thead><tbody><tr><td><code>content-box</code></td><td><code>width</code>与<code>height</code>设置的是盒子内容区的大小 （默认值）</td></tr><tr><td><code>border-box</code></td><td><code>width</code>与<code>height</code>设置的是盒子的总大小 （怪异盒模型）</td></tr></tbody></table><h3 id="resize用户调整元素大小"><a href="#resize用户调整元素大小" class="headerlink" title="resize用户调整元素大小"></a><code>resize</code>用户调整元素大小</h3><p><code>resize</code>属性控制是否允许用户调节元素尺寸</p><table><thead><tr><th>值</th><th>含义</th></tr></thead><tbody><tr><td><code>none</code></td><td>不允许用户调整元素大小。（默认）</td></tr><tr><td><code>both</code></td><td>用户可以调节元素的宽度和高度。</td></tr><tr><td><code>horizontal</code></td><td>用户可以调节元素的宽度。</td></tr><tr><td><code>vertical</code></td><td>用户可以调节元素的高度。</td></tr></tbody></table><h3 id="box-shadow盒子阴影"><a href="#box-shadow盒子阴影" class="headerlink" title="box-shadow盒子阴影"></a><code>box-shadow</code>盒子阴影</h3><ul><li>使用<code>box-shadow</code>属性为盒子添加阴影</li><li>语法</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">box-shadow</span>: h-shadow v-shadow blur spread color inset;</span><br></pre></td></tr></table></figure><ul><li>各个值的含义</li></ul><table><thead><tr><th>值</th><th>含义</th></tr></thead><tbody><tr><td><code>h-shadow</code></td><td>水平阴影的位置，必须填写，可以为负值。</td></tr><tr><td><code>v-shadow</code></td><td>垂直阴影的位置，必须填写，可以为负值。</td></tr><tr><td><code>blur</code></td><td>可选，模糊距离。</td></tr><tr><td><code>spread</code></td><td>可选，阴影的外延值。</td></tr><tr><td><code>color</code></td><td>可选，阴影的颜色。</td></tr><tr><td><code>inset</code></td><td>可选，将外部阴影改为内部阴影。</td></tr><tr><td><code>none</code></td><td>默认值，表示没有阴影。</td></tr></tbody></table><ul><li><p>示例</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 写两个值，含义：水平位置、垂直位置 */</span></span><br><span class="line"><span class="attribute">box-shadow</span>: <span class="number">10px</span> <span class="number">10px</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 写三个值，含义：水平位置、垂直位置、颜色 */</span></span><br><span class="line"><span class="attribute">box-shadow</span>: <span class="number">10px</span> <span class="number">10px</span> red;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 写三个值，含义：水平位置、垂直位置、模糊值 */</span></span><br><span class="line"><span class="attribute">box-shadow</span>: <span class="number">10px</span> <span class="number">10px</span> <span class="number">10px</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 写四个值，含义：水平位置、垂直位置、模糊值、颜色 */</span></span><br><span class="line"><span class="attribute">box-shadow</span>: <span class="number">10px</span> <span class="number">10px</span> <span class="number">10px</span> red;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 写五个值，含义：水平位置、垂直位置、模糊值、外延值、颜色 */</span></span><br><span class="line"><span class="attribute">box-shadow</span>: <span class="number">10px</span> <span class="number">10px</span> <span class="number">10px</span> <span class="number">10px</span> blue;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 写六个值，含义：水平位置、垂直位置、模糊值、外延值、颜色、内阴影 */</span></span><br><span class="line"><span class="attribute">box-shadow</span>: <span class="number">10px</span> <span class="number">10px</span> <span class="number">20px</span> <span class="number">3px</span> blue inset;</span><br></pre></td></tr></table></figure></li></ul><h3 id="opacity不透明度"><a href="#opacity不透明度" class="headerlink" title="opacity不透明度"></a><code>opacity</code>不透明度</h3><ul><li><code>opacity</code>属性能为整个元素添加透明效果，值是<code>0</code>到<code>1</code>之间的小数，<code>0</code>完全透明，<code>1</code>完全不透明</li></ul><blockquote><p><code>opacity</code>与<code>rgba</code>的区别</p><p><code>opacity</code>是一个属性，设置的是整个元素的不透明度</p><p><code>rgba</code>是颜色设置方式，用于设置颜色，它的透明度，仅仅是调整颜色的透明度</p></blockquote><h2 id="新增背景属性"><a href="#新增背景属性" class="headerlink" title="新增背景属性"></a>新增背景属性</h2><h3 id="background-origin"><a href="#background-origin" class="headerlink" title="background-origin"></a><code>background-origin</code></h3><ul><li><p><strong>作用：</strong>设置背景图原点</p></li><li><p><strong>语法</strong>：</p></li></ul><ol><li><code>padding-box</code>:从padding区域开始显示背景图像 –默认值</li><li><code>border-box</code>:从border区域开始显示背景图像。</li><li><code>content-box</code>：从content区域开始显示背景图像</li></ol><h3 id="background-clip"><a href="#background-clip" class="headerlink" title="background-clip"></a><code>background-clip</code></h3><ul><li>作用： 设置背景图的向外裁剪的区域</li><li>语法<ol><li><code>padding-box</code>:超出padding区域不再显示背景图像 –默认值、</li><li><code>border-box</code>:超出border区域不再显示背景图像。</li><li><code>content-box</code>：超出content区域不再显示背景图像</li><li><code>text</code> ：背景图只呈现在文字上，文字得是透明的</li></ol></li></ul><h3 id="background-size"><a href="#background-size" class="headerlink" title="background-size"></a><code>background-size</code></h3><ul><li><p>作用： 设置背景图的尺寸</p></li><li><p>语法： </p><ol><li><p>用长度指定背景图片的大小</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-size</span>: <span class="number">300px</span> <span class="number">200px</span>;</span><br></pre></td></tr></table></figure></li><li><p>用百分比指定背景图片的大小</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-size</span>: <span class="number">100%</span> <span class="number">100%</span></span><br></pre></td></tr></table></figure></li><li><p><code>auto</code>背景图片的真实大小。 ——默认值</p></li><li><p><code>contain</code> 等比缩放，可能会造成元素内部分区域没有背景图片</p></li><li><p><code>cover</code> 等比缩放，背景图片显示可能不完整 ——用的相对较多</p></li></ol></li></ul><h3 id="多背景图"><a href="#多背景图" class="headerlink" title="多背景图"></a>多背景图</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 添加多个背景图 */</span></span><br><span class="line"> <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">../images/bg-lt.png</span>) no-repeat, </span><br><span class="line"><span class="built_in">url</span>(<span class="string">../images/bg-rt.png</span>) no-repeat right top,</span><br><span class="line"> <span class="built_in">url</span>(<span class="string">../images/bg-lb.png</span>) no-repeat left bottom,</span><br><span class="line"> <span class="built_in">url</span>(<span class="string">../images/bg-rb.png</span>) no-repeat right bottom;</span><br></pre></td></tr></table></figure><h2 id="新增边框属性"><a href="#新增边框属性" class="headerlink" title="新增边框属性"></a>新增边框属性</h2><h3 id="边框圆角"><a href="#边框圆角" class="headerlink" title="边框圆角"></a>边框圆角</h3><ul><li><p>在CSS3中，使用<code>border-radius</code>属性可以将盒子变为圆角</p></li><li><p>设置圆角</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">border-radius</span>：<span class="number">10px</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="新增文本属性"><a href="#新增文本属性" class="headerlink" title="新增文本属性"></a>新增文本属性</h2><h3 id="文本阴影"><a href="#文本阴影" class="headerlink" title="文本阴影"></a>文本阴影</h3><p>语法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">text-shadow</span>: h-shadow v-shadow blur color;</span><br></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th>是否必需</th><th>描述</th><th>允许负值</th></tr></thead><tbody><tr><td><code>h-shadow</code></td><td>必需</td><td>水平阴影的位置</td><td>是</td></tr><tr><td><code>v-shadow</code></td><td>必需</td><td>垂直阴影的位置</td><td>是</td></tr><tr><td><code>blur</code></td><td>可选</td><td>模糊的距离</td><td>否</td></tr><tr><td><code>color</code></td><td>可选</td><td>阴影的颜色</td><td>否</td></tr></tbody></table><h3 id="文本换行white-space"><a href="#文本换行white-space" class="headerlink" title="文本换行white-space"></a>文本换行<code>white-space</code></h3><table><thead><tr><th>属性</th><th>含义</th></tr></thead><tbody><tr><td><code>normal</code></td><td>文本超出边界自动换行，文本中的换行被浏览器识别为一个空格。（默认值）</td></tr><tr><td><code>pre</code></td><td>原样输出，与 <code>pre</code> 标签的效果相同。</td></tr><tr><td><code>pre-wrap</code></td><td>在 <code>pre</code> 效果的基础上，超出元素边界自动换行。</td></tr><tr><td><code>pre-line</code></td><td>在 <code>pre</code> 效果的基础上，超出元素边界自动换行，且只识别文本中的换行，空格会忽略。</td></tr><tr><td><code>nowrap</code></td><td>强制不换行</td></tr></tbody></table><h3 id="文本溢出"><a href="#文本溢出" class="headerlink" title="文本溢出"></a>文本溢出</h3><ul><li><p><code>text-overflow</code>属性设置文本内容溢出时的呈现方式</p></li><li><p>常用值如下：</p><table><thead><tr><th>属性</th><th>含义</th></tr></thead><tbody><tr><td><code>clip</code></td><td>当内联内容溢出时，将溢出部分裁切掉。（默认值）</td></tr><tr><td><code>ellipsis</code></td><td>当内联内容溢出块容器时，将溢出部分替换为 <code>...</code>。</td></tr></tbody></table></li></ul><blockquote><p>注意：要使得 <code>text-overflow</code> 属性生效，块容器必须显式定义 <code>overflow</code> 为非 <code>visible</code>  值， <code>white-space</code> 为<code>nowrap</code> 值。</p></blockquote><h2 id="新增渐变"><a href="#新增渐变" class="headerlink" title="新增渐变"></a>新增渐变</h2><h3 id="线性渐变（Linear-Gradient）"><a href="#线性渐变（Linear-Gradient）" class="headerlink" title="线性渐变（Linear Gradient）"></a>线性渐变（Linear Gradient）</h3><p><strong>线性渐变</strong>是CSS3的一种效果，它允许你在元素的背景中创建由一种颜色逐渐过渡到另一种颜色的效果，而不需要使用图像。你可以定义渐变的方向、起点颜色、终点颜色，以及中间的颜色过渡。</p><p><strong>基本语法</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(direction, color-stop1, color-stop2, ...);</span><br></pre></td></tr></table></figure><p><code>direction</code>：指定渐变的方向，可以是角度（如 <code>45deg</code>）、关键词（如 <code>to right</code>）等。</p><p><code>color-stop1, color-stop2, ...</code>：渐变过程中使用的颜色，可以指定多个颜色值。你还可以为每个颜色值设置一个百分比，表示颜色出现在渐变的某个点。</p><p>示例</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">基本渐变：从红色到蓝色</span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(red, blue);</span><br><span class="line">指定方向：从左到右</span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to right, red, blue);</span><br><span class="line">多种颜色渐变</span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to right, red, yellow, green);</span><br><span class="line">带百分比的颜色过渡</span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to right, red <span class="number">10%</span>, yellow <span class="number">50%</span>, green <span class="number">90%</span>);</span><br><span class="line">使用角度定义方向</span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">45deg</span>, red, blue);</span><br></pre></td></tr></table></figure><h3 id="径向渐变（Radial-Gradient）"><a href="#径向渐变（Radial-Gradient）" class="headerlink" title="径向渐变（Radial Gradient）"></a>径向渐变（Radial Gradient）</h3><p><strong>径向渐变</strong>是从中心点向四周扩展的颜色渐变，通常以圆形或椭圆形的方式扩展。</p><p><strong>语法</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background</span>: <span class="built_in">radial-gradient</span>(shape size at position, color-stop1, color-stop2, ...);</span><br></pre></td></tr></table></figure><p><strong>shape</strong>：渐变的形状（默认 <code>ellipse</code>）。</p><p><strong>size</strong>：渐变的大小，可以是 <code>closest-side</code>、<code>farthest-corner</code> 等。</p><p><strong>position</strong>：渐变的中心位置（默认 <code>center</code>）。</p><p><strong>color-stop1, color-stop2</strong>：定义渐变颜色。</p><p><strong>示例</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 默认从中心开始的圆形径向渐变 */</span></span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">radial-gradient</span>(circle, red, blue);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 从左上角开始的椭圆形渐变 */</span></span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">radial-gradient</span>(ellipse at top left, red, yellow, green);</span><br></pre></td></tr></table></figure><h3 id="重复渐变（Repeating-Gradient）"><a href="#重复渐变（Repeating-Gradient）" class="headerlink" title="重复渐变（Repeating Gradient）"></a>重复渐变（Repeating Gradient）</h3><p><strong>重复渐变</strong>可以让颜色以特定的模式重复，这适用于线性和径向渐变。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">线性重复渐变语法：</span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">repeating-linear-gradient</span>(direction, color-stop1, color-stop2, ...);</span><br><span class="line">示例：</span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">repeating-linear-gradient</span>(to right, red <span class="number">0%</span>, yellow <span class="number">10%</span>, green <span class="number">20%</span>);</span><br><span class="line">径向重复渐变语法</span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">repeating-radial-gradient</span>(shape size at position, color-stop1, color-stop2, ...);</span><br><span class="line">示例：</span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">repeating-radial-gradient</span>(circle, red, yellow <span class="number">10%</span>, blue <span class="number">20%</span>);</span><br></pre></td></tr></table></figure><h2 id="2D变换"><a href="#2D变换" class="headerlink" title="2D变换"></a>2D变换</h2><blockquote><p>二维坐标系如下图所示</p></blockquote><p><img src="E:\BLOG\winter\source_posts\htmlcss\二维坐标系.png" alt="二维坐标系"></p><h3 id="2D位移"><a href="#2D位移" class="headerlink" title="2D位移"></a>2D位移</h3><p>2D 位移可以改变元素的位置，具体使用方式如下：</p><ol><li>先给元素添加 <code>transform</code> 属性 </li><li>可选值及其含义</li></ol><ul><li><strong>translateX</strong>：设置水平方向位移，需指定长度值；若指定的是百分比，参考的是自身宽度的百分比。</li><li><strong>translateY</strong>：设置垂直方向位移，需指定长度值；若指定的是百分比，参考的是自身高度的百分比。</li><li><strong>translate</strong>：一个值代表水平方向，两个值代表水平和垂直方向。</li></ul><blockquote><ol><li><p>位移与相对定位很相似，都不脱离文档流，也不影响到其他元素</p></li><li><p>与相对定位的区别： 相对定位的百分比值，参考的是父元素；位移的百分比值，参考的是自身</p></li><li><p>浏览器对位移有优化，与定位相比，浏览器处理位移效率更高</p></li><li><p><code>transform</code>可以链式编写，例如<code>transform: translateX(30px) translateY(40px);</code></p></li><li><p>位移对行内元素无效</p></li><li><p>位移配合定位实现元素水平垂直居中</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h3 id="2D缩放"><a href="#2D缩放" class="headerlink" title="2D缩放"></a>2D缩放</h3><p>2D缩放可以让元素放大或缩小，具体使用方式如下：</p><ol><li><p>先给元素添加 <code>transform</code> 属性 </p></li><li><p>可选值及其含义：</p><p><code>scaleX</code>： 水平方向的缩放比例，值为数字，1不变，小于1缩小，大于1放大</p><p><code>scaleY</code>： 垂直方向的缩放比例，同上</p><p><code>scale</code>： 水平垂直同时缩放</p></li></ol><h3 id="2D旋转"><a href="#2D旋转" class="headerlink" title="2D旋转"></a>2D旋转</h3><p>具体使用方式：</p><ol><li><p>添加属性<code>transform</code></p></li><li><p>可选值及其含义</p><p><code>rotate</code>: 设置旋转角度，需指定一个角度值（<code>deg</code>），正顺时针，负逆时针</p></li></ol><h3 id="多重变换"><a href="#多重变换" class="headerlink" title="多重变换"></a>多重变换</h3><p>实现多种变换，放到同一个<code>transform</code>里</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>) <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span><br></pre></td></tr></table></figure><blockquote><p>建议最后写旋转，因为旋转会导致坐标系的变化</p></blockquote><h3 id="变换原点"><a href="#变换原点" class="headerlink" title="变换原点"></a>变换原点</h3><ul><li>原点变换时，默认原点是元素的中心，使用<code>transform-origin</code>可以设置变换的原点</li><li>修改变换原点对位移没有影响，但对旋转和缩放会有影响</li><li>提供两个值，则第一个横坐标，第二个纵坐标</li></ul><blockquote><ol><li><p><code>transform-origin: 50% 50%</code>，变换原点在元素的中心位置，百分比是相对于自身的。—— 默认值</p></li><li><p><code>transform-origin: left top</code>，变换原点在元素的左上角。</p></li><li><p><code>transform-origin: 50px 50px</code>，变换原点距离元素左上角 50px。</p></li><li><p><code>transform-origin: 0</code>，只写一个值的时候，第二个值默认为 <code>50%</code> 的位置。</p></li></ol></blockquote><h2 id="3D变换"><a href="#3D变换" class="headerlink" title="3D变换"></a>3D变换</h2><h3 id="开启3D空间"><a href="#开启3D空间" class="headerlink" title="开启3D空间"></a>开启3D空间</h3><p>元素要进行3D变换，父元素必须开启3D空间</p><p>使用<code>transform-style</code>开启<code>3D</code>空间，可选值如下：</p><ul><li><code>flat</code>:2D</li><li><code>preserve-3d</code>：3D</li></ul><h3 id="设置景深"><a href="#设置景深" class="headerlink" title="设置景深"></a>设置景深</h3><p>景深–观察者与<code>z=0</code>平面的距离，有透视效果，更立体</p><p>使用<code>perspective</code>设置景深，可选值如下：</p><ul><li><code>none</code>:不指定透视——（默认值）</li><li><code>长度值</code>：指定观察者距离<code>z=0</code>平面的距离，不允许负值</li></ul><p>景深也是设置给3D变换元素的父元素</p><h3 id="透视点位置"><a href="#透视点位置" class="headerlink" title="透视点位置"></a>透视点位置</h3><p>（通常不改）所谓透视点位置，就是观察者的位置，默认透视点为元素中心</p><p>使用<code>perspective-origin</code>设置观察者位置</p><h3 id="3D位移"><a href="#3D位移" class="headerlink" title="3D位移"></a>3D位移</h3><p><code>3D</code>位移是在<code>2D</code>位移的基础上，让元素能够沿z轴位移，元素会离屏幕越来越近，越来越大</p><ol><li>属性<code>transform</code></li><li>值<ul><li><code>translateZ</code> 设置z轴位移，只能写像素，不能写%</li><li><code>translate3d</code>，3个参数对应x，y，z轴位移</li></ul></li></ol><h3 id="3D旋转"><a href="#3D旋转" class="headerlink" title="3D旋转"></a>3D旋转</h3><p><code>3D</code>旋转是在<code>2D</code>旋转的基础上，可以让元素沿<code>x</code>轴和<code>y</code>轴旋转，具体使用方式如下：</p><ol><li>属性<code>transform</code></li><li>值<ul><li><code>rotateX</code>:按x轴旋转，给定角度</li><li><code>rotateY</code>:按y轴旋转，给定角度</li><li><code>rotate3d</code>：前三个参数表示x，y，z，第四个表示旋转的角度</li></ul></li></ol><h3 id="3D缩放"><a href="#3D缩放" class="headerlink" title="3D缩放"></a>3D缩放</h3><p><code>3D</code>缩放是在<code>2D</code>缩放的基础上，可以让元素沿z轴缩放</p><ol><li>属性<code>transform</code></li><li>值 <ul><li><code>scaleZ</code>,其实是在改景深，1表示不缩放，大于1表示放大，即景深除该数字，小于1表示缩小,<code>scaleZ</code>一般不用</li><li><code>scale3d</code>，三个参数分别对应x，y，z，参数不能省略</li></ul></li></ol><h3 id="背部可见性"><a href="#背部可见性" class="headerlink" title="背部可见性"></a>背部可见性</h3><p>使用<code>backface-visibility</code>指定元素背面，在面向用户时是否可见，常用值如下</p><ul><li><code>visible</code>:指定元素背面可见</li><li><code>hidden</code>:指定元素背面不可见</li></ul><h2 id="过渡"><a href="#过渡" class="headerlink" title="过渡"></a>过渡</h2><h3 id="transition-property"><a href="#transition-property" class="headerlink" title="transition-property"></a>transition-property</h3><p>定义哪个属性需要过渡，例如宽、高、颜色</p><p>值：</p><ul><li><code>none</code>不过渡</li><li><code>all</code>过渡所有能过渡的</li><li>具体某个属性，用逗号分割</li></ul><h3 id="transition-duration"><a href="#transition-duration" class="headerlink" title="transition-duration"></a>transition-duration</h3><p>设置过渡的持续时间</p><p>单位<code>s</code>或<code>ms</code></p><h3 id="transition-delay"><a href="#transition-delay" class="headerlink" title="transition-delay"></a>transition-delay</h3><p>开始过渡的延迟时间</p><p>单位<code>s</code>或<code>ms</code></p><h3 id="transition-timing-function"><a href="#transition-timing-function" class="headerlink" title="transition-timing-function"></a>transition-timing-function</h3><p>设置过渡的类型</p><p>值：</p><ol><li><code>ease</code>:平滑过渡</li><li><code>linear</code>:线性过渡</li></ol><h3 id="transition复合属性"><a href="#transition复合属性" class="headerlink" title="transition复合属性"></a>transition复合属性</h3><p>如果设置了一个时间，则是<code>duration</code>,两个时间，则是<code>duration</code> <code>delay</code> 其他值无顺序要求</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transition</span>:<span class="number">1s</span> <span class="number">1s</span> linear all;</span><br></pre></td></tr></table></figure><h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><h3 id="动画的基本使用"><a href="#动画的基本使用" class="headerlink" title="动画的基本使用"></a>动画的基本使用</h3><ol><li><p>第一步 ：定义关键帧</p><p>简单方式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> 动画名 &#123;</span><br><span class="line">    <span class="selector-tag">from</span> &#123;</span><br><span class="line">        <span class="comment">/*property1:value1*/</span></span><br><span class="line"> <span class="comment">/*property2:value2*/</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">to</span> &#123;</span><br><span class="line">        <span class="comment">/*property1:value1*/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整定义方式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> 动画名 &#123;</span><br><span class="line">     <span class="number">0%</span> &#123;</span><br><span class="line">     <span class="comment">/*property1:value1*/</span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="number">20%</span> &#123;</span><br><span class="line">     <span class="comment">/*property1:value1*/</span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="number">40%</span> &#123;</span><br><span class="line">     <span class="comment">/*property1:value1*/</span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="number">60%</span> &#123;</span><br><span class="line">     <span class="comment">/*property1:value1*/</span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="number">80%</span> &#123;</span><br><span class="line">     <span class="comment">/*property1:value1*/</span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="number">100%</span> &#123;</span><br><span class="line">     <span class="comment">/*property1:value1*/</span></span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>给元素应用动画</p><ul><li><p><code>animation-name</code>:给定具体动画名</p></li><li><p><code>animation-duration</code>:动画所需时间</p></li><li><p><code>animation-delay</code>:动画延迟</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.<span class="property">box</span> &#123;</span><br><span class="line"><span class="comment">/* 指定动画 */</span></span><br><span class="line">     animation-<span class="attr">name</span>: testKey;</span><br><span class="line">     <span class="comment">/* 设置动画所需时间 */</span></span><br><span class="line">     animation-<span class="attr">duration</span>: 5s;</span><br><span class="line">     <span class="comment">/* 设置动画延迟 */</span></span><br><span class="line">     animation-<span class="attr">delay</span>: <span class="number">0.</span>5s; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="动画的其他属性"><a href="#动画的其他属性" class="headerlink" title="动画的其他属性"></a>动画的其他属性</h3><ul><li><p><code>animation-timing-function</code>,设置动画类型，常用值如<code>ease</code>,<code>linear</code></p></li><li><p><code>animation-iteration-count</code>指定动画播放次数，常用值如具体的数字或者无限循环<code>infinite</code></p></li><li><p><code>animation-direction</code>,指定动画的方向，常用值如下</p><blockquote><ol><li><code>normal</code>:正常方向（默认）</li><li><code>reverse</code>:反方向运行</li><li><code>alternate</code>:动画先正常运行再反方向运行，交替</li><li><code>alternate-reverse</code>:先反再正，交替</li></ol></blockquote></li><li><p><code>animation-fill-mode</code>，设置动画之外的状态</p><blockquote><ol><li><code>forwards</code>:保持在动画结束时</li><li><code>backwards</code>:保持在动画开始时</li></ol></blockquote></li><li><p><code>animation-play-state</code>，设置动画的播放状态，常用值如下</p><blockquote><ol><li><code>running</code>:运动</li><li><code>paused</code>: 暂停</li></ol></blockquote></li><li><p><code>animation</code>，复合属性，只设置一个时间则表示duration，两个时间则分别表示<code>duration</code>和<code>delay</code>，其他属性没有数量和顺序要求</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.inner</span> &#123;</span><br><span class="line">     <span class="attribute">animation</span>: atguigu <span class="number">3s</span> <span class="number">0.5s</span> linear <span class="number">2</span> alternate-reverse forwards;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="过渡和动画的区别"><a href="#过渡和动画的区别" class="headerlink" title="过渡和动画的区别"></a>过渡和动画的区别</h3><table><thead><tr><th>特性</th><th><strong>过渡（transition）</strong></th><th><strong>动画（animation）</strong></th></tr></thead><tbody><tr><td><strong>触发方式</strong></td><td>需要事件触发，例如 <code>hover</code></td><td>无需触发，可自动播放</td></tr><tr><td><strong>复杂度</strong></td><td>简单变化，只支持起点和终点</td><td>复杂变化，可设置多个关键帧</td></tr><tr><td><strong>循环性</strong></td><td>仅在状态切换时运行一次</td><td>支持循环播放</td></tr><tr><td><strong>定义方式</strong></td><td>基于 CSS 属性，直接定义</td><td>需结合 <code>@keyframes</code> 定义动画阶段</td></tr></tbody></table><h2 id="多列布局"><a href="#多列布局" class="headerlink" title="多列布局"></a>多列布局</h2><p>作用：专门用于实现类似报纸的布局，多列布局也可以用来放图片</p><ul><li><p><code>column-count</code>:指定列数</p></li><li><p><code>column-width</code>：指定列宽</p></li><li><p><code>columns</code>：同时指定列宽和列数</p></li><li><p><code>column-gap</code>：列边距</p></li><li><p><code>column-rule-style</code>：列的边框风格</p></li><li><p><code>column-rule-width</code>: 列的宽度</p></li><li><p><code>column-rule-color</code>: 列的颜色</p></li><li><p><code>column-rule</code>:列边框，复合属性</p></li><li><p><code>column-span</code>:是否跨列，<code>none</code>或者<code>all</code></p></li></ul><h2 id="伸缩盒模型"><a href="#伸缩盒模型" class="headerlink" title="伸缩盒模型"></a>伸缩盒模型</h2><h3 id="伸缩容器、伸缩项目"><a href="#伸缩容器、伸缩项目" class="headerlink" title="伸缩容器、伸缩项目"></a>伸缩容器、伸缩项目</h3><ul><li><p>伸缩容器： 开启了<code>flex</code>的元素，就是：伸缩容器</p><blockquote><p>给元素设置<code>flex</code>、<code>inline-flex</code>,该元素就变为了伸缩容器。</p></blockquote></li><li><p>伸缩项目：伸缩容器所有子元素自动成为 伸缩项目</p><blockquote><ol><li>仅伸缩容器的子元素是伸缩项目，其孙子元素及其他后代不是伸缩项目。</li><li>无论原来是哪种元素（块、行内块、行内），伸缩项目都会使其成为块元素</li></ol></blockquote></li></ul><h3 id="主轴与侧轴"><a href="#主轴与侧轴" class="headerlink" title="主轴与侧轴"></a>主轴与侧轴</h3><p><strong>主轴：</strong>伸缩项目沿主轴排列，默认是从左到右</p><p><strong>侧轴（交叉轴）</strong>：与主轴垂直的就是侧轴，默认从上到下</p><h3 id="主轴方向"><a href="#主轴方向" class="headerlink" title="主轴方向"></a>主轴方向</h3><p><strong>属性名</strong>：<code>flex-direction</code></p><p><strong>常用值</strong>：</p><ul><li><code>row</code> 从左到右（默认值）</li><li><code>row-reverse</code> 从右到左</li><li><code>column</code> 从上到下</li><li><code>column-reverse</code>从下到上</li></ul><p><img src="E:\BLOG\winter\source_posts\htmlcss\flex-direction.png" alt="flex-direction"></p><h3 id="主轴换行方式"><a href="#主轴换行方式" class="headerlink" title="主轴换行方式"></a>主轴换行方式</h3><p><strong>属性名</strong>：<code>flex-wrap</code></p><p><strong>常用值</strong>：</p><ul><li><p><code>nowrap</code>:默认值，不换行</p></li><li><p><code>wrap</code>:自动换行</p><p>123456</p><p>789</p></li><li><p><code>wrap-reverse</code></p><p>789</p><p>123456</p></li></ul><h3 id="flex-flow"><a href="#flex-flow" class="headerlink" title="flex-flow"></a>flex-flow</h3><p>复合属性，复合了<code>flex-direction</code>和<code>flex-wrap</code>，值没有顺序要求</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">flex-flow</span>:row wrap;</span><br></pre></td></tr></table></figure><h3 id="主轴对齐方式"><a href="#主轴对齐方式" class="headerlink" title="主轴对齐方式"></a>主轴对齐方式</h3><p><strong>属性名：</strong><code>justify-content</code></p><p><strong>常用值：</strong></p><ul><li><code>flex-start</code>:主轴起点对齐。（默认值）</li><li><code>flex-end</code>：主轴终点对齐。</li><li><code>center</code>:居中对齐。</li><li><code>space-between</code>:均匀分布，两端对齐，与边框没有距离，元素距离相等</li><li><code>space-around</code>: 元素与元素之间的距离是元素与边框距离两倍</li><li><code>space-evenly</code>:元素与元素之间的距离与元素与边框距离相等</li></ul><p><img src="E:\BLOG\winter\source_posts\htmlcss\justify-content-1731836564815-2.png"></p><h3 id="侧轴对齐方式"><a href="#侧轴对齐方式" class="headerlink" title="侧轴对齐方式"></a>侧轴对齐方式</h3><p><strong>一行的情况</strong></p><p><strong>属性名：</strong><code>align-items</code></p><p><strong>常用值：</strong></p><ol><li><code>flex-start</code>:侧轴的起点对齐</li><li><code>flex-end</code>:侧轴的终点对齐</li><li><code>center</code>:侧轴的中点对齐</li><li><code>baseline</code>：第一行文字的基线对齐</li><li><code>stretch</code>:未设置高度时，占满整个容器</li></ol><p><img src="E:\BLOG\winter\source_posts\htmlcss\align-items.png" alt="align-items"></p><p><strong>多行的情况</strong></p><p><strong>属性名：</strong><code>align-content</code></p><p><strong>常用值:</strong></p><ol><li><code>flex-start</code></li><li><code>flex-end</code></li><li><code>center</code></li><li><code>space-between</code></li><li><code>space-around</code></li><li><code>space-evenly</code></li><li><code>stretch</code></li></ol><h3 id="flex实现水平垂直居中"><a href="#flex实现水平垂直居中" class="headerlink" title="flex实现水平垂直居中"></a>flex实现水平垂直居中</h3><p>方法一：父容器开启<code>flex</code>布局，使用<code>justify-content</code>和<code>align-items</code>实现水平垂直居中</p><p>方法二：父容器开启<code>flex</code>布局，随后子元素 <code>margin:auto</code></p><h3 id="伸缩性"><a href="#伸缩性" class="headerlink" title="伸缩性"></a>伸缩性</h3><ol><li><p><code>flex-basis</code></p><p>主轴的基准长度，会让元素的宽度或高度失效</p><blockquote><p>主轴横向，宽度失效，主轴纵向，高度失效</p></blockquote><p>默认值<code>auto</code></p></li><li><p><code>flex-grow</code></p><p>定义伸缩项目的放大比例，默认是<code>0</code>，即：主轴存在剩余空间也不放大</p><p><strong>规则</strong></p><ol><li>若所有伸缩项目的  flex-grow 值都为1，则：它们将等分剩余空间（如果有空间的话）。</li><li>若三个伸缩项目的 flex-grow 值分别为：1、2、3，则：分别瓜分到： 1&#x2F;6 、 2&#x2F;6、3&#x2F;6 的空间。</li></ol></li><li><p><code>flex-shrink</code></p><p>定义伸缩项目的缩小比例，默认为1，空间不足将会缩小</p><p>收缩后项目的比例为 <code>宽度 * flex-shrink值</code></p></li></ol><h3 id="flex复合属性"><a href="#flex复合属性" class="headerlink" title="flex复合属性"></a>flex复合属性</h3><p><code>flex</code>是复合属性，复合了：<code>flex-grow</code>、<code>flex-shrink</code>、<code>flex-basis</code>三个属性，默认为<code>0 1 auto</code></p><ul><li>如果写<code>flex: 1</code>,实际上是<code>flex:1 1 0</code>即可以放大、可以缩小、同时宽度（默认）平分容器</li><li><code>flex:auto</code>，实际上是<code>flex:1 1 auto</code>即可以放大、缩小、同时宽度为设置的值</li><li><code>flex: none</code>,实际上是<code>flex:0 0 auto</code>，不可放大缩小，按设置的宽度来</li><li><code>flex: 0 auto</code>，实际上是<code>flex0 1 auto </code>即初始值</li></ul><h3 id="项目排序"><a href="#项目排序" class="headerlink" title="项目排序"></a>项目排序</h3><p><code>order</code>属性定义项目的排列顺序。数值越小，排列越靠前，默认为<code>0</code></p><h3 id="单独对齐"><a href="#单独对齐" class="headerlink" title="单独对齐"></a>单独对齐</h3><p>通过<code>align-self</code>属性，可以单独调整某个伸缩项目的对齐方式（只能调侧轴）</p><p>默认值为<code>auto</code>，表示继承父元素的<code>align-items</code>属性。</p><h2 id="响应式布局"><a href="#响应式布局" class="headerlink" title="响应式布局"></a>响应式布局</h2><h3 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h3><p><strong>查媒体类型</strong>（分辨正常屏幕和打印机）</p><ul><li><code>all</code> 检测所有设备</li><li><code>screen</code> 检测屏幕</li><li><code>print</code>检测打印机</li></ul><p><strong>媒体特性</strong></p><p><code>width</code>视口宽度</p><p><code>min-width</code>视口最小宽度</p><p><code>max-width</code>视口最大宽度</p><p><code>height</code>视口高度</p><p><code>min-height</code>视口最小高度</p><p><code>max-height</code>视口最大高度</p><p><code>device-width</code>设备宽度</p><p><code>max-device-width</code>设备最大宽度</p><p><code>min-device-width</code>设备最小宽度</p><p><code>orientation</code>检测视口的旋转方向</p><p>​<code>portrait</code>纵向 <code>landscape</code>横向</p><blockquote><p>媒体查询的样式放在其他样式后面，以免被覆盖</p></blockquote><p><strong>运算符</strong></p><p><code>and</code> 且</p><p><code>,</code>或<code>or</code> 或</p><p><code>not</code>非</p><p><code>only</code> 肯定</p><p><strong>实际开发中的阈值</strong></p><p>768 992 1200 </p><p><strong>用法</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">media</span>=<span class="string">&quot;具体的媒体查询&quot;</span> <span class="attr">href</span>=<span class="string">&quot;mystylesheet.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>:<span class="number">768px</span>) &#123;</span><br><span class="line"> <span class="comment">/*CSS-Code;*/</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>:<span class="number">768px</span>) <span class="keyword">and</span> (<span class="attribute">max-width</span>:<span class="number">1200px</span>) &#123;</span><br><span class="line"> <span class="comment">/*CSS-Code;*/</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="BFC"><a href="#BFC" class="headerlink" title="BFC"></a>BFC</h2><p><code>BFC</code>是<code>Block Formatting Context</code>(块级格式上下文)，元素的一个独特功能，平时关闭，特定情况下激活，激活能够解决一定问题</p><p><strong>能解决什么问题</strong>？</p><ol><li>元素开启<code>BFC</code>后，其子元素不会再产生<code>margin</code>塌陷问题</li><li>元素开启<code>BFC</code>后，自己不会被其他浮动元素所覆盖</li><li>元素开启<code>BFC</code>后，子元素浮动，自身高度也不会塌陷</li></ol><p><strong>如何开启BFC</strong></p><ul><li>根元素<code>html</code></li><li>浮动元素</li><li>绝对定位、固定定位的元素</li><li>行内块元素</li><li>表格单元格<code>table</code>等元素</li><li><code>overflow</code>值不为<code>visible</code></li><li>flex</li><li>多列容器</li><li><code>column-span</code>为<code>all</code></li><li><code>display</code>的值为<code>flow-root</code></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> html css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript</title>
      <link href="/2024/08/06/javascript/"/>
      <url>/2024/08/06/javascript/</url>
      
        <content type="html"><![CDATA[<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h4 id="for-…-in-…"><a href="#for-…-in-…" class="headerlink" title="for … in …"></a>for … in …</h4><p>遍历数组中的<strong>键</strong></p><h4 id="for-…-of-…"><a href="#for-…-of-…" class="headerlink" title="for … of …"></a>for … of …</h4><p>遍历数组中的值，或者字符串中的字符</p><h4 id="map"><a href="#map" class="headerlink" title="map"></a>map</h4><p><code>map</code> 方法会对数组中的每个元素执行一次提供的函数，并将结果放入一个新数组中。</p><p><strong>用法</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.<span class="title function_">map</span>(<span class="title function_">callback</span>(currentValue[, index[, array]])[, thisArg])</span><br></pre></td></tr></table></figure><p><strong>参数说明：</strong></p><ul><li><code>callback</code>: 生成新数组元素的函数，依次为每个元素执行，接收以下三个参数：<ul><li><code>currentValue</code>: 当前处理的元素。</li><li><code>index</code>（可选）: 当前处理元素的索引。</li><li><code>array</code>（可选）: 调用 <code>map</code> 方法的数组本身。</li></ul></li><li><code>thisArg</code>（可选）: 执行 <code>callback</code> 时的 <code>this</code> 值。</li></ul><p><strong>返回值：</strong></p><ul><li>一个新数组，每个元素都是回调函数的返回值。</li></ul><p><strong>示例</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> doubled = numbers.<span class="title function_">map</span>(<span class="function"><span class="params">number</span> =&gt;</span> number * <span class="number">2</span>);</span><br></pre></td></tr></table></figure><h4 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h4><p>用于将数组中的所有元素通过一个累加函数合并成单一的值。</p><p>它常用于求和、计算平均值、数组扁平化等操作。</p><p><strong>用法</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.<span class="title function_">reduce</span>(<span class="title function_">callback</span>(accumulator, currentValue[, index[, array]])[, initialValue])</span><br></pre></td></tr></table></figure><p><strong>参数说明：</strong></p><ul><li><code>callback</code>: 在数组每个元素上执行的函数，接受四个参数：<ul><li><code>accumulator</code>: 累计器，累加回调函数的返回值；它是上一次调用回调函数时返回的值，或者是提供的初始值（<code>initialValue</code>）。</li><li><code>currentValue</code>: 数组中正在处理的元素。</li><li><code>index</code>（可选）: 数组中正在处理的当前元素的索引。若提供 <code>initialValue</code>，则索引号为 0；否则为 1。</li><li><code>array</code>（可选）: 调用 <code>reduce</code> 的数组。</li></ul></li><li><code>initialValue</code>（可选）: 作为第一次调用回调函数时 <code>accumulator</code> 的值。如果未提供，则将数组的第一个元素作为初始值，并从第二个元素开始执行回调函数。</li></ul><p><strong>返回值：</strong></p><ul><li>函数累计处理的结果。</li></ul><p><strong>示例代码</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sum = numbers.<span class="title function_">reduce</span>(<span class="function">(<span class="params">accumulator, currentValue</span>) =&gt;</span> accumulator + currentValue, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><h4 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h4><p>与 <code>map</code> 不同的是，<code>forEach</code> 不会返回一个新数组，而只是执行提供的函数，并对原数组进行操作。</p><p><strong>用法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.forEach(callback(currentValue[, index[, array]])[, thisArg])</span><br></pre></td></tr></table></figure><p><strong>参数说明：</strong></p><ul><li><code>callback</code>: 对每个元素执行的函数，接受三个参数：<ul><li><code>currentValue</code>: 当前正在处理的元素。</li><li><code>index</code>（可选）: 当前元素的索引。</li><li><code>array</code>（可选）: 调用 <code>forEach</code> 的数组。</li></ul></li><li><code>thisArg</code>（可选）: 执行 <code>callback</code> 时的 <code>this</code> 值。</li></ul><p><strong>示例代码</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">numbers.<span class="title function_">forEach</span>(<span class="function">(<span class="params">number, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">  array[index] = number * <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="includes"><a href="#includes" class="headerlink" title="includes"></a>includes</h4><p><code>includes</code> 是 JavaScript 数组和字符串的方法，用于判断数组或字符串中是否包含特定的元素或子字符串。它返回一个布尔值。</p><p><strong>语法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.includes(searchElement, fromIndex)</span><br></pre></td></tr></table></figure><p><strong>参数说明</strong></p><ul><li><code>searchElement</code>: 需要在数组中搜索的元素。</li><li><code>fromIndex</code>（可选）: 从该索引处开始搜索 <code>searchElement</code>。如果省略，则从数组的开头开始搜索。</li></ul><p><strong>示例</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fruits = [<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;mango&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits.<span class="title function_">includes</span>(<span class="string">&#x27;banana&#x27;</span>)); <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits.<span class="title function_">includes</span>(<span class="string">&#x27;grape&#x27;</span>));  <span class="comment">// 输出: false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits.<span class="title function_">includes</span>(<span class="string">&#x27;apple&#x27;</span>, <span class="number">1</span>)); <span class="comment">// 输出: false</span></span><br></pre></td></tr></table></figure><h4 id="unshift"><a href="#unshift" class="headerlink" title="unshift"></a>unshift</h4><p><code>unshift()</code> 方法用于将一个或多个元素添加到数组的开头，并返回新数组的长度。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">arr.<span class="title function_">unshift</span>(<span class="number">0</span>); <span class="comment">// 添加一个元素</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// 输出: [0, 1, 2, 3]</span></span><br><span class="line"></span><br><span class="line">arr.<span class="title function_">unshift</span>(-<span class="number">2</span>, -<span class="number">1</span>); <span class="comment">// 添加多个元素</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// 输出: [-2, -1, 0, 1, 2, 3]</span></span><br></pre></td></tr></table></figure><h4 id="push"><a href="#push" class="headerlink" title="push"></a>push</h4><p><code>push()</code> 方法用于将一个或多个元素添加到数组的末尾，并返回新数组的长度。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">arr.<span class="title function_">push</span>(<span class="number">4</span>); <span class="comment">// 添加一个元素</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// 输出: [1, 2, 3, 4]</span></span><br><span class="line"></span><br><span class="line">arr.<span class="title function_">push</span>(<span class="number">5</span>, <span class="number">6</span>); <span class="comment">// 添加多个元素</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// 输出: [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure><h4 id="js数组初始化"><a href="#js数组初始化" class="headerlink" title="js数组初始化"></a>js数组初始化</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获得一个128长度 每个元素都为数字 0 的数组</span></span><br><span class="line"><span class="keyword">let</span> nums = <span class="title class_">Array</span>(<span class="number">128</span>).<span class="title function_">fill</span>(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h4 id="splice"><a href="#splice" class="headerlink" title="splice"></a>splice</h4><h4 id="Array-from"><a href="#Array-from" class="headerlink" title="Array.from()"></a>Array.from()</h4><ol><li>将类数组对象或可迭代对象转换为数组。</li><li>可选地使用映射函数处理每个元素。</li><li>可以方便地处理各种对象为数组的转换，非常灵活。</li></ol><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p>在 JavaScript 中，<code>Map</code> 是一种键值对的数据结构，类似于对象，但有一些不同之处。<code>Map</code> 的键可以是任意类型（包括对象、函数等），而对象的键只能是字符串或符号。<code>Map</code> 提供了一些非常有用的方法和操作，常见操作如下：</p><h4 id="创建-Map"><a href="#创建-Map" class="headerlink" title="创建 Map"></a>创建 <code>Map</code></h4><p>创建一个新的空 <code>Map</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br></pre></td></tr></table></figure><p>也可以在创建时初始化 <code>Map</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>([</span><br><span class="line">  [<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;Alice&#x27;</span>],</span><br><span class="line">  [<span class="string">&#x27;age&#x27;</span>, <span class="number">25</span>],</span><br><span class="line">  [<span class="literal">true</span>, <span class="string">&#x27;booleanKey&#x27;</span>]</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><h4 id="设置键值对-set"><a href="#设置键值对-set" class="headerlink" title="设置键值对 (set)"></a>设置键值对 (<code>set</code>)</h4><p>使用 <code>set()</code> 方法向 <code>Map</code> 中添加键值对。<code>set()</code> 方法会返回 <code>Map</code> 本身，因此可以进行链式调用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;Alice&#x27;</span>);</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;age&#x27;</span>, <span class="number">25</span>);</span><br><span class="line">map.<span class="title function_">set</span>(<span class="literal">true</span>, <span class="string">&#x27;booleanKey&#x27;</span>);</span><br></pre></td></tr></table></figure><p>链式调用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;city&#x27;</span>, <span class="string">&#x27;New York&#x27;</span>).<span class="title function_">set</span>(<span class="string">&#x27;country&#x27;</span>, <span class="string">&#x27;USA&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="获取值-get"><a href="#获取值-get" class="headerlink" title="获取值 (get)"></a>获取值 (<code>get</code>)</h4><p>使用 <code>get()</code> 方法通过键获取对应的值。如果键不存在，则返回 <code>undefined</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">get</span>(<span class="string">&#x27;name&#x27;</span>)); <span class="comment">// 输出 &#x27;Alice&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">get</span>(<span class="string">&#x27;age&#x27;</span>));  <span class="comment">// 输出 25</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">get</span>(<span class="string">&#x27;nonExistentKey&#x27;</span>)); <span class="comment">// 输出 undefined</span></span><br></pre></td></tr></table></figure><h4 id="检查是否存在键-has"><a href="#检查是否存在键-has" class="headerlink" title="检查是否存在键 (has)"></a>检查是否存在键 (<code>has</code>)</h4><p>使用 <code>has()</code> 方法检查 <code>Map</code> 中是否存在某个键。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">has</span>(<span class="string">&#x27;name&#x27;</span>));  <span class="comment">// 输出 true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">has</span>(<span class="string">&#x27;address&#x27;</span>)); <span class="comment">// 输出 false</span></span><br></pre></td></tr></table></figure><h4 id="删除键值对-delete"><a href="#删除键值对-delete" class="headerlink" title="删除键值对 (delete)"></a>删除键值对 (<code>delete</code>)</h4><p>使用 <code>delete()</code> 方法可以通过键删除一个键值对。如果删除成功，返回 <code>true</code>，否则返回 <code>false</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">map.<span class="title function_">delete</span>(<span class="string">&#x27;age&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">has</span>(<span class="string">&#x27;age&#x27;</span>));  <span class="comment">// 输出 false</span></span><br></pre></td></tr></table></figure><h4 id="清空-Map-clear"><a href="#清空-Map-clear" class="headerlink" title="清空 Map (clear)"></a>清空 <code>Map</code> (<code>clear</code>)</h4><p>使用 <code>clear()</code> 方法删除 <code>Map</code> 中所有的键值对。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">map.<span class="title function_">clear</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="property">size</span>);  <span class="comment">// 输出 0</span></span><br></pre></td></tr></table></figure><h4 id="获取键值对的数量-size"><a href="#获取键值对的数量-size" class="headerlink" title="获取键值对的数量 (size)"></a>获取键值对的数量 (<code>size</code>)</h4><p>使用 <code>size</code> 属性获取 <code>Map</code> 中的键值对数量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>([</span><br><span class="line">  [<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;Alice&#x27;</span>],</span><br><span class="line">  [<span class="string">&#x27;age&#x27;</span>, <span class="number">25</span>]</span><br><span class="line">]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="property">size</span>);  <span class="comment">// 输出 2</span></span><br></pre></td></tr></table></figure><h4 id="遍历-Map-forEach"><a href="#遍历-Map-forEach" class="headerlink" title="遍历 Map (forEach)"></a>遍历 <code>Map</code> (<code>forEach</code>)</h4><p>使用 <code>forEach()</code> 方法可以遍历 <code>Map</code>，对每个键值对执行回调函数。回调函数接收两个参数：值和键。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">map.<span class="title function_">forEach</span>(<span class="function">(<span class="params">value, key</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;key&#125;</span>: <span class="subst">$&#123;value&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 输出:a</span></span><br><span class="line"><span class="comment">// name: Alice</span></span><br><span class="line"><span class="comment">// age: 25</span></span><br></pre></td></tr></table></figure><h4 id="获取键-keys"><a href="#获取键-keys" class="headerlink" title="获取键 (keys)"></a>获取键 (<code>keys</code>)</h4><p>使用 <code>keys()</code> 方法返回一个 <code>Map</code> 对象键的迭代器。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">of</span> map.<span class="title function_">keys</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出:</span></span><br><span class="line"><span class="comment">// name</span></span><br><span class="line"><span class="comment">// age</span></span><br></pre></td></tr></table></figure><h4 id="获取值-values"><a href="#获取值-values" class="headerlink" title="获取值 (values)"></a>获取值 (<code>values</code>)</h4><p>使用 <code>values()</code> 方法返回一个 <code>Map</code> 对象值的迭代器。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">for (const value of map.values()) &#123;</span><br><span class="line">  console.log(value);</span><br><span class="line">&#125;</span><br><span class="line">// 输出:</span><br><span class="line">// Alice</span><br><span class="line">// 25</span><br></pre></td></tr></table></figure><h4 id="获取键值对-entries"><a href="#获取键值对-entries" class="headerlink" title="获取键值对 (entries)"></a>获取键值对 (<code>entries</code>)</h4><p>使用 <code>entries()</code> 方法返回一个包含键值对的迭代器。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> [key, value] <span class="keyword">of</span> map.<span class="title function_">entries</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;key&#125;</span>: <span class="subst">$&#123;value&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出:</span></span><br><span class="line"><span class="comment">// name: Alice</span></span><br><span class="line"><span class="comment">// age: 25</span></span><br></pre></td></tr></table></figure><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><p>在 JavaScript 中，<code>Set</code> 是一种数据结构，它类似于数组，但 <code>Set</code> 中的每个值必须是唯一的。<code>Set</code> 提供了多种操作来管理和操作其元素。</p><h4 id="创建set"><a href="#创建set" class="headerlink" title="创建set"></a>创建<code>set</code></h4><p>可以用<code>new set()</code>创建一个新<code>set</code>，或者使用数组等可迭代对象来初始化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> set1 = <span class="keyword">new</span> <span class="title class_">Set</span>(); <span class="comment">// 创建一个空的 Set</span></span><br><span class="line"><span class="keyword">const</span> set2 = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]); <span class="comment">// 使用数组初始化 Set</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set2); <span class="comment">// 输出: Set &#123; 1, 2, 3, 4, 5 &#125;</span></span><br></pre></td></tr></table></figure><h4 id="添加元素-add"><a href="#添加元素-add" class="headerlink" title="添加元素 (add)"></a>添加元素 (<code>add</code>)</h4><p><code>add()</code> 方法用于向 <code>Set</code> 中添加新元素。如果元素已经存在，则不会添加重复的值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mySet = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">mySet.<span class="title function_">add</span>(<span class="number">1</span>);</span><br><span class="line">mySet.<span class="title function_">add</span>(<span class="number">5</span>);</span><br><span class="line">mySet.<span class="title function_">add</span>(<span class="number">1</span>); <span class="comment">// 不会添加重复的 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mySet); <span class="comment">// 输出: Set &#123; 1, 5 &#125;</span></span><br></pre></td></tr></table></figure><h4 id="删除元素-delete"><a href="#删除元素-delete" class="headerlink" title="删除元素 (delete)"></a>删除元素 (<code>delete</code>)</h4><p><code>delete()</code> 方法用于从 <code>Set</code> 中删除指定的元素。如果删除成功，返回 <code>true</code>；否则返回 <code>false</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mySet = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line">mySet.<span class="title function_">delete</span>(<span class="number">2</span>); <span class="comment">// 删除值为 2 的元素</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mySet); <span class="comment">// 输出: Set &#123; 1, 3 &#125;</span></span><br></pre></td></tr></table></figure><h4 id="检查元素是否存在-has"><a href="#检查元素是否存在-has" class="headerlink" title="检查元素是否存在(has)"></a>检查元素是否存在(<code>has</code>)</h4><p><code>has()</code> 方法用于检查 <code>Set</code> 中是否存在某个元素，返回布尔值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const mySet = new Set([1, 2, 3]);</span><br><span class="line">console.log(mySet.has(2)); // 输出: true</span><br><span class="line">console.log(mySet.has(4)); // 输出: false</span><br></pre></td></tr></table></figure><h4 id="获取元素个数-size"><a href="#获取元素个数-size" class="headerlink" title="获取元素个数(size)"></a>获取元素个数(<code>size</code>)</h4><p><code>size</code> 属性返回 <code>Set</code> 中元素的个数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mySet = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mySet.<span class="property">size</span>); <span class="comment">// 输出: 4</span></span><br></pre></td></tr></table></figure><h4 id="清空Set-clear"><a href="#清空Set-clear" class="headerlink" title="清空Set (clear)"></a>清空Set (<code>clear</code>)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mySet = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line">mySet.<span class="title function_">clear</span>(); <span class="comment">// 清空 Set</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mySet); <span class="comment">// 输出: Set &#123;&#125;</span></span><br></pre></td></tr></table></figure><h4 id="遍历-Set-forEach-for-of"><a href="#遍历-Set-forEach-for-of" class="headerlink" title="遍历 Set (forEach, for...of)"></a>遍历 Set (<code>forEach</code>, <code>for...of</code>)</h4><p>可以使用 <code>forEach()</code> 或 <code>for...of</code> 循环遍历 <code>Set</code> 中的每个元素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mySet = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line">mySet.<span class="title function_">forEach</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mySet = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> mySet) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出:</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h4 id="转换为数组-Array-from-或-展开运算符"><a href="#转换为数组-Array-from-或-展开运算符" class="headerlink" title="转换为数组 (Array.from 或 展开运算符 ...)"></a>转换为数组 (<code>Array.from</code> 或 展开运算符 <code>...</code>)</h4><p>可以将 <code>Set</code> 转换为数组。</p><ul><li><strong>使用 <code>Array.from()</code>：</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mySet = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="keyword">const</span> arr = <span class="title class_">Array</span>.<span class="title function_">from</span>(mySet);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// 输出: [1, 2, 3]</span></span><br></pre></td></tr></table></figure><ul><li><strong>使用展开运算符 <code>...</code>：</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mySet = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="keyword">const</span> arr = [...mySet];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// 输出: [1, 2, 3]</span></span><br></pre></td></tr></table></figure><h4 id="set的迭代方法"><a href="#set的迭代方法" class="headerlink" title="set的迭代方法"></a>set的迭代方法</h4><p><code>Set</code> 支持多种迭代方法，可以获取键、值、键值对（键和值是一样的）。</p><ul><li><strong><code>keys()</code></strong>: 返回 <code>Set</code> 对象中的键的迭代器（与 <code>values()</code> 相同，<code>Set</code> 中的键和值是一样的）。</li><li><strong><code>values()</code></strong>: 返回 <code>Set</code> 对象中的值的迭代器。</li><li><strong><code>entries()</code></strong>: 返回 <code>Set</code> 对象中每个元素的键值对的迭代器。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mySet = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([...mySet.<span class="title function_">keys</span>()]);   <span class="comment">// 输出: [1, 2, 3]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([...mySet.<span class="title function_">values</span>()]); <span class="comment">// 输出: [1, 2, 3]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([...mySet.<span class="title function_">entries</span>()]); <span class="comment">// 输出: [[1, 1], [2, 2], [3, 3]]</span></span><br></pre></td></tr></table></figure><h2 id="优先队列"><a href="#优先队列" class="headerlink" title="优先队列"></a>优先队列</h2><h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h4 id="substring"><a href="#substring" class="headerlink" title="substring"></a>substring</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 提取从索引 0 到 5 之间的字符（不包含索引 5）</span></span><br><span class="line"><span class="keyword">let</span> result1 = str.<span class="title function_">substring</span>(<span class="number">0</span>, <span class="number">5</span>); </span><br></pre></td></tr></table></figure><h4 id="charCodeAt"><a href="#charCodeAt" class="headerlink" title="charCodeAt"></a>charCodeAt</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;ab&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回&#x27;a&#x27;的unicode编码</span></span><br><span class="line">str.<span class="title function_">charCodeAt</span>(<span class="number">0</span>)</span><br><span class="line"><span class="comment">// 返回&#x27;b&#x27;的unicode编码</span></span><br><span class="line">str.<span class="title function_">charCodeAt</span>(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//ascii编码和unicode前128个编码是一样的</span></span><br></pre></td></tr></table></figure><h4 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h4><p><code>replace</code> 是 JavaScript 中用于字符串的一个方法，用来替换字符串中的指定子字符串。它返回一个新的字符串，其中的某些模式被替换为指定的替换值。<code>replace</code> 方法不会改变原始字符串。</p><p><strong>基本用法</strong></p><ol><li>用字符串作为 <code>searchValue</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;Hello, world!&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> newStr = str.<span class="title function_">replace</span>(<span class="string">&#x27;world&#x27;</span>, <span class="string">&#x27;JavaScript&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newStr); <span class="comment">// 输出: Hello, JavaScript!</span></span><br></pre></td></tr></table></figure><ol start="2"><li>用正则表达式作为 <code>searchValue</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;Hello, world!&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> newStr = str.<span class="title function_">replace</span>(<span class="regexp">/world/</span>, <span class="string">&#x27;JavaScript&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newStr); <span class="comment">// 输出: Hello, JavaScript!</span></span><br></pre></td></tr></table></figure><ol start="3"><li>全局替换</li></ol><p>默认情况下，<code>replace</code> 方法只替换第一个匹配项。如果要替换所有匹配项，需要使用正则表达式的全局标志 <code>g</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;Hello, world! Hello, everyone!&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> newStr = str.<span class="title function_">replace</span>(<span class="regexp">/Hello/g</span>, <span class="string">&#x27;Hi&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newStr); <span class="comment">// 输出: Hi, world! Hi, everyone</span></span><br></pre></td></tr></table></figure><h2 id="栈与队列"><a href="#栈与队列" class="headerlink" title="栈与队列"></a>栈与队列</h2><p>js中，用数组来模拟栈和队列</p><h4 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h4><p>在js中可以用数组的push()和pop()方法来实现栈的行为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stack  = []</span><br><span class="line">stack.<span class="title function_">push</span>(<span class="number">1</span>) <span class="comment">//[1]</span></span><br><span class="line">stack.<span class="title function_">push</span>(<span class="number">2</span>) <span class="comment">//[1, 2]</span></span><br><span class="line">stack.<span class="title function_">push</span>(<span class="number">3</span>) <span class="comment">//[1, 2, 3]</span></span><br><span class="line">stack.<span class="title function_">pop</span>() <span class="comment">//[1, 2]</span></span><br><span class="line"><span class="keyword">let</span> x = stack.<span class="title function_">pop</span>() <span class="comment">//[1] ,x = 2</span></span><br></pre></td></tr></table></figure><h4 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h4><p>在js中可以用<code>push()</code> 和 <code>shift()</code>方法来模拟队列的行为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> queue = []</span><br><span class="line">queue.<span class="title function_">push</span>(<span class="number">1</span>) <span class="comment">//[1]</span></span><br><span class="line">queue.<span class="title function_">push</span>(<span class="number">2</span>) <span class="comment">//[1, 2]</span></span><br><span class="line">queue.<span class="title function_">push</span>(<span class="number">3</span>) <span class="comment">//[1, 2, 3]</span></span><br><span class="line">queue.<span class="title function_">shift</span>() <span class="comment">// [2, 3]</span></span><br><span class="line"><span class="keyword">let</span> x = queue.<span class="title function_">shift</span>() <span class="comment">//[3] x = 2</span></span><br></pre></td></tr></table></figure><h2 id="取整"><a href="#取整" class="headerlink" title="取整"></a>取整</h2><h4 id="1-Math-floor"><a href="#1-Math-floor" class="headerlink" title="1. Math.floor()"></a>1. <code>Math.floor()</code></h4><p><code>Math.floor()</code> 方法会向下取整，即返回小于或等于给定数字的最大整数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="number">4.7</span>)); <span class="comment">// 输出: 4</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">floor</span>(-<span class="number">4.7</span>)); <span class="comment">// 输出: -5</span></span><br></pre></td></tr></table></figure><h4 id="2-Math-ceil"><a href="#2-Math-ceil" class="headerlink" title="2. Math.ceil()"></a>2. <code>Math.ceil()</code></h4><p><code>Math.ceil()</code> 方法会向上取整，即返回大于或等于给定数字的最小整数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">ceil</span>(<span class="number">4.1</span>)); <span class="comment">// 输出: 5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">ceil</span>(-<span class="number">4.1</span>)); <span class="comment">// 输出: -4</span></span><br></pre></td></tr></table></figure><h4 id="3-Math-round"><a href="#3-Math-round" class="headerlink" title="3. Math.round()"></a>3. <code>Math.round()</code></h4><p><code>Math.round()</code> 方法会四舍五入，即返回四舍五入后的整数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="number">4.5</span>)); <span class="comment">// 输出: 5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="number">4.4</span>)); <span class="comment">// 输出: 4</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">round</span>(-<span class="number">4.5</span>)); <span class="comment">// 输出: -4</span></span><br></pre></td></tr></table></figure><h4 id="4-Math-trunc"><a href="#4-Math-trunc" class="headerlink" title="4. Math.trunc()"></a>4. <code>Math.trunc()</code></h4><p>向零截断</p><p><code>Math.trunc()</code> 方法会直接去掉小数部分，即返回数字的整数部分。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">trunc</span>(<span class="number">4.9</span>)); <span class="comment">// 输出: 4</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">trunc</span>(-<span class="number">4.9</span>)); <span class="comment">// 输出: -4</span></span><br></pre></td></tr></table></figure><h4 id="5-按位取整"><a href="#5-按位取整" class="headerlink" title="5. 按位取整"></a>5. 按位取整</h4><p>按位取整通过使用按位运算符来进行取整。它会去掉数字的小数部分，类似于 <code>Math.trunc()</code> 的效果，但只适用于32位有符号整数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4.7</span> | <span class="number">0</span>); <span class="comment">// 输出: 4</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(-<span class="number">4.7</span> | <span class="number">0</span>); <span class="comment">// 输出: -4</span></span><br></pre></td></tr></table></figure><h4 id="6-parseInt"><a href="#6-parseInt" class="headerlink" title="6. parseInt()"></a>6. <code>parseInt()</code></h4><p><code>parseInt()</code> 函数会将字符串解析为整数，但它也可以用于取整小数。</p><h2 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="扩展运算符 ..."></a>扩展运算符 <code>...</code></h2><h2 id="绝对值"><a href="#绝对值" class="headerlink" title="绝对值"></a>绝对值</h2><h4 id="Math-abs"><a href="#Math-abs" class="headerlink" title="Math.abs"></a><code>Math.abs</code></h4><h2 id="数字判断"><a href="#数字判断" class="headerlink" title="数字判断"></a>数字判断</h2><h4 id="isNaN"><a href="#isNaN" class="headerlink" title="isNaN"></a><code>isNaN</code></h4><p><code>isNaN()</code> 是一个用于判断某个值是否是 <code>NaN</code> 的函数。</p><p>它的工作机制是：首先会尝试将传入的值转换为数值，然后检测转换后的结果是否为 <code>NaN</code>。如果是 <code>NaN</code>，则返回 <code>true</code>，否则返回 <code>false</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">isNaN</span>(<span class="string">&#x27;abc&#x27;</span>);    <span class="comment">// 返回 true，因为 &#x27;abc&#x27; 不能转换为数字</span></span><br><span class="line"><span class="built_in">isNaN</span>(<span class="number">123</span>);      <span class="comment">// 返回 false，因为 123 是有效的数字</span></span><br><span class="line"><span class="built_in">isNaN</span>(<span class="title class_">NaN</span>);      <span class="comment">// 返回 true</span></span><br><span class="line"><span class="built_in">isNaN</span>(<span class="literal">true</span>);     <span class="comment">// 返回 false，true 会被转换为 1</span></span><br></pre></td></tr></table></figure><h4 id="Number"><a href="#Number" class="headerlink" title="Number()"></a><code>Number()</code></h4><p><code>Number()</code> 是一个函数，它可以将各种类型的值（如字符串、布尔值、null 等）转换为数值类型。</p><p>它的作用是进行显式类型转换。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Number</span>(<span class="string">&#x27;123&#x27;</span>); <span class="comment">// 返回 123（字符串转换为数字）</span></span><br><span class="line"><span class="title class_">Number</span>(<span class="literal">true</span>);  <span class="comment">// 返回 1（布尔值 true 转换为 1）</span></span><br><span class="line"><span class="title class_">Number</span>(<span class="literal">false</span>); <span class="comment">// 返回 0（布尔值 false 转换为 0）</span></span><br><span class="line"><span class="title class_">Number</span>(<span class="literal">null</span>);  <span class="comment">// 返回 0（null 转换为 0）</span></span><br><span class="line"><span class="title class_">Number</span>(<span class="string">&#x27;abc&#x27;</span>); <span class="comment">// 返回 NaN（无法转换为数值时，返回 NaN）</span></span><br></pre></td></tr></table></figure><h2 id="处理输入输出"><a href="#处理输入输出" class="headerlink" title="处理输入输出"></a>处理输入输出</h2><h4 id="1-创建输入输出接口"><a href="#1-创建输入输出接口" class="headerlink" title="1. 创建输入输出接口"></a>1. 创建输入输出接口</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> readline = <span class="built_in">require</span>(<span class="string">&#x27;readline&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个 readline 接口，用于处理输入输出</span></span><br><span class="line"><span class="keyword">const</span> rl = readline.<span class="title function_">createInterface</span>(&#123;</span><br><span class="line">    <span class="attr">input</span>: process.<span class="property">stdin</span>,  <span class="comment">// 监听标准输入（用户输入）</span></span><br><span class="line">    <span class="attr">output</span>: process.<span class="property">stdout</span>  <span class="comment">// 标准输出（打印输出，通常是命令行）</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-监听输入"><a href="#2-监听输入" class="headerlink" title="2. 监听输入"></a>2. 监听输入</h4><p><code>rl.on(&#39;line&#39;, callback)</code> 这个函数用于监听每一行的输入。当用户按下回车键并输入一行数据后，<code>line</code> 事件会触发，并将输入内容传递给回调函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">rl.<span class="title function_">on</span>(<span class="string">&#x27;line&#x27;</span>, <span class="function">(<span class="params">line</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (inputStep === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 处理第一行输入，数组长度 n</span></span><br><span class="line">        n = <span class="built_in">parseInt</span>(line.<span class="title function_">trim</span>());</span><br><span class="line">        inputStep++;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (inputStep &lt;= n) &#123;</span><br><span class="line">        <span class="comment">// 处理数组输入</span></span><br><span class="line">        array.<span class="title function_">push</span>(<span class="built_in">parseInt</span>(line.<span class="title function_">trim</span>()));</span><br><span class="line">        inputStep++;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 处理区间输入</span></span><br><span class="line">        <span class="keyword">let</span> range = line.<span class="title function_">trim</span>().<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>).<span class="title function_">map</span>(<span class="title class_">Number</span>);</span><br><span class="line">        ranges.<span class="title function_">push</span>(range);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="3-关闭输入流"><a href="#3-关闭输入流" class="headerlink" title="3. 关闭输入流"></a>3. 关闭输入流</h4><p>当输入完成后，通常需要关闭输入流，否则程序会一直等待用户的输入。可以在适当时候调用 <code>rl.close()</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">rl.<span class="title function_">on</span>(<span class="string">&#x27;line&#x27;</span>, <span class="function">(<span class="params">line</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 当接收到输入后处理</span></span><br><span class="line">    <span class="keyword">if</span> (line === <span class="string">&#x27;exit&#x27;</span>) &#123;</span><br><span class="line">        rl.<span class="title function_">close</span>();  <span class="comment">// 当用户输入 &#x27;exit&#x27; 时关闭输入流</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">rl.<span class="title function_">on</span>(<span class="string">&#x27;close&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 输入结束后执行的代码</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;程序结束&#x27;</span>);</span><br><span class="line">    process.<span class="title function_">exit</span>(<span class="number">0</span>);  <span class="comment">// 退出程序</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="require-和-import"><a href="#require-和-import" class="headerlink" title="require 和 import"></a>require 和 import</h2><p>在 JavaScript 中，<code>require</code> 和 <code>import</code> 都用于引入模块，但它们用于不同的模块系统，具体使用情况取决于运行环境和模块格式。</p><h4 id="require"><a href="#require" class="headerlink" title="require"></a><code>require</code></h4><ul><li><strong>模块系统</strong>：<code>require</code> 是用于 <strong>CommonJS</strong> 模块系统的语法，它主要用于 Node.js 环境中(服务器端)。</li><li><strong>用法</strong>：<ul><li><strong>动态引入</strong>：<code>require</code> 可以在代码的任何地方使用，并且支持条件引入（根据条件动态引入模块）。</li><li><strong>同步加载</strong>：<code>require</code> 会同步加载模块，当一个模块被引入时，代码会等待模块加载完成。</li></ul></li></ul><h4 id="import"><a href="#import" class="headerlink" title="import"></a><code>import</code></h4><ul><li><strong>模块系统</strong>：<code>import</code> 是用于 <strong>ES6 (ES2015)</strong> 模块系统的语法，适用于现代 JavaScript，包括浏览器环境和 Node.js 中的 <strong>ES Modules</strong>（需要特定的设置）</li><li><strong>用法</strong>：<ul><li><strong>静态引入</strong>：<code>import</code> 通常必须放在模块的顶层，并且在编译时处理，因此它不能像 <code>require</code> 一样动态使用（尽管有 <code>import()</code> 的动态引入方式，但那是另一种情况，详见下文）。</li><li><strong>异步加载</strong>：<code>import</code> 是异步加载的（在浏览器环境下，模块通过异步请求加载）。</li><li><strong>按需引入</strong>：可以从模块中按需导入指定的部分，减少加载的内容。</li></ul></li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p><strong>Node.js</strong> 环境下，如果使用 CommonJS 模块（默认模块系统），就用 <code>require</code>；如果启用了 ES 模块，就用 <code>import</code>。</p><p><strong>浏览器</strong> 环境下，应该使用 <code>import</code>，因为这是现代浏览器支持的模块系统。</p><p><strong>动态加载</strong>：<code>require</code> 可以在 Node.js 中随时使用，但在 ES6 模块系统中，需要用 <code>import()</code> 函数来实现动态加载。</p>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js写算法</title>
      <link href="/2024/08/01/js%E5%86%99%E7%AE%97%E6%B3%95/"/>
      <url>/2024/08/01/js%E5%86%99%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="二分法"><a href="#二分法" class="headerlink" title="二分法"></a>二分法</h2><h4 id="二分（左闭右闭）"><a href="#二分（左闭右闭）" class="headerlink" title="二分（左闭右闭）"></a>二分（左闭右闭）</h4><p><strong>循环判断条件</strong> </p><p><code>while(left &lt;= right)</code> 因为左闭右闭的情况下，left是可以等于right的</p><p><strong>区间的处理</strong></p><p><code>left = mid  + 1</code> <code>right = mid -1</code> 因为当mid不符合条件时，不应该再将mid放入闭区间里</p><p><strong>最后结果</strong></p><p>right 等于 left -1</p><p><strong>代码</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(left &lt;= right) &#123;</span><br><span class="line">    mid = left + ((right - left) &lt;&lt; <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span>(nums[mid] &gt; target) right = mid - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(num[mid] &lt; target) left = mid + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> mid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二分（左闭右开）"><a href="#二分（左闭右开）" class="headerlink" title="二分（左闭右开）"></a>二分（左闭右开）</h4><p><strong>判断条件</strong> </p><p><code>while(left&lt;right)</code> 因为左闭右开的情况下，left不可以等于right</p><p><strong>最后结果</strong></p><p>left等于right</p><p><strong>区间的处理</strong></p><p><code>left = mid + 1</code> <code> right = mid</code>因为此时右边是开区间 把mid赋值到右边不会影响</p><p><strong>代码</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(left &lt; right) &#123;</span><br><span class="line">    mid = left + ((right - left) &lt;&lt; <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span>(nums[mid] &gt; target) right = mid;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(num[mid] &lt; target) left = mid + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> mid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="35-搜索插入位置"><a href="#35-搜索插入位置" class="headerlink" title="35 搜索插入位置"></a>35 搜索插入位置</h4><p>给定排序数组nums和一个目标值target</p><p>找到目标值并返回索引</p><p>如果目标值不存在数组中，返回其按顺序插入的位置</p><p><strong>思路</strong></p><p>二分查找，找到目标值返回索引很简单</p><p><strong>重点</strong>在于不在数组中返回其 应该插入位置的情况</p><p><strong>左闭右闭</strong>时 未找到的情况</p><p>最后一次查找，开始时 <code>left等于right</code> <code>mid等于left等于right</code>，结束时<code>left等于right + 1</code></p><p>如果<code>target &gt; nums[mid]</code>  ,target应该在mid右端一位，即target的索引应该是<code>mid + 1</code>,此时<code>left = mid + 1</code>  ，所以返回<code>left</code>或者<code>right+1</code></p><p>如果<code>target &lt;  nums[mid]</code>, target应该在mid左端一位，即target的索引应该是<code>mid</code>,此时<code>right = mid - 1</code>,所以返回 <code>left</code>或者<code>right + 1</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">target</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> searchInsert = <span class="keyword">function</span>(<span class="params">nums, target</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> left = <span class="number">0</span>, right = nums.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(left &lt;= right) &#123;</span><br><span class="line">        <span class="keyword">let</span> mid = left + ((right - left) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(nums[mid] &gt; target) &#123;</span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &lt; target) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">return</span> mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> right + <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>左闭右开</strong>时 未找到的情况</p><p>最后一次查找，开始时<code>right等于left+1</code>   <code> mid等于left等于right-1</code> ，结束时<code>left等于right</code></p><p>如果<code>target &gt; nums[mid]</code>  ,target应该在mid右端一位，即target的索引应该是<code>mid + 1</code>,此时<code>left = mid + 1</code>,所以返回<code>left</code>或者<code>right</code></p><p>如果<code>target &lt;  nums[mid]</code>, target应该在mid左端一位，即target的索引应该是<code>mid</code>,此时<code>right = mid - 1</code>,所以返回 <code>left</code>或者<code>right</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">target</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> searchInsert = <span class="keyword">function</span>(<span class="params">nums, target</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> left = <span class="number">0</span>, right = nums.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">while</span>(left &lt; right) &#123;</span><br><span class="line">        <span class="keyword">let</span> mid = left + ((right - left) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(nums[mid] &gt; target) &#123;</span><br><span class="line">            right = mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &lt; target) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">return</span> mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> right;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="34-在排序数组中查找元素的第一个和最后一个位置"><a href="#34-在排序数组中查找元素的第一个和最后一个位置" class="headerlink" title="34 在排序数组中查找元素的第一个和最后一个位置"></a>34 在排序数组中查找元素的第一个和最后一个位置</h4><p>给一个非递减的数组nums和目标值target</p><p>给定目标值在数组中的开始位置和结束位置</p><p>如果数组中不存在目标值，返回<code>[-1,-1]</code></p><p><strong>思路</strong></p><p>将查找元素的第一个和最后一个位置问题转换成 查找元素的左边界（不含该元素）和右边界问题（不含该元素）</p><p><strong>重点</strong>如何寻找左右边界呢？改写二分法。</p><p>如果要寻找左边界，那就是要找尽可能小于目标值的地方,即使找到了target也不返回，而是继续向左查找,直到最后一个target为mid时 right就是左边界</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> searchLeftBorder = <span class="keyword">function</span>(<span class="params">nums, target</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> left = <span class="number">0</span>, right = nums.<span class="property">length</span> - <span class="number">1</span>, leftBorder = -<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span>(left &lt;= right) &#123;</span><br><span class="line">        <span class="keyword">let</span> mid = left + ((right - left) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(nums[mid] &gt;= target) &#123;</span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">            leftBorder = right;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> leftBorder;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果要寻找右边界，那就是要找尽可能小于目标值的地方,即使找到了target也不返回，而是继续向右查找,直到最后一个target为mid时 left就是左边界</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> searchRightBorder = <span class="keyword">function</span>(<span class="params">nums, target</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> left = <span class="number">0</span>, right = nums.<span class="property">length</span> - <span class="number">1</span>, rightBorder = -<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span>(left &lt;= right) &#123;</span><br><span class="line">        <span class="keyword">let</span> mid = left + ((right - left) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(nums[mid] &gt; target) &#123;</span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">            rightBorder = left;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> rightBorder;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在讨论leftBorder和rightBorder各种取值的情况</p><p>初始时 leftBorder和rightBorder都为 -2 </p><ol><li>如果数组中所有元素都大于 <code>target</code>   那么<code>rightBorder</code>一直都不被赋值，试图在最左边找<code>leftBorder</code>  最后 <code>leftBorder</code>为<code>-1</code></li><li>如果数组中所有元素都小于<code>target</code>   那么<code>leftBorder</code>一直都不被赋值，试图在最右边找<code>rightBorder</code>  最后<code>rightBorder</code>为<code>-1</code></li><li>如果target在数组中元素的范围内，但不在数组内。那么<code>leftBorder + 1等于rightBorder</code></li><li>target在数组中元素的范围内 ，那么<code>rightBorder &gt; leftBorder + 1</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">target</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> searchRange = <span class="keyword">function</span>(<span class="params">nums, target</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> leftBorder = <span class="title function_">searchLeftBorder</span>(nums, target);</span><br><span class="line">    <span class="keyword">let</span> rightBorder = <span class="title function_">searchRightBorder</span>(nums, target);</span><br><span class="line">    <span class="keyword">if</span>(leftBorder === -<span class="number">2</span> || rightBorder === -<span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> [-<span class="number">1</span>, -<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(rightBorder - leftBorder &gt; <span class="number">1</span>) <span class="keyword">return</span> [leftBorder + <span class="number">1</span>, rightBorder - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> [-<span class="number">1</span>, -<span class="number">1</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="删除数组元素（原地修改）"><a href="#删除数组元素（原地修改）" class="headerlink" title="删除数组元素（原地修改）"></a>删除数组元素（原地修改）</h2><p>leetcode27题</p><p><strong>题干</strong>：给定一个数组 nums 和一个值 val，你需要 <strong>原地</strong> 移除所有数值等于 val 的元素，并返回移除后数组的新长度。</p><p>原地：不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并<strong>原地</strong>修改输入数组。</p><h4 id="暴力解法"><a href="#暴力解法" class="headerlink" title="暴力解法"></a>暴力解法</h4><p>两重循环，第一次循环遍历元素，当元素值为val时，进入第二重循环，将所有数右移</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">val</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> removeElement = <span class="keyword">function</span>(<span class="params">nums, val</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> len = nums.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[i] == val) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; len; j++)&#123;</span><br><span class="line">                nums[j-<span class="number">1</span>] = nums[j];</span><br><span class="line">            &#125;</span><br><span class="line">            i--;</span><br><span class="line">            len--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(len);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> len;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="双指针法"><a href="#双指针法" class="headerlink" title="双指针法"></a>双指针法</h4><p>fast指针遍历数组，slow指针指向新数组</p><p>当fast指向的值为val时，fast指针右移动</p><p>当fast指向的值不为val时，将fast的值赋给slow指针，slow指针向右移动</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">val</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> removeElement = <span class="keyword">function</span>(<span class="params">nums, val</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> slow = <span class="number">0</span>, fast = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(fast = <span class="number">0</span>; fast &lt; nums.<span class="property">length</span>; fast++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[fast] != val) nums[slow++] = nums[fast];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> slow</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="26-删除有序数组中的重复项"><a href="#26-删除有序数组中的重复项" class="headerlink" title="26 删除有序数组中的重复项"></a>26 删除有序数组中的重复项</h4><p>给定非降序数组<code>nums</code> </p><p>删除所有重复的元素，并将剩下的元素排序 ，并返回新数组的长度</p><p><code>nums</code>唯一元素的数量为k，其余元素与大小并不重要</p><p><strong>思路</strong></p><p>双指针， slow指针和fast指针初始都指向0</p><p>fast指针遍历数组</p><p>当fast指针和slow指针指的元素不一样的时候，<code>++nums[slow] = nums[fast]</code></p><p>删除后新数组的长度为slow+1</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> removeDuplicates = <span class="keyword">function</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> slow = <span class="number">0</span>, fast = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(; fast &lt; nums.<span class="property">length</span>; fast++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[fast] != nums[slow]) nums[++slow] = nums[fast];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> slow + <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="283-移动零"><a href="#283-移动零" class="headerlink" title="283 移动零"></a>283 移动零</h4><p>给定数组nums</p><p>要求将所有0移动到末尾，并保持非零元素的相对顺序</p><p>要求 对原数组进行操作 空间复杂度o（1）</p><p><strong>暴力解法</strong></p><p>一遇到0就往后找不为0的数 并交换</p><p>时间复杂度O(n2)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">void</span>&#125; Do not return anything, modify nums in-place instead.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> moveZeroes = <span class="keyword">function</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.<span class="property">length</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[i] === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; nums.<span class="property">length</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[j] !== <span class="number">0</span>) &#123;</span><br><span class="line">                    nums[i] = nums[j];</span><br><span class="line">                    nums[j] = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>双指针法</strong></p><p>定义指针slow，fast，fast遍历数组 </p><p>fast指向的是0 fast向右移动</p><p>fast指向的是非0 fast的值给slow fast和slow都向右移动</p><p>最后数组的fill方法填充元素0</p><h2 id="有序数组的平方"><a href="#有序数组的平方" class="headerlink" title="有序数组的平方"></a>有序数组的平方</h2><p>leetcode 997题</p><p>给你一个按 <strong>非递减顺序</strong> 排序的整数数组 nums，返回 每个数字的平方 组成的新数组，要求也按 <strong>非递减顺序</strong> 排序。</p><h4 id="暴力解法-1"><a href="#暴力解法-1" class="headerlink" title="暴力解法"></a>暴力解法</h4><p>先平方再排序（略）</p><h4 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h4><p>每次都选最大的元素放到新数组里，因为原先是非递减排序的数组，所以平方后最大的值只可能在两端（绝对值最大）</p><p>左侧i指针，右侧j指针</p><p>当指针i的数值平方小于指针j的数值平方时，将指针j的值放到新数组末尾，将j左移</p><p>反之 将指针i的值放到数组末尾，将i右移动</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sortedSquares = <span class="keyword">function</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span>, j = nums.<span class="property">length</span>-<span class="number">1</span>, k = j;</span><br><span class="line">    <span class="keyword">let</span> results = [];</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=j)&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[i] * nums[i] &lt; nums[j] * nums[j]) &#123;</span><br><span class="line">    nums[k--] = nums[j] * nums[j];</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            nums[k--] = nums[i] * nums[i];</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> results;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="长度最小的子数组"><a href="#长度最小的子数组" class="headerlink" title="长度最小的子数组"></a>长度最小的子数组</h2><p>leetcode 209</p><p>给定数组和特定值，找出数组中满足其和&gt;&#x3D;特定值的长度最小的 <strong>连续</strong> 子数组，并返回其长度，如果不存在满足条件的子数组，返回0</p><h4 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h4><p>思路是，定义数组开头指针start 末尾指针end。</p><p>【end一直后移动，当子数组满足题目的条件时，start后移直到不满足条件，再让end后移动到满足条件】，如此循环，记录满足条件的最小长度</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">target</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> minSubArrayLen = <span class="keyword">function</span>(<span class="params">target, nums</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> start = <span class="number">0</span>, end = <span class="number">0</span>, result = <span class="title class_">Infinity</span>, sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(; end &lt; nums.<span class="property">length</span>; end++) &#123;</span><br><span class="line">        sum += nums[end];</span><br><span class="line">        <span class="keyword">while</span>(sum &gt;= target) &#123;</span><br><span class="line">            <span class="keyword">const</span> subLen = end - start + <span class="number">1</span></span><br><span class="line">            result = result &lt; subLen? result : subLen;</span><br><span class="line">            sum -= nums[start++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result === <span class="title class_">Infinity</span>? <span class="number">0</span> : result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="904-水果成篮"><a href="#904-水果成篮" class="headerlink" title="904 水果成篮"></a>904 水果成篮</h4><p>给定数组fruits，fruits[i]表示水果的种类。</p><p>两个篮子，每个篮子只能装一种水果，每个篮子无限装。</p><p>只能从前往后按顺序装。</p><p><strong>思路</strong></p><p>滑动窗口，end，start两个指针。</p><p>【end右移。当当前无法继续采摘时，start指针指向end指针前方的，最前的，与end指针同种的水果。然后继续end右移】</p><p>如此循环，每次end右移，记下最大长度</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">fruits</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> totalFruit = <span class="keyword">function</span>(<span class="params">fruits</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> start = <span class="number">0</span>, end = <span class="number">0</span>, result = <span class="number">0</span>,basket = [];</span><br><span class="line">    <span class="keyword">for</span>(;end &lt; fruits.<span class="property">length</span>; end++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!basket.<span class="title function_">includes</span>(fruits[end]) &amp;&amp; basket.<span class="property">length</span> &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            basket.<span class="title function_">push</span>(fruits[end]);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(basket.<span class="title function_">includes</span>(fruits[end])) &#123;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            start = end - <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span>(fruits[start] === fruits[start-<span class="number">1</span>]) &#123;</span><br><span class="line">                start--;</span><br><span class="line">            &#125;</span><br><span class="line">            basket = [fruits[end], fruits[start]]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> subLen = end - start + <span class="number">1</span>;</span><br><span class="line">        result = result &gt; subLen? <span class="attr">result</span>: subLen;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`从<span class="subst">$&#123;start&#125;</span>到<span class="subst">$&#123;end&#125;</span>，篮子里是<span class="subst">$&#123;basket&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="76-最小覆盖子串"><a href="#76-最小覆盖子串" class="headerlink" title="76 最小覆盖子串"></a>76 最小覆盖子串</h4><p>leetcode 76</p><p>给定字符串s，t</p><p>要求在s中找到涵盖字符串t的最小字串 </p><p>可以乱序 但要求t的所有字母都在s子串里出现过 重复的字母，次数也不能小于s子串的次数</p><p><strong>思路</strong></p><p>滑动窗口，指针start和end，当s子串涵盖了t时回退到不涵盖的情况 </p><p>关键是如何表示<strong>涵盖</strong>了</p><p>为s子串创建cntS数组，t子串创建cntT数组，统计每个字母出现的次数，当s子串中每个字母出现的字数都大于t时 即为<strong>涵盖</strong>了</p><p><strong>方法一 ：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">s</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">t</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">string</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> isCovered = <span class="keyword">function</span>(<span class="params">cntS, cntT</span>)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="string">&#x27;a&#x27;</span>.<span class="title function_">charCodeAt</span>(<span class="number">0</span>); i &lt;= <span class="string">&#x27;z&#x27;</span>.<span class="title function_">charCodeAt</span>(<span class="number">0</span>); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(cntS[i] &lt; cntT[i]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="string">&#x27;A&#x27;</span>.<span class="title function_">charCodeAt</span>(<span class="number">0</span>); i &lt;= <span class="string">&#x27;Z&#x27;</span>.<span class="title function_">charCodeAt</span>(<span class="number">0</span>); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(cntS[i] &lt; cntT[i]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> minWindow = <span class="keyword">function</span>(<span class="params">s, t</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> start = <span class="number">0</span>, end = <span class="number">0</span>, </span><br><span class="line">    cntS = <span class="title class_">Array</span>(<span class="number">128</span>).<span class="title function_">fill</span>(<span class="number">0</span>), cntT = <span class="title class_">Array</span>(<span class="number">128</span>).<span class="title function_">fill</span>(<span class="number">0</span>), ansLeft = -<span class="number">1</span>, ansRight = s.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> char <span class="keyword">of</span> t) &#123;</span><br><span class="line">        cntT[char.<span class="title function_">charCodeAt</span>(<span class="number">0</span>)]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(; end &lt; s.<span class="property">length</span>; end++)&#123;</span><br><span class="line">        cntS[s[end].<span class="title function_">charCodeAt</span>(<span class="number">0</span>)]++;</span><br><span class="line">        <span class="keyword">while</span>(<span class="title function_">isCovered</span>(cntS, cntT)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(end - start &lt; ansRight - ansLeft) &#123;</span><br><span class="line">                ansLeft = start;</span><br><span class="line">                ansRight = end;</span><br><span class="line">            &#125;</span><br><span class="line">            cntS[s[start].<span class="title function_">charCodeAt</span>(<span class="number">0</span>)]--;</span><br><span class="line">            start++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ansLeft === -<span class="number">1</span>? <span class="string">&quot;&quot;</span>: s.<span class="title function_">substring</span>(ansLeft, ansRight + <span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方法二：</strong></p><p>用type表示t的字母种类，每当t有一个字母被s涵盖全，就将type–</p><p>直到type为0时即为 <strong>涵盖</strong>了 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">s</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">t</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">string</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> minWindow = <span class="keyword">function</span>(<span class="params">s, t</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> start = <span class="number">0</span>, end = <span class="number">0</span>, </span><br><span class="line">    cntS = <span class="title class_">Array</span>(<span class="number">128</span>).<span class="title function_">fill</span>(<span class="number">0</span>), cntT = <span class="title class_">Array</span>(<span class="number">128</span>).<span class="title function_">fill</span>(<span class="number">0</span>), ansLeft = -<span class="number">1</span>, ansRight = s.<span class="property">length</span>,</span><br><span class="line">    type = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> char <span class="keyword">of</span> t) &#123;</span><br><span class="line">        <span class="keyword">if</span>(cntT[char.<span class="title function_">charCodeAt</span>(<span class="number">0</span>)]++ === <span class="number">0</span>) &#123;</span><br><span class="line">            type++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(; end &lt; s.<span class="property">length</span>; end++)&#123;</span><br><span class="line">        <span class="keyword">let</span> num = s[end].<span class="title function_">charCodeAt</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(++cntS[num] === cntT[num]) &#123;</span><br><span class="line">            type--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(type === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(end - start &lt; ansRight - ansLeft) &#123;</span><br><span class="line">                ansLeft = start;</span><br><span class="line">                ansRight = end;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">const</span> x = s[start++].<span class="title function_">charCodeAt</span>(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span>(cntS[x]-- === cntT[x])&#123;</span><br><span class="line">                type++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ansLeft === -<span class="number">1</span>? <span class="string">&quot;&quot;</span>: s.<span class="title function_">substring</span>(ansLeft, ansRight + <span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="螺旋矩阵"><a href="#螺旋矩阵" class="headerlink" title="螺旋矩阵"></a>螺旋矩阵</h2><h4 id="59-螺旋矩阵II"><a href="#59-螺旋矩阵II" class="headerlink" title="59 螺旋矩阵II"></a>59 螺旋矩阵II</h4><p>给定一个正整数 n，生成一个包含 1 到 n^2 所有元素，且元素按顺时针顺序螺旋排列的正方形矩阵。</p><p><strong>示例:</strong></p><p>输入: 3 输出: [ [ 1, 2, 3 ], [ 8, 9, 4 ], [ 7, 6, 5 ] ]</p><p><strong>思路</strong></p><p>循环不变量</p><p>填充分为4部分 </p><p>例如输入为3时，从左到右填1，2；从上到下填3，4；从右到左填5，6；从下到上填7，8</p><p>输入n，循环<code>n/2(向下取整)</code>，如果n为奇数，最后在矩阵中间填一次</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">n</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[][]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> generateMatrix = <span class="keyword">function</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> mid = <span class="title class_">Math</span>.<span class="title function_">floor</span>(n / <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">let</span> loop = <span class="title class_">Math</span>.<span class="title function_">floor</span>(n / <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">let</span> matrix = <span class="keyword">new</span> <span class="title class_">Array</span>(n).<span class="title function_">fill</span>(<span class="number">0</span>).<span class="title function_">map</span>(<span class="function">() =&gt;</span> <span class="keyword">new</span> <span class="title class_">Array</span>(n).<span class="title function_">fill</span>(<span class="number">0</span>))</span><br><span class="line">    <span class="keyword">let</span> offset = <span class="number">1</span>, startx = <span class="number">0</span>, starty = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> (loop--) &#123;</span><br><span class="line">        <span class="keyword">let</span> col = starty, row = startx</span><br><span class="line">        <span class="keyword">for</span>(; col &lt; n - offset; col++) matrix[row][col] = count++</span><br><span class="line">        <span class="keyword">for</span>(; row &lt; n - offset; row++) matrix[row][col] = count++</span><br><span class="line">        <span class="keyword">for</span>(; col &gt; starty; col--) matrix[row][col] = count++</span><br><span class="line">        <span class="keyword">for</span>(; row &gt; startx; row--) matrix[row][col] = count++</span><br><span class="line"></span><br><span class="line">        startx++,starty++</span><br><span class="line">        offset++</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(n % <span class="number">2</span> === <span class="number">1</span>) &#123;</span><br><span class="line">        matrix[mid][mid] = count</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> matrix</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="54-螺旋矩阵"><a href="#54-螺旋矩阵" class="headerlink" title="54 螺旋矩阵"></a>54 螺旋矩阵</h4><p>给定一个 <code>m</code> 行 <code>n</code> 列的矩阵 <code>matrix</code> ，请按照 <strong>顺时针螺旋顺序</strong> ，返回矩阵中的所有元素。</p><p><strong>思路：</strong></p><p>循环loop次，<code>loop = m &gt; n ? Math.floor(m / 2) : Math.floor(n / 2)</code></p><p>循环过程中，当res里已经有了所有元素时，返回</p><p>特殊情况，m，n相等且都为奇数时，matrix中间元素填充到res</p><h2 id="前缀和"><a href="#前缀和" class="headerlink" title="前缀和"></a>前缀和</h2><p><strong>前缀和概念</strong>：</p><p>一个长度为n的数组a[1] ~ a[n]，前缀和sum[i]等于a[1] ~ a[i]的和：</p><p>sum[i] &#x3D; a[1] + a[2] + … + a[i]</p><p><strong>递推公式：sum[i]&#x3D;sum[i-1]+a[i]</strong></p><p><strong>差分概念</strong>：</p><p>差分是前缀和的逆运算，一个长度为n的数组a[1]~a[n],差分d[i]等于a[i]-a[i-1]</p><p><strong>公式</strong>：<strong>a[i]&#x3D;a[i-1]+d[i]</strong></p><h4 id="区间和"><a href="#区间和" class="headerlink" title="区间和"></a>区间和</h4><p><a href="https://kamacoder.com/problempage.php?pid=1070">题目链接</a></p><p>给定一个整数数组 Array，请计算该数组在每个指定区间内元素的总和。</p><p><strong>代码</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> readline = <span class="built_in">require</span>(<span class="string">&#x27;readline&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> rl = readline.<span class="title function_">createInterface</span>(&#123;</span><br><span class="line">    <span class="attr">input</span>: process.<span class="property">stdin</span>,</span><br><span class="line">    <span class="attr">output</span>: process.<span class="property">stdout</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> n</span><br><span class="line"><span class="keyword">let</span> num = []</span><br><span class="line"><span class="keyword">let</span> s = []</span><br><span class="line"><span class="keyword">let</span> inputStep = <span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> ranges = []</span><br><span class="line">rl.<span class="title function_">on</span>(<span class="string">&#x27;line&#x27;</span>, <span class="function">(<span class="params">line</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (inputStep === <span class="number">0</span>) &#123;</span><br><span class="line">        n = <span class="built_in">parseInt</span>(line.<span class="title function_">trim</span>())</span><br><span class="line">        inputStep++</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (inputStep &lt;=n) &#123;</span><br><span class="line">        inputStep++</span><br><span class="line">        num.<span class="title function_">push</span>(<span class="built_in">parseInt</span>(line.<span class="title function_">trim</span>()))</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        range = line.<span class="title function_">trim</span>().<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>).<span class="title function_">map</span>(<span class="title class_">Number</span>)</span><br><span class="line">        ranges.<span class="title function_">push</span>(range)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br><span class="line">rl.<span class="title function_">on</span>(<span class="string">&#x27;close&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    s = <span class="keyword">new</span> <span class="title class_">Array</span>(num.<span class="property">length</span>).<span class="title function_">fill</span>(<span class="number">0</span>)</span><br><span class="line">    s[<span class="number">0</span>] = num[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; num.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        s[i] = s[i-<span class="number">1</span>] + num[i] </span><br><span class="line">    &#125;</span><br><span class="line">    ranges.<span class="title function_">forEach</span>(<span class="function"><span class="params">range</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> [start, end] = range</span><br><span class="line">        <span class="keyword">let</span> sum = s[end]</span><br><span class="line">        <span class="keyword">if</span>(start &gt; <span class="number">0</span>) sum -= s[start - <span class="number">1</span>]</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(sum)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="开发商购买土地"><a href="#开发商购买土地" class="headerlink" title="开发商购买土地"></a>开发商购买土地</h4><p><a href="https://kamacoder.com/problempage.php?pid=1044">题目链接</a></p><p>本题也是用前缀和优化时间复杂度</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> readline = <span class="built_in">require</span>(<span class="string">&#x27;readline&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> rl = readline.<span class="title function_">createInterface</span>(&#123;</span><br><span class="line">    <span class="attr">input</span>: process.<span class="property">stdin</span>,</span><br><span class="line">    <span class="attr">output</span>: process.<span class="property">stdout</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> n,m</span><br><span class="line"><span class="keyword">let</span> inputStep = <span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> num = []</span><br><span class="line"><span class="keyword">let</span> prefixColSum = []</span><br><span class="line"><span class="keyword">let</span> prefixRowSum = []</span><br><span class="line">rl.<span class="title function_">on</span>(<span class="string">&#x27;line&#x27;</span>, <span class="function">(<span class="params">line</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(inputStep === <span class="number">0</span>) &#123;</span><br><span class="line">        [n, m] = line.<span class="title function_">trim</span>().<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>).<span class="title function_">map</span>(<span class="title class_">Number</span>)</span><br><span class="line">        inputStep++</span><br><span class="line">        num = <span class="keyword">new</span> <span class="title class_">Array</span>(n).<span class="title function_">fill</span>(<span class="number">0</span>).<span class="title function_">map</span>(<span class="function">() =&gt;</span> <span class="keyword">new</span> <span class="title class_">Array</span>(m).<span class="title function_">fill</span>(<span class="number">0</span>))</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(inputStep &lt;= n) &#123;</span><br><span class="line">        num[inputStep - <span class="number">1</span>] = line.<span class="title function_">trim</span>().<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>).<span class="title function_">map</span>(<span class="title class_">Number</span>)</span><br><span class="line">        inputStep++</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">rl.<span class="title function_">on</span>(<span class="string">&#x27;close&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    prefixColSum = <span class="keyword">new</span> <span class="title class_">Array</span>(m).<span class="title function_">fill</span>(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">let</span> colSum = <span class="keyword">new</span> <span class="title class_">Array</span>(m).<span class="title function_">fill</span>(<span class="number">0</span>)</span><br><span class="line">    prefixRowSum = <span class="keyword">new</span> <span class="title class_">Array</span>(n).<span class="title function_">fill</span>(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">let</span> rowSum = <span class="keyword">new</span> <span class="title class_">Array</span>(n).<span class="title function_">fill</span>(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            colSum[i] += num[j][i]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i === <span class="number">0</span>) prefixColSum[i] = colSum[i]</span><br><span class="line">        <span class="keyword">else</span> prefixColSum[i] = prefixColSum[i-<span class="number">1</span>] + colSum[i]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">            rowSum[i] += num[i][j]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i === <span class="number">0</span>) prefixRowSum[i] = rowSum[i]</span><br><span class="line">        <span class="keyword">else</span> prefixRowSum[i] = prefixRowSum[i-<span class="number">1</span>] + rowSum[i]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="title class_">Infinity</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> res = <span class="title class_">Math</span>.<span class="title function_">abs</span>(prefixColSum[m - <span class="number">1</span>] - <span class="number">2</span> * prefixColSum[i - <span class="number">1</span>])</span><br><span class="line">        sum = sum &lt; res ? sum : res</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> res = <span class="title class_">Math</span>.<span class="title function_">abs</span>(prefixRowSum[n - <span class="number">1</span>] - <span class="number">2</span> * prefixRowSum[i - <span class="number">1</span>])</span><br><span class="line">        sum = sum &lt; res ? sum : res</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(sum)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><h2 id="移除链表元素"><a href="#移除链表元素" class="headerlink" title="移除链表元素"></a>移除链表元素</h2><h4 id="203-移除链表元素"><a href="#203-移除链表元素" class="headerlink" title="203 移除链表元素"></a>203 移除链表元素</h4><p><strong>题意</strong>：删除链表中等于给定值 val 的所有节点。</p><p><strong>两种方法</strong>：</p><ol><li><p>对原链表进行操作，需要分类，因为移除头结点和移除其他结点操作不同</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line">    val</span><br><span class="line">    next = <span class="literal">null</span></span><br><span class="line">    <span class="title function_">constructor</span> (value) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">val</span> = value</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">next</span> = <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">ListNode</span>&#125; <span class="variable">head</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">val</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">ListNode</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> removeElements = <span class="keyword">function</span> (<span class="params">head, val</span>) &#123;</span><br><span class="line">    <span class="keyword">while</span> (head &amp;&amp; head.<span class="property">val</span> === val) &#123;</span><br><span class="line">        head = head.<span class="property">next</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (head === <span class="literal">null</span>) <span class="keyword">return</span> head</span><br><span class="line">    <span class="keyword">let</span> cur = head</span><br><span class="line">    <span class="keyword">while</span> (cur.<span class="property">next</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(cur.<span class="property">next</span>.<span class="property">val</span> === val) cur.<span class="property">next</span> = cur.<span class="property">next</span>.<span class="property">next</span></span><br><span class="line">        <span class="keyword">else</span> cur = cur.<span class="property">next</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>使用虚拟头结点，统一操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line">    val</span><br><span class="line">    next = <span class="literal">null</span></span><br><span class="line">    <span class="title function_">constructor</span> (value) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">val</span> = value</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">next</span> = <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">ListNode</span>&#125; <span class="variable">head</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">val</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">ListNode</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> removeElements = <span class="keyword">function</span> (<span class="params">head, val</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> dummyHead = <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>)</span><br><span class="line">    dummyHead.<span class="property">next</span> = head</span><br><span class="line">    <span class="keyword">let</span> cur = dummyHead</span><br><span class="line">    <span class="keyword">while</span> (cur.<span class="property">next</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(cur.<span class="property">next</span>.<span class="property">val</span> === val) cur.<span class="property">next</span> = cur.<span class="property">next</span>.<span class="property">next</span></span><br><span class="line">        <span class="keyword">else</span> cur = cur.<span class="property">next</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dummyHead.<span class="property">next</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><h2 id="链表常用操作"><a href="#链表常用操作" class="headerlink" title="链表常用操作"></a>链表常用操作</h2><h4 id="707-设计链表"><a href="#707-设计链表" class="headerlink" title="707 设计链表"></a>707 设计链表</h4><ul><li><code>MyLinkedList()</code> 初始化 <code>MyLinkedList</code> 对象。</li><li><code>int get(int index)</code> 获取链表中下标为 <code>index</code> 的节点的值。如果下标无效，则返回 <code>-1</code> 。</li><li><code>void addAtHead(int val)</code> 将一个值为 <code>val</code> 的节点插入到链表中第一个元素之前。在插入完成后，新节点会成为链表的第一个节点。</li><li><code>void addAtTail(int val)</code> 将一个值为 <code>val</code> 的节点追加到链表中作为链表的最后一个元素。</li><li><code>void addAtIndex(int index, int val)</code> 将一个值为 <code>val</code> 的节点插入到链表中下标为 <code>index</code> 的节点之前。如果 <code>index</code> 等于链表的长度，那么该节点会被追加到链表的末尾。如果 <code>index</code> 比长度更大，该节点将 <strong>不会插入</strong> 到链表中。</li><li><code>void deleteAtIndex(int index)</code> 如果下标有效，则删除链表中下标为 <code>index</code> 的节点。</li></ul><p>注意链表的自身属性size和head指针的变化，同时要注意不要对空指针赋值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LinkNode</span> &#123;</span><br><span class="line">    val</span><br><span class="line">    next = <span class="literal">null</span></span><br><span class="line">    <span class="title function_">constructor</span> (value) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">val</span> = value</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">next</span> = <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">MyLinkedList</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_size</span> = <span class="number">0</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_head</span> = <span class="literal">null</span> </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">index</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">MyLinkedList</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">get</span> = <span class="keyword">function</span> (<span class="params">index</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= <span class="variable language_">this</span>.<span class="property">_size</span> ) <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    <span class="keyword">let</span> cur = <span class="variable language_">this</span>.<span class="property">_head</span></span><br><span class="line">    <span class="keyword">while</span> (index) &#123;</span><br><span class="line">        cur = cur.<span class="property">next</span></span><br><span class="line">        index--</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cur.<span class="property">val</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">val</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">void</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">MyLinkedList</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">addAtHead</span> = <span class="keyword">function</span> (<span class="params">val</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> newNode = <span class="keyword">new</span> <span class="title class_">LinkNode</span>(val)</span><br><span class="line">    newNode.<span class="property">next</span> = <span class="variable language_">this</span>.<span class="property">_head</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_head</span> = newNode</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_size</span>++</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">val</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">void</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">MyLinkedList</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">addAtTail</span> = <span class="keyword">function</span> (<span class="params">val</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> dummyHead = <span class="keyword">new</span> <span class="title class_">LinkNode</span>(<span class="number">0</span>)</span><br><span class="line">    dummyHead.<span class="property">next</span> = <span class="variable language_">this</span>.<span class="property">_head</span></span><br><span class="line">    <span class="keyword">let</span> newNode = <span class="keyword">new</span> <span class="title class_">LinkNode</span>(val)</span><br><span class="line">    <span class="keyword">if</span>(!dummyHead.<span class="property">next</span>) &#123;</span><br><span class="line">        dummyHead.<span class="property">next</span> = newNode</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> cur = dummyHead.<span class="property">next</span></span><br><span class="line">        <span class="keyword">while</span>(cur.<span class="property">next</span>) &#123;</span><br><span class="line">            cur = cur.<span class="property">next</span></span><br><span class="line">        &#125;</span><br><span class="line">        newNode.<span class="property">next</span> = <span class="literal">null</span></span><br><span class="line">        cur.<span class="property">next</span> = newNode</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_size</span>++</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_head</span> = dummyHead.<span class="property">next</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; index </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">val</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">void</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">MyLinkedList</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">addAtIndex</span> = <span class="keyword">function</span> (<span class="params">index, val</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(index &gt; <span class="variable language_">this</span>.<span class="property">_size</span>) <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">let</span> dummyHead = <span class="keyword">new</span> <span class="title class_">LinkNode</span>(<span class="number">0</span>)</span><br><span class="line">    dummyHead.<span class="property">next</span> = <span class="variable language_">this</span>.<span class="property">_head</span></span><br><span class="line">    <span class="keyword">let</span> cur = dummyHead</span><br><span class="line">    <span class="keyword">while</span> (index--) &#123;</span><br><span class="line">        cur = cur.<span class="property">next</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> newNode = <span class="keyword">new</span> <span class="title class_">LinkNode</span>(val)</span><br><span class="line">    newNode.<span class="property">next</span> = cur.<span class="property">next</span></span><br><span class="line">    cur.<span class="property">next</span> = newNode</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_head</span> = dummyHead.<span class="property">next</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_size</span>++</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">index</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">void</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">MyLinkedList</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">deleteAtIndex</span> = <span class="keyword">function</span> (<span class="params">index</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt;= <span class="variable language_">this</span>.<span class="property">_size</span>) <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">let</span> dummyHead = <span class="keyword">new</span> <span class="title class_">LinkNode</span>(<span class="number">0</span>)</span><br><span class="line">    dummyHead.<span class="property">next</span> = <span class="variable language_">this</span>.<span class="property">_head</span></span><br><span class="line">    <span class="keyword">let</span> cur = dummyHead</span><br><span class="line">    <span class="keyword">while</span>(index) &#123;</span><br><span class="line">        cur = cur.<span class="property">next</span></span><br><span class="line">        index--</span><br><span class="line">    &#125;</span><br><span class="line">    cur.<span class="property">next</span> = cur.<span class="property">next</span>.<span class="property">next</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_head</span> = dummyHead.<span class="property">next</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_size</span>--</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MyLinkedList object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * var obj = new MyLinkedList()</span></span><br><span class="line"><span class="comment"> * var param_1 = obj.get(index)</span></span><br><span class="line"><span class="comment"> * obj.addAtHead(val)</span></span><br><span class="line"><span class="comment"> * obj.addAtTail(val)</span></span><br><span class="line"><span class="comment"> * obj.addAtIndex(index,val)</span></span><br><span class="line"><span class="comment"> * obj.deleteAtIndex(index)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> myLinkedList = <span class="keyword">new</span> <span class="title class_">MyLinkedList</span>();</span><br><span class="line">myLinkedList.<span class="title function_">addAtHead</span>(<span class="number">1</span>);</span><br><span class="line">myLinkedList.<span class="title function_">addAtTail</span>(<span class="number">3</span>);</span><br><span class="line">myLinkedList.<span class="title function_">addAtIndex</span>(<span class="number">1</span>, <span class="number">2</span>);    <span class="comment">// 链表变为 1-&gt;2-&gt;3</span></span><br><span class="line">myLinkedList.<span class="title function_">get</span>(<span class="number">1</span>);              <span class="comment">// 返回 2</span></span><br><span class="line">myLinkedList.<span class="title function_">deleteAtIndex</span>(<span class="number">1</span>);    <span class="comment">// 现在，链表变为 2-&gt;3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myLinkedList);</span><br><span class="line">    </span><br><span class="line">myLinkedList.<span class="title function_">get</span>(<span class="number">0</span>);              <span class="comment">// 返回 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myLinkedList);</span><br></pre></td></tr></table></figure><h2 id="翻转链表"><a href="#翻转链表" class="headerlink" title="翻转链表"></a>翻转链表</h2><h4 id="206-翻转链表"><a href="#206-翻转链表" class="headerlink" title="206 翻转链表"></a>206 翻转链表</h4><p>反转一个单链表</p><p>每次只操作两个节点</p><p>pre指向前一个节点，cur指向后一个节点</p><p>链表为空或只有一个节点时，返回head</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reverseList = <span class="keyword">function</span>(<span class="params">head</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(!head || !head.<span class="property">next</span>) <span class="keyword">return</span> head</span><br><span class="line">    <span class="keyword">let</span> cur = head</span><br><span class="line">    <span class="keyword">let</span> pre = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">while</span> (cur) &#123;</span><br><span class="line">        <span class="keyword">let</span> temp = cur.<span class="property">next</span></span><br><span class="line">        cur.<span class="property">next</span> = pre</span><br><span class="line">        pre = cur</span><br><span class="line">        cur = temp</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pre</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="两两交换链表的节点"><a href="#两两交换链表的节点" class="headerlink" title="两两交换链表的节点"></a>两两交换链表的节点</h2><h4 id="24-两两交换链表中的节点"><a href="#24-两两交换链表中的节点" class="headerlink" title="24 两两交换链表中的节点"></a>24 两两交换链表中的节点</h4><p>使用虚拟头节点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> swapPairs = <span class="keyword">function</span>(<span class="params">head</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> dummyHead = <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>, head)</span><br><span class="line">    <span class="keyword">let</span> cur = dummyHead</span><br><span class="line">    <span class="keyword">while</span>(cur.<span class="property">next</span> &amp;&amp; cur.<span class="property">next</span>.<span class="property">next</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> temp = cur.<span class="property">next</span></span><br><span class="line">        <span class="keyword">let</span> temp1 = cur.<span class="property">next</span>.<span class="property">next</span></span><br><span class="line">        <span class="keyword">let</span> temp2 = cur.<span class="property">next</span>.<span class="property">next</span>.<span class="property">next</span></span><br><span class="line">        cur.<span class="property">next</span> = temp1</span><br><span class="line">        temp1.<span class="property">next</span> = temp</span><br><span class="line">        temp.<span class="property">next</span> = temp2</span><br><span class="line">        cur = temp</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dummyHead.<span class="property">next</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="删除链表的第n个节点"><a href="#删除链表的第n个节点" class="headerlink" title="删除链表的第n个节点"></a>删除链表的第n个节点</h2><h4 id="19-删除链表的倒数第n个结点"><a href="#19-删除链表的倒数第n个结点" class="headerlink" title="19 删除链表的倒数第n个结点"></a>19 删除链表的倒数第n个结点</h4><p>重点在于使用双指针，一次实现找到倒数第n个</p><p>使用虚拟头节点</p><ol><li>先让fast移动n+1次</li><li>再同时移动slow和fast直到fast为null</li><li>这样slow就移动了 size - （n+1）次，刚好指向倒数第n个结点的前一个节点 可以执行删除操作</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> removeNthFromEnd = <span class="keyword">function</span>(<span class="params">head, n</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> dummyHead = <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>, head)</span><br><span class="line">    <span class="keyword">let</span> fast = dummyHead</span><br><span class="line">    <span class="keyword">let</span> slow = dummyHead</span><br><span class="line">    n++</span><br><span class="line">    <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">        fast = fast.<span class="property">next</span></span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">while</span> (fast) &#123;</span><br><span class="line">        fast = fast.<span class="property">next</span></span><br><span class="line">        slow = slow.<span class="property">next</span></span><br><span class="line">    &#125;</span><br><span class="line">    slow.<span class="property">next</span> = slow.<span class="property">next</span>.<span class="property">next</span></span><br><span class="line">    <span class="keyword">return</span> dummyHead.<span class="property">next</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="链表相交"><a href="#链表相交" class="headerlink" title="链表相交"></a>链表相交</h2><h4 id="160-链表相交"><a href="#160-链表相交" class="headerlink" title="160 链表相交"></a>160 链表相交</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.next = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">ListNode</span>&#125; <span class="variable">headA</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">ListNode</span>&#125; <span class="variable">headB</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">ListNode</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> getListLength = <span class="keyword">function</span>(<span class="params">head</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> len = <span class="number">0</span>, cur = head</span><br><span class="line">    <span class="keyword">while</span>(cur) &#123;</span><br><span class="line">        len++</span><br><span class="line">        cur = cur.<span class="property">next</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> len</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> getIntersectionNode = <span class="keyword">function</span>(<span class="params">headA, headB</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> lenA = <span class="title function_">getListLength</span>(headA)</span><br><span class="line">    <span class="keyword">let</span> lenB = <span class="title function_">getListLength</span>(headB)</span><br><span class="line">    <span class="keyword">let</span> curA = headA</span><br><span class="line">    <span class="keyword">let</span> curB = headB</span><br><span class="line">    <span class="keyword">if</span>(lenA &lt; lenB) &#123;</span><br><span class="line">        <span class="keyword">let</span> temp = curA</span><br><span class="line">        curA = curB</span><br><span class="line">        curB = temp</span><br><span class="line"></span><br><span class="line">        temp = lenA</span><br><span class="line">        lenA = lenB</span><br><span class="line">        lenB = temp</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> i = lenA - lenB</span><br><span class="line">    <span class="keyword">while</span>(i--) &#123;</span><br><span class="line">        curA = curA.<span class="property">next</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(curA &amp;&amp; curA !==curB) &#123;</span><br><span class="line">        curA = curA.<span class="property">next</span></span><br><span class="line">        curB = curB.<span class="property">next</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> curA</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="环形链表"><a href="#环形链表" class="headerlink" title="环形链表"></a>环形链表</h2><h4 id="142-环形链表"><a href="#142-环形链表" class="headerlink" title="142  环形链表"></a>142  环形链表</h4><p>题意： 给定一个链表，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。</p><p><strong>判断环</strong>？</p><p> 遍历链表过程中，如果指到null，就是有环，反之就是没有</p><p><strong>找出环的入口</strong></p><p>假设链表非环部分长度为a 环长度为b</p><p>设置快慢指针，快指针每次都比慢多移动一次，当二者相遇时，若慢指针移动次数为<code>s</code>，快指针<code>fast</code>移动次数为<code>s+nb</code>，由于快指针移动距离为慢指针2倍，所以<code>s等于nb</code>，慢指针移动了<code>nb</code></p><p>由于环的入口为<code>a + nb</code> ，所以只需让慢指针移动a即可，只需让fast再指向a，当fast和slow相遇时，即为所求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.next = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">ListNode</span>&#125; <span class="variable">head</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">ListNode</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> detectCycle = <span class="keyword">function</span>(<span class="params">head</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> fast = head</span><br><span class="line">    <span class="keyword">let</span> slow = head</span><br><span class="line">    <span class="keyword">while</span> (fast &amp;&amp; fast.<span class="property">next</span>) &#123;</span><br><span class="line">        fast = fast.<span class="property">next</span>.<span class="property">next</span></span><br><span class="line">        slow = slow.<span class="property">next</span></span><br><span class="line">        <span class="keyword">if</span>(slow === fast) &#123;</span><br><span class="line">            fast = head</span><br><span class="line">            <span class="keyword">while</span>(fast !== slow) &#123;</span><br><span class="line">                slow = slow.<span class="property">next</span></span><br><span class="line">                fast = fast.<span class="property">next</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> slow</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h1><h2 id="有效的字母异位词"><a href="#有效的字母异位词" class="headerlink" title="有效的字母异位词"></a>有效的字母异位词</h2><h4 id="242-有效的字母异位词"><a href="#242-有效的字母异位词" class="headerlink" title="242 有效的字母异位词"></a>242 有效的字母异位词</h4><p>数组也是一种哈希表</p><p>用空间存储换时间</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">s</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">t</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">boolean</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isAnagram = <span class="keyword">function</span>(<span class="params">s, t</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> checkArray = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">26</span>).<span class="title function_">fill</span>(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> char <span class="keyword">of</span> s) &#123;</span><br><span class="line">        <span class="keyword">const</span> index = char.<span class="title function_">charCodeAt</span>(<span class="number">0</span>) - <span class="string">&#x27;a&#x27;</span>.<span class="title function_">charCodeAt</span>(<span class="number">0</span>)</span><br><span class="line">        checkArray[index]++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> char <span class="keyword">of</span> t) &#123;</span><br><span class="line">        <span class="keyword">const</span> index = char.<span class="title function_">charCodeAt</span>(<span class="number">0</span>) - <span class="string">&#x27;a&#x27;</span>.<span class="title function_">charCodeAt</span>(<span class="number">0</span>)</span><br><span class="line">        checkArray[index]--</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> index <span class="keyword">in</span> checkArray) &#123;</span><br><span class="line">        <span class="keyword">if</span>(checkArray[index] !== <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span> </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="383-赎金信"><a href="#383-赎金信" class="headerlink" title="383 赎金信"></a>383 赎金信</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">ransomNote</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">magazine</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">boolean</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> canConstruct = <span class="keyword">function</span>(<span class="params">ransomNote, magazine</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> checkArray = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">128</span>).<span class="title function_">fill</span>(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span> (char <span class="keyword">of</span> ransomNote) &#123;</span><br><span class="line">        <span class="keyword">const</span> index = char.<span class="title function_">charCodeAt</span>(<span class="number">0</span>)</span><br><span class="line">        checkArray[index]++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (char <span class="keyword">of</span> magazine) &#123;</span><br><span class="line">        <span class="keyword">const</span> index = char.<span class="title function_">charCodeAt</span>(<span class="number">0</span>)</span><br><span class="line">        checkArray[index]--</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (index <span class="keyword">in</span> checkArray) &#123;</span><br><span class="line">        <span class="keyword">if</span>(checkArray[index] &gt; <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span> </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="49-字母异位词分组"><a href="#49-字母异位词分组" class="headerlink" title="49 字母异位词分组"></a>49 字母异位词分组</h4><p>map的键能够是任何类型</p><p>这里将经过排序后的字母异位词分组，起到了索引作用</p><p>题中用到了几个方法</p><p><code>Array.from(map.values)</code> 将哈希表的值转成数组</p><p><code>map.get(key)</code> 已知键，获得哈希表的值</p><p><code>map.set(key, value)</code> 设置哈希表的键值</p><p><code>map.values()</code> 获得哈希表值的迭代器，<code>迭代器</code>效果就和<code>let str of strs</code>里的 strs一样 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string[]</span>&#125; <span class="variable">strs</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">string[][]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> groupAnagrams = <span class="keyword">function</span>(<span class="params">strs</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> str <span class="keyword">of</span> strs) &#123;</span><br><span class="line">        <span class="keyword">let</span> array = str.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">let</span> key = array.<span class="title function_">sort</span>().<span class="title function_">toString</span>()</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(key)</span><br><span class="line">        <span class="keyword">let</span> value = map.<span class="title function_">get</span>(key) ? map.<span class="title function_">get</span>(key) : <span class="keyword">new</span> <span class="title class_">Array</span>()</span><br><span class="line">        value.<span class="title function_">push</span>(str)</span><br><span class="line">        map.<span class="title function_">set</span>(key, value)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Array</span>.<span class="title function_">from</span>(map.<span class="title function_">values</span>())</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="438-找到字符串中所有字母异位词"><a href="#438-找到字符串中所有字母异位词" class="headerlink" title="438 找到字符串中所有字母异位词"></a>438 找到字符串中所有字母异位词</h4><p>滑动窗口</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">s</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">p</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> checkStr = <span class="keyword">function</span>(<span class="params">sArray, pArray</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(sArray[i] !== pArray[i]) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> findAnagrams = <span class="keyword">function</span>(<span class="params">s, p</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(s.<span class="property">length</span> &lt; p.<span class="property">length</span>) <span class="keyword">return</span> []</span><br><span class="line">    <span class="keyword">let</span> sArray = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">26</span>).<span class="title function_">fill</span>(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">let</span> pArray = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">26</span>).<span class="title function_">fill</span>(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">let</span> num = []</span><br><span class="line">    <span class="keyword">let</span> start = <span class="number">0</span>, end = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> char <span class="keyword">of</span> p) &#123;</span><br><span class="line">        <span class="keyword">const</span> index = char.<span class="title function_">charCodeAt</span>(<span class="number">0</span>) - <span class="string">&#x27;a&#x27;</span>.<span class="title function_">charCodeAt</span>(<span class="number">0</span>)</span><br><span class="line">        pArray[index]++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (start &lt;= end &amp;&amp; end &lt; s.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (end + <span class="number">1</span> - start &lt; p.<span class="property">length</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> index = s[end].<span class="title function_">charCodeAt</span>(<span class="number">0</span>) - <span class="string">&#x27;a&#x27;</span>.<span class="title function_">charCodeAt</span>(<span class="number">0</span>)</span><br><span class="line">            sArray[index]++</span><br><span class="line">            end++</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(end + <span class="number">1</span> - start === p.<span class="property">length</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> index = s[end].<span class="title function_">charCodeAt</span>(<span class="number">0</span>) - <span class="string">&#x27;a&#x27;</span>.<span class="title function_">charCodeAt</span>(<span class="number">0</span>)</span><br><span class="line">            sArray[index]++</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_">checkStr</span>(sArray, pArray)) &#123;</span><br><span class="line">                num.<span class="title function_">push</span>(start)</span><br><span class="line">            &#125; </span><br><span class="line">            index = s[start].<span class="title function_">charCodeAt</span>(<span class="number">0</span>) - <span class="string">&#x27;a&#x27;</span>.<span class="title function_">charCodeAt</span>(<span class="number">0</span>)</span><br><span class="line">            sArray[index]--</span><br><span class="line">            start++</span><br><span class="line">            end++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="两个数组的交集"><a href="#两个数组的交集" class="headerlink" title="两个数组的交集"></a>两个数组的交集</h2><h4 id="349-两个数组的交集"><a href="#349-两个数组的交集" class="headerlink" title="349 两个数组的交集"></a>349 两个数组的交集</h4><p>给定两个数组，返回交集</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums1</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums2</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> intersection = <span class="keyword">function</span>(<span class="params">nums1, nums2</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> nums1Map = <span class="keyword">new</span> <span class="title class_">Set</span>(nums1)</span><br><span class="line">    <span class="keyword">let</span> res = <span class="keyword">new</span> <span class="title class_">Set</span>()</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> num <span class="keyword">of</span> nums2) &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums1Map.<span class="title function_">has</span>(num)) res.<span class="title function_">add</span>(num)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Array</span>.<span class="title function_">from</span>(res)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="350-两个数组的交集-II"><a href="#350-两个数组的交集-II" class="headerlink" title="350 两个数组的交集 II"></a>350 两个数组的交集 II</h4><p>给定两个数组，返回两个数组中都出现的数，次数是俩数组中较少的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums1</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums2</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> intersect = <span class="keyword">function</span>(<span class="params">nums1, nums2</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">    <span class="keyword">let</span> ans = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> num1 <span class="keyword">of</span> nums1) &#123;</span><br><span class="line">        <span class="keyword">if</span>(res.<span class="title function_">has</span>(num1)) &#123;</span><br><span class="line">            <span class="keyword">let</span> value = res.<span class="title function_">get</span>(num1)</span><br><span class="line">            value++</span><br><span class="line">            res.<span class="title function_">set</span>(num1, value)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.<span class="title function_">set</span>(num1, <span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> num2 <span class="keyword">of</span> nums2) &#123;</span><br><span class="line">        <span class="keyword">let</span> value = res.<span class="title function_">get</span>(num2)</span><br><span class="line">        <span class="keyword">if</span>(res.<span class="title function_">has</span>(num2)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(value &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                ans.<span class="title function_">push</span>(num2)</span><br><span class="line">                value--</span><br><span class="line">                res.<span class="title function_">set</span>(num2, value)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="快乐数"><a href="#快乐数" class="headerlink" title="快乐数"></a>快乐数</h2><h4 id="202-快乐数"><a href="#202-快乐数" class="headerlink" title="202 快乐数"></a>202 快乐数</h4><p>如果在过程中，得到了之前变过的数，就不是快乐数，用set存放变过的数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">n</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">boolean</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> trans = <span class="keyword">function</span> (<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> i = n % <span class="number">10</span></span><br><span class="line">        sum += i * i</span><br><span class="line">        n = <span class="title class_">Math</span>.<span class="title function_">floor</span>(n / <span class="number">10</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> isHappy = <span class="keyword">function</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="keyword">new</span> <span class="title class_">Set</span>([n])</span><br><span class="line">    <span class="keyword">while</span>(n !== <span class="number">1</span>)&#123;</span><br><span class="line">        n = <span class="title function_">trans</span>(n)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(n)</span><br><span class="line">        <span class="keyword">if</span>(res.<span class="title function_">has</span>(n)) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        <span class="keyword">else</span> res.<span class="title function_">add</span>(n)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="两数之和"><a href="#两数之和" class="headerlink" title="两数之和"></a>两数之和</h2><h4 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1 两数之和"></a>1 两数之和</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">target</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> twoSum = <span class="keyword">function</span>(<span class="params">nums, target</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> index = nums[i]</span><br><span class="line">        <span class="keyword">let</span> value = i</span><br><span class="line">        <span class="keyword">let</span> key = target - index</span><br><span class="line">        <span class="keyword">if</span>(map.<span class="title function_">has</span>(key)) <span class="keyword">return</span> [map.<span class="title function_">get</span>(key), value]</span><br><span class="line">        <span class="keyword">else</span> map.<span class="title function_">set</span>(index, value)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="四数相加II"><a href="#四数相加II" class="headerlink" title="四数相加II"></a>四数相加II</h2><h4 id="454-四数相加"><a href="#454-四数相加" class="headerlink" title="454 四数相加"></a>454 四数相加</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums1</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums2</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums3</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums4</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> fourSumCount = <span class="keyword">function</span>(<span class="params">nums1, nums2, nums3, nums4</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">    <span class="keyword">let</span> res = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> a <span class="keyword">of</span> nums1) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> b <span class="keyword">of</span> nums2) &#123;</span><br><span class="line">            <span class="keyword">let</span> value = a + b</span><br><span class="line">            <span class="keyword">if</span>(map.<span class="title function_">has</span>(value)) map.<span class="title function_">set</span>(value, map.<span class="title function_">get</span>(value) + <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">else</span> map.<span class="title function_">set</span>(value, <span class="number">1</span>)    </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> c <span class="keyword">of</span> nums3) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> d <span class="keyword">of</span> nums4) &#123;</span><br><span class="line">            <span class="keyword">let</span> value = <span class="number">0</span> - c - d</span><br><span class="line">            <span class="keyword">if</span>(map.<span class="title function_">has</span>(value)) res += map.<span class="title function_">get</span>(value)    </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;      </span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="三数之和"><a href="#三数之和" class="headerlink" title="三数之和"></a>三数之和</h2><h4 id="15-三数之和"><a href="#15-三数之和" class="headerlink" title="15 三数之和"></a>15 三数之和</h4><p>双指针，注意去重</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[][]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> threeSum = <span class="keyword">function</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">    nums.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b)</span><br><span class="line">    <span class="keyword">let</span> res = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] &gt; <span class="number">0</span>) <span class="keyword">return</span> res</span><br><span class="line">        <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] === nums[i - <span class="number">1</span>]) <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">let</span> left = i + <span class="number">1</span></span><br><span class="line">        <span class="keyword">let</span> right = nums.<span class="property">length</span> - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="keyword">let</span> sum = nums[left] + nums[right]</span><br><span class="line">            <span class="keyword">let</span> target = <span class="number">0</span> - nums[i]</span><br><span class="line">            <span class="comment">// console.log(sum, target)</span></span><br><span class="line">            <span class="keyword">if</span>(sum &gt; target) right--</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(sum &lt; target) left++</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                res.<span class="title function_">push</span>([nums[i], nums[left], nums[right]])</span><br><span class="line">                left++</span><br><span class="line">                <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[left] === nums[left - <span class="number">1</span>]) &#123;</span><br><span class="line">                    left++</span><br><span class="line">                &#125;</span><br><span class="line">                right--</span><br><span class="line">                <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[right] === nums[right + <span class="number">1</span>]) &#123;</span><br><span class="line">                    right--</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="四树之和"><a href="#四树之和" class="headerlink" title="四树之和"></a>四树之和</h2><h4 id="18-四数之和"><a href="#18-四数之和" class="headerlink" title="18 四数之和"></a>18 四数之和</h4><p>同理，注意剪枝和去重</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">target</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[][]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> fourSum = <span class="keyword">function</span>(<span class="params">nums, target</span>) &#123;</span><br><span class="line">    nums.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b)</span><br><span class="line">    <span class="keyword">let</span> res = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> k = <span class="number">0</span>; k &lt; nums.<span class="property">length</span>; k++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[k] &gt; target &amp;&amp; target &gt; <span class="number">0</span>) <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span>(k &gt; <span class="number">0</span> &amp;&amp; nums[k] === nums[k - <span class="number">1</span>]) <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = k + <span class="number">1</span>; i &lt; nums.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] + nums[k] &gt; target &amp;&amp; target &gt; <span class="number">0</span>) <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span>(i &gt; k + <span class="number">1</span> &amp;&amp; nums[i] === nums[i - <span class="number">1</span>]) <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">let</span> left = i + <span class="number">1</span></span><br><span class="line">            <span class="keyword">let</span> right = nums.<span class="property">length</span> - <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span>(left &lt; right) &#123;</span><br><span class="line">                <span class="keyword">let</span> sum1 = nums[left] + nums[right]</span><br><span class="line">                <span class="keyword">let</span> sum2 = target - nums[k] - nums[i]</span><br><span class="line">                <span class="keyword">if</span>(sum1 &gt; sum2) right--</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(sum1 &lt; sum2) left++</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    res.<span class="title function_">push</span>([nums[k], nums[i], nums[left], nums[right]])</span><br><span class="line">                    left++</span><br><span class="line">                    <span class="keyword">while</span>(left &lt; right &amp;&amp; nums[left] === nums[left - <span class="number">1</span>]) &#123;</span><br><span class="line">                        left++</span><br><span class="line">                    &#125;</span><br><span class="line">                    right--</span><br><span class="line">                    <span class="keyword">while</span>(left &lt; right &amp;&amp; nums[right] === nums[right + <span class="number">1</span>]) &#123;</span><br><span class="line">                        right--</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; </span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><h2 id="反转字符串"><a href="#反转字符串" class="headerlink" title="反转字符串"></a>反转字符串</h2><h4 id="344-反转字符串"><a href="#344-反转字符串" class="headerlink" title="344 反转字符串"></a>344 反转字符串</h4><p>双指针</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">character[]</span>&#125; <span class="variable">s</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">void</span>&#125; Do not return anything, modify s in-place instead.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> reverseString = <span class="keyword">function</span>(<span class="params">s</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> start = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> end = s.<span class="property">length</span> - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> (start &lt; end) &#123;</span><br><span class="line">        <span class="keyword">let</span> temp = s[start]</span><br><span class="line">        s[start] = s[end]</span><br><span class="line">        s[end] = temp</span><br><span class="line">        start++</span><br><span class="line">        end--</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="反转字符串II"><a href="#反转字符串II" class="headerlink" title="反转字符串II"></a>反转字符串II</h2><h4 id="541-反转字符串"><a href="#541-反转字符串" class="headerlink" title="541 反转字符串"></a>541 反转字符串</h4><p>只反转每2*k的k部分</p><p>最后如果要反转的小于k，就反转剩余</p><p>最后如果要反转的大于k小于2*k，就反转前k部分</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">s</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">k</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">string</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> reverse = <span class="keyword">function</span>(<span class="params">s, start, end</span>) &#123;</span><br><span class="line">    s = <span class="title class_">Array</span>.<span class="title function_">from</span>(s)</span><br><span class="line">    <span class="keyword">while</span>(end &gt; start) &#123;</span><br><span class="line">        <span class="keyword">let</span> temp = s[end]</span><br><span class="line">        s[end] = s[start]</span><br><span class="line">        s[start] = temp</span><br><span class="line">        start++</span><br><span class="line">        end--</span><br><span class="line">    &#125;</span><br><span class="line">    s = s.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> reverseStr = <span class="keyword">function</span>(<span class="params">s, k</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; s.<span class="property">length</span>; i += <span class="number">2</span> * k) &#123;</span><br><span class="line">        <span class="keyword">if</span>(i + k - <span class="number">1</span> &lt;= s.<span class="property">length</span> - <span class="number">1</span>) &#123;</span><br><span class="line">            s = <span class="title function_">reverse</span>(s, i , i + k - <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">        s = <span class="title function_">reverse</span>(s, i, s.<span class="property">length</span> - <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="替换数字"><a href="#替换数字" class="headerlink" title="替换数字"></a>替换数字</h2><p>不开额外数组，在原数组上进行改动</p><p><a href="https://kamacoder.com/problempage.php?pid=1064">题目链接</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> readline = <span class="built_in">require</span>(<span class="string">&#x27;readline&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> rl = readline.<span class="title function_">createInterface</span>(&#123;</span><br><span class="line">    <span class="attr">input</span>: process.<span class="property">stdin</span>,</span><br><span class="line">    <span class="attr">output</span>: process.<span class="property">stdout</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span> () &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">isAz</span> = str =&gt; str &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; str &lt;= <span class="string">&#x27;z&#x27;</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">isNumber</span> = str =&gt; str &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; str &lt;= <span class="string">&#x27;9&#x27;</span></span><br><span class="line">    rl.<span class="title function_">on</span>(<span class="string">&#x27;line&#x27;</span>, <span class="function"><span class="params">line</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> n = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; line.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">let</span> str = line[i]</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_">isAz</span>(str)) n++</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_">isNumber</span>(str)) n += <span class="number">6</span></span><br><span class="line">        &#125;</span><br><span class="line">        line = <span class="title class_">Array</span>.<span class="title function_">from</span>(line)</span><br><span class="line">        <span class="keyword">let</span> index = line.<span class="property">length</span> - <span class="number">1</span></span><br><span class="line">        line.<span class="property">length</span> = n</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">let</span> str = line[index]</span><br><span class="line">            <span class="keyword">if</span>(<span class="title function_">isAz</span>(str)) line[i] = str</span><br><span class="line">            <span class="keyword">if</span>(<span class="title function_">isNumber</span>(str)) &#123;</span><br><span class="line">                line[i] = <span class="string">&#x27;r&#x27;</span></span><br><span class="line">                line[i - <span class="number">1</span>] = <span class="string">&#x27;e&#x27;</span></span><br><span class="line">                line[i - <span class="number">2</span>] = <span class="string">&#x27;b&#x27;</span></span><br><span class="line">                line[i - <span class="number">3</span>] = <span class="string">&#x27;m&#x27;</span></span><br><span class="line">                line[i - <span class="number">4</span>] = <span class="string">&#x27;u&#x27;</span></span><br><span class="line">                line[i - <span class="number">5</span>] = <span class="string">&#x27;n&#x27;</span></span><br><span class="line">                i -= <span class="number">5</span></span><br><span class="line">            &#125;</span><br><span class="line">            index--</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(line.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>))</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">main</span>()</span><br></pre></td></tr></table></figure><h4 id="151-反转字符串的单词"><a href="#151-反转字符串的单词" class="headerlink" title="151 反转字符串的单词"></a>151 反转字符串的单词</h4><p>思路</p><ol><li>翻转整个字符串</li><li>去除多余空格</li><li>翻转字符串中的每个单词</li></ol><p>利用双指针，打到时间复杂度O(n)，空间复杂度O(1)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">s</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">string</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 左闭右开</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">reverse</span> = (<span class="params">s, start, end</span>) =&gt; &#123;</span><br><span class="line">    s = <span class="title class_">Array</span>.<span class="title function_">from</span>(s)</span><br><span class="line">    end = end - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> (start &lt; end) &#123;</span><br><span class="line">        <span class="keyword">let</span> temp = s[start]</span><br><span class="line">        s[start] = s[end]</span><br><span class="line">        s[end]= temp</span><br><span class="line">        start++</span><br><span class="line">        end--</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">removeSpace</span> = s =&gt; &#123;</span><br><span class="line">    s = <span class="title class_">Array</span>.<span class="title function_">from</span>(s)</span><br><span class="line">    <span class="keyword">let</span> slow = <span class="number">0</span>, fast = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(fast &lt; s.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(s[fast] === <span class="string">&#x27; &#x27;</span> &amp;&amp; (slow === <span class="number">0</span> || s[slow - <span class="number">1</span>] === <span class="string">&#x27; &#x27;</span>)) &#123;</span><br><span class="line">            fast++</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            s[slow++] = s[fast++]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    s.<span class="property">length</span> = s[slow - <span class="number">1</span>] === <span class="string">&#x27; &#x27;</span> ? slow - <span class="number">1</span> : slow</span><br><span class="line">    <span class="keyword">return</span> s.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> reverseWords = <span class="keyword">function</span>(<span class="params">s</span>) &#123;</span><br><span class="line">    s = <span class="title function_">reverse</span>(s, <span class="number">0</span>, s.<span class="property">length</span>)</span><br><span class="line">    s = <span class="title function_">removeSpace</span>(s)</span><br><span class="line">    <span class="keyword">let</span> slow = <span class="number">0</span>, fast = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> (fast &lt; s.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(s[fast] === <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line">            s = <span class="title function_">reverse</span>(s, slow, fast)</span><br><span class="line">            slow = fast + <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        fast++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(fast === s.<span class="property">length</span>) s = <span class="title function_">reverse</span>(s, slow, fast)</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// console.log(reverse(&#x27;winter is home again&#x27;,0,7))</span></span><br><span class="line"><span class="comment">// console.log(removeSpace(&#x27;  winter    is home again    &#x27;))</span></span><br><span class="line"><span class="comment">// console.log(reverseWords(&#x27;the sky is blue&#x27;))</span></span><br></pre></td></tr></table></figure><h2 id="右旋转字符串"><a href="#右旋转字符串" class="headerlink" title="右旋转字符串"></a>右旋转字符串</h2><p><a href="https://kamacoder.com/problempage.php?pid=1065">题目链接</a></p><p>思路：</p><p>先反转字符串，再反转前部分和后部分即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> readline = <span class="built_in">require</span>(<span class="string">&#x27;readline&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> rl = readline.<span class="title function_">createInterface</span>(&#123;</span><br><span class="line">    <span class="attr">input</span>: process.<span class="property">stdin</span>,</span><br><span class="line">    <span class="attr">output</span>: process.<span class="property">stdout</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">reverse</span>  = (<span class="params">s, start, end</span>) =&gt; &#123;</span><br><span class="line">    s = <span class="title class_">Array</span>.<span class="title function_">from</span>(s)</span><br><span class="line">    end--</span><br><span class="line">    <span class="keyword">while</span> (start &lt; end) &#123;</span><br><span class="line">        <span class="keyword">let</span> temp = s[start]</span><br><span class="line">        s[start] = s[end]</span><br><span class="line">        s[end] = temp</span><br><span class="line">        start++</span><br><span class="line">        end--</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">main</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> input = []</span><br><span class="line">    rl.<span class="title function_">on</span>(<span class="string">&#x27;line&#x27;</span>, <span class="function"><span class="params">line</span> =&gt;</span> &#123;</span><br><span class="line">        input.<span class="title function_">push</span>(line)</span><br><span class="line">    &#125;)</span><br><span class="line">    rl.<span class="title function_">on</span>(<span class="string">&#x27;close&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> k = input[<span class="number">0</span>] - <span class="string">&#x27;0&#x27;</span></span><br><span class="line">        <span class="keyword">let</span> s = input[<span class="number">1</span>]</span><br><span class="line">        s = <span class="title function_">reverse</span>(s, <span class="number">0</span>, s.<span class="property">length</span>)</span><br><span class="line">        s = <span class="title function_">reverse</span>(s, <span class="number">0</span>, k)</span><br><span class="line">        s = <span class="title function_">reverse</span>(s, k, s.<span class="property">length</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(s)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">main</span>()</span><br></pre></td></tr></table></figure><h2 id="kmp子串匹配"><a href="#kmp子串匹配" class="headerlink" title="kmp子串匹配"></a>kmp子串匹配</h2><h4 id="28-找出字符串中第一个匹配的下标"><a href="#28-找出字符串中第一个匹配的下标" class="headerlink" title="28 找出字符串中第一个匹配的下标"></a>28 找出字符串中第一个匹配的下标</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">haystack</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">needle</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getNext</span> = (<span class="params">s</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> next = <span class="keyword">new</span> <span class="title class_">Array</span>(s.<span class="property">length</span>).<span class="title function_">fill</span>(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">let</span> j = <span class="number">0</span>, i = <span class="number">1</span></span><br><span class="line">    next[j] = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; s.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (s[i] !== s[j] &amp;&amp; j &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            j = next[j - <span class="number">1</span>]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (s[i] === s[j]) &#123;</span><br><span class="line">            j++</span><br><span class="line">        &#125;</span><br><span class="line">        next[i] = j </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> next</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> strStr = <span class="keyword">function</span>(<span class="params">haystack, needle</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> next = <span class="title function_">getNext</span>(needle)</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span>, j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; haystack.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (haystack[i] !== needle[j] &amp;&amp; j &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            j = next[j - <span class="number">1</span>]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(haystack[i] === needle[j]) &#123;</span><br><span class="line">            j++</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(j === needle.<span class="property">length</span>) <span class="keyword">return</span> i - needle.<span class="property">length</span> + <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="重复的子字符串"><a href="#重复的子字符串" class="headerlink" title="重复的子字符串"></a>重复的子字符串</h2><h4 id="451-重复的子字符串"><a href="#451-重复的子字符串" class="headerlink" title="451 重复的子字符串"></a>451 重复的子字符串</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">s</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">boolean</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getNext</span> = (<span class="params">s</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> next = <span class="title class_">Array</span>(s.<span class="property">length</span>).<span class="title function_">fill</span>(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">let</span> j = <span class="number">0</span>, i = <span class="number">1</span></span><br><span class="line">    next[<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; s.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; s[i] !== s[j]) &#123;</span><br><span class="line">            j = next[j - <span class="number">1</span>]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (s[i] === s[j]) j++</span><br><span class="line">        next[i] = j</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> next</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">find</span> = (<span class="params">s, son</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> next = <span class="title function_">getNext</span>(son)</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span>, j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; s.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (s[i] !== son[j] &amp;&amp; j &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            j = next[j - <span class="number">1</span>]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (s[i] === son[j]) j++</span><br><span class="line">        <span class="keyword">if</span>(j === son.<span class="property">length</span>) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> repeatedSubstringPattern = <span class="keyword">function</span>(<span class="params">s</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> newS = s + s</span><br><span class="line">    newS = newS.<span class="title function_">substring</span>(<span class="number">1</span>, newS.<span class="property">length</span> - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">find</span>(newS, s)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// repeatedSubstringPattern(&#x27;abaababaab&#x27;)</span></span><br></pre></td></tr></table></figure><h1 id="栈与队列"><a href="#栈与队列" class="headerlink" title="栈与队列"></a>栈与队列</h1><h2 id="用栈模拟队列"><a href="#用栈模拟队列" class="headerlink" title="用栈模拟队列"></a>用栈模拟队列</h2><h4 id="232-用栈实现队列"><a href="#232-用栈实现队列" class="headerlink" title="232 用栈实现队列"></a>232 用栈实现队列</h4><p><strong>思路</strong></p><ol><li>用两个栈模拟队列，一个进栈，一个出栈</li><li>执行入队列操作时，只从进栈入</li><li>执行出队列操作时，先将进栈的元素全部出到出栈，再对出栈进行<code>pop</code>操作</li><li>执行看队头操作时，执行出队列操作，再将队头元素压入出栈，并返回队头元素</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">MyQueue</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">stackIn</span> = []</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">stackOut</span> = []</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">x</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">void</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">MyQueue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">push</span> = <span class="keyword">function</span>(<span class="params">x</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">stackIn</span>.<span class="title function_">push</span>(x)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">MyQueue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">pop</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> size = <span class="variable language_">this</span>.<span class="property">stackOut</span>.<span class="property">length</span></span><br><span class="line">    <span class="keyword">if</span> (size) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">stackOut</span>.<span class="title function_">pop</span>()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="variable language_">this</span>.<span class="property">stackIn</span>.<span class="property">length</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> x = <span class="variable language_">this</span>.<span class="property">stackIn</span>.<span class="title function_">pop</span>()</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">stackOut</span>.<span class="title function_">push</span>(x)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">stackOut</span>.<span class="title function_">pop</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">MyQueue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">peek</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="variable language_">this</span>.<span class="title function_">pop</span>()</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">stackOut</span>.<span class="title function_">push</span>(x)</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">boolean</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">MyQueue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">empty</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> !<span class="variable language_">this</span>.<span class="property">stackIn</span>.<span class="property">length</span> &amp;&amp; !<span class="variable language_">this</span>.<span class="property">stackOut</span>.<span class="property">length</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="用队列模拟栈"><a href="#用队列模拟栈" class="headerlink" title="用队列模拟栈"></a>用队列模拟栈</h2><h4 id="225-用队列实现栈"><a href="#225-用队列实现栈" class="headerlink" title="225 用队列实现栈"></a>225 用队列实现栈</h4><p><strong>思路</strong></p><ol><li><p>用一个队列模拟栈</p></li><li><p>执行出栈操作时，将前面 <code>n - 1</code>个元素出队列，再进对列</p><p>将队首元素出队列即可</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">MyStack</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">queue</span> = []</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">x</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">void</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">MyStack</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">push</span> = <span class="keyword">function</span>(<span class="params">x</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">queue</span>.<span class="title function_">push</span>(x)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">MyStack</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">pop</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> size = <span class="variable language_">this</span>.<span class="property">queue</span>.<span class="property">length</span></span><br><span class="line">    size--</span><br><span class="line">    <span class="keyword">while</span> (size--) &#123;</span><br><span class="line">        <span class="keyword">let</span> x = <span class="variable language_">this</span>.<span class="property">queue</span>.<span class="title function_">shift</span>()</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">queue</span>.<span class="title function_">push</span>(x)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">queue</span>.<span class="title function_">shift</span>()</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">MyStack</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">top</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="variable language_">this</span>.<span class="title function_">pop</span>()</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">push</span>(x)</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">boolean</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">MyStack</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">empty</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> !<span class="variable language_">this</span>.<span class="property">queue</span>.<span class="property">length</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="有效的括号"><a href="#有效的括号" class="headerlink" title="有效的括号"></a>有效的括号</h2><h4 id="20-有效的括号"><a href="#20-有效的括号" class="headerlink" title="20 有效的括号"></a>20 有效的括号</h4><p><strong>思路</strong></p><ol><li><p>遍历时，左括号全部进栈</p></li><li><p>遍历右括号时，匹配则出栈，不匹配或者栈为空则无效</p></li><li><p>最后栈为空有效，不为空无效</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">s</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">boolean</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">stackTop</span> = (<span class="params">stack</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> x = stack.<span class="title function_">pop</span>()</span><br><span class="line">    stack.<span class="title function_">push</span>(x)</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">stackEmpty</span> = (<span class="params">stack</span>) =&gt; !stack.<span class="property">length</span></span><br><span class="line"><span class="keyword">var</span> isValid = <span class="keyword">function</span>(<span class="params">s</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (s.<span class="property">length</span> % <span class="number">2</span> !== <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">let</span> stack = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; s.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i] === <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">            stack.<span class="title function_">push</span>(<span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s[i] === <span class="string">&#x27;[&#x27;</span>) &#123;</span><br><span class="line">            stack.<span class="title function_">push</span>(<span class="string">&#x27;]&#x27;</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s[i] === <span class="string">&#x27;&#123;&#x27;</span>) &#123;</span><br><span class="line">            stack.<span class="title function_">push</span>(<span class="string">&#x27;&#125;&#x27;</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="title function_">stackEmpty</span>(stack) &amp;&amp; <span class="title function_">stackTop</span>(stack) === s[i]) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(stack)</span><br><span class="line">                stack.<span class="title function_">pop</span>()</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(stack)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">stackEmpty</span>(stack)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="逆波兰表达式求值"><a href="#逆波兰表达式求值" class="headerlink" title="逆波兰表达式求值"></a>逆波兰表达式求值</h2><h4 id="150-逆波兰表达式求值"><a href="#150-逆波兰表达式求值" class="headerlink" title="150 逆波兰表达式求值"></a>150 逆波兰表达式求值</h4><p>也是栈的一个经典应用 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string[]</span>&#125; <span class="variable">tokens</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> evalRPN = <span class="keyword">function</span>(<span class="params">tokens</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> stack = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; tokens.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isNaN</span>(tokens[i] - <span class="string">&#x27;0&#x27;</span>)) &#123;</span><br><span class="line">            <span class="keyword">let</span> num1 = stack.<span class="title function_">pop</span>()</span><br><span class="line">            <span class="keyword">let</span> num2 = stack.<span class="title function_">pop</span>()</span><br><span class="line">            <span class="keyword">if</span> (tokens[i] === <span class="string">&#x27;+&#x27;</span>) &#123;</span><br><span class="line">                stack.<span class="title function_">push</span>(num2 + num1)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (tokens[i] === <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">                stack.<span class="title function_">push</span>(num2 - num1)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (tokens[i] === <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">                stack.<span class="title function_">push</span>(<span class="title class_">Math</span>.<span class="title function_">trunc</span>(num2 / num1))</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (tokens[i] === <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">                stack.<span class="title function_">push</span>(num2 * num1)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            stack.<span class="title function_">push</span>(tokens[i] - <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// console.log(stack)</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> stack.<span class="title function_">pop</span>()</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// console.log(evalRPN([&quot;2&quot;,&quot;1&quot;,&quot;+&quot;,&quot;3&quot;,&quot;*&quot;]))</span></span><br></pre></td></tr></table></figure><h2 id="滑动窗口的最大值"><a href="#滑动窗口的最大值" class="headerlink" title="滑动窗口的最大值"></a>滑动窗口的最大值</h2><h4 id="239-滑动窗口最大值"><a href="#239-滑动窗口最大值" class="headerlink" title="239 滑动窗口最大值"></a>239 滑动窗口最大值</h4><p><strong>单调队列求解</strong></p><p><strong>思路</strong></p><ul><li>构建一个单调队列，队列有如下特点<ol><li>队首到队尾单调递减</li><li>元素入队时如果队列中有小于自己的元素，直接剔除</li><li>元素出队时，只出队首的最大元素</li></ol></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">k</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MonoQueue</span> &#123;</span><br><span class="line">    queue</span><br><span class="line">    <span class="title function_">constructor</span> () &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">queue</span> = []</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">Empty</span> = <span class="function">() =&gt;</span> !<span class="variable language_">this</span>.<span class="property">queue</span>.<span class="property">length</span></span><br><span class="line">    <span class="title class_">Back</span> = <span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="property">queue</span>[<span class="variable language_">this</span>.<span class="property">queue</span>.<span class="property">length</span> - <span class="number">1</span>]</span><br><span class="line">    enqueue = <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (!<span class="variable language_">this</span>.<span class="title class_">Empty</span>() &amp;&amp; value &gt; <span class="variable language_">this</span>.<span class="title class_">Back</span>()) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">queue</span>.<span class="title function_">pop</span>()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">queue</span>.<span class="title function_">push</span>(value)</span><br><span class="line">    &#125;</span><br><span class="line">    dequeue = <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title class_">Front</span>() === value) <span class="variable language_">this</span>.<span class="property">queue</span>.<span class="title function_">shift</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">Front</span> = <span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="property">queue</span>[<span class="number">0</span>]</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">var</span> maxSlidingWindow = <span class="keyword">function</span>(<span class="params">nums, k</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> start = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> end = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> queue = <span class="keyword">new</span> <span class="title class_">MonoQueue</span>()</span><br><span class="line">    <span class="keyword">let</span> ans = []</span><br><span class="line">    <span class="keyword">while</span> (end &lt; k) &#123;</span><br><span class="line">        queue.<span class="title function_">enqueue</span>(nums[end])</span><br><span class="line">        end++</span><br><span class="line">    &#125;</span><br><span class="line">    ans.<span class="title function_">push</span>(queue.<span class="title class_">Front</span>())</span><br><span class="line">    <span class="keyword">while</span> (end &lt; nums.<span class="property">length</span>) &#123;</span><br><span class="line">        queue.<span class="title function_">enqueue</span>(nums[end])</span><br><span class="line">        queue.<span class="title function_">dequeue</span>(nums[start])</span><br><span class="line">        ans.<span class="title function_">push</span>(queue.<span class="title class_">Front</span>())</span><br><span class="line">        start++</span><br><span class="line">        end++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// console.log(ans)</span></span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// maxSlidingWindow([1,3,-1,-3,5,3,6,7], 3)</span></span><br></pre></td></tr></table></figure><h2 id="前k个高频元素"><a href="#前k个高频元素" class="headerlink" title="前k个高频元素"></a>前k个高频元素</h2><h4 id="347-前k个高频元素"><a href="#347-前k个高频元素" class="headerlink" title="347 前k个高频元素"></a>347 前k个高频元素</h4><p><strong>解法1</strong> </p><p>利用哈希表map和排序</p><p>间复杂度O(nlogn) 空间复杂度O(n)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">k</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> topKFrequent = <span class="keyword">function</span>(<span class="params">nums, k</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i =<span class="number">0</span>; i &lt; nums.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> key = nums[i]</span><br><span class="line">        map.<span class="title function_">set</span>(key, (map.<span class="title function_">get</span>(key) || <span class="number">0</span>) + <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> arr = [...map]</span><br><span class="line">    arr.<span class="title function_">sort</span>(<span class="function">(<span class="params">a,b</span>) =&gt;</span> b[<span class="number">1</span>] - a[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">let</span> ans = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">        ans.<span class="title function_">push</span>(arr[i][<span class="number">0</span>])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>解法2</strong></p><p>小顶堆： 二叉树的父节点小于其子节点</p><p>大顶堆： 二叉树的父节点大于其子节点</p><p>使用<strong>优先级队列</strong>，手写堆实现优先级队列</p><ul><li>先用哈希表map存储元素key和元素出现次数value</li><li>再利用小顶堆，将元素进k次，并将多余元素排除</li><li>最后全部将优先级队列剩下的k个元素全部出队即可得到结果</li></ul><p>写堆时需要注意的地方</p><ul><li><p>构造器的compare函数，使用传的参数<code>compareFn</code>决定了是大顶堆还是小顶堆，大于0时才交换，小于0时不交换</p></li><li><p>当执行<code>enqueue</code> 操作时，将数据推入队列末尾，同时进行<strong>上浮</strong>操作</p><blockquote><p>上浮：二叉树里，当前元素和父元素对比，如果小（对于小顶堆而言）则进行上浮，否则则找到了对应的位置</p></blockquote></li><li><p>当执行<code>dequeue</code>操作时，保留队首元素并之后返回，并将队尾元素放到队首，进行<strong>下沉</strong>操作，</p><blockquote><p>下沉：二叉树里，当前元素和较小（小顶堆而言）子元素对比，如果大（对于小顶堆而言），则进行下沉，否则则找到了对应的位置</p></blockquote></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">k</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Heap</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span> (compareFn) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">compareFn</span> = compareFn</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">queue</span> = [] </span><br><span class="line">    &#125;</span><br><span class="line">    size = <span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="property">queue</span>.<span class="property">length</span></span><br><span class="line">    compare = <span class="function">(<span class="params">index1, index2</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">queue</span>[index1] === <span class="literal">undefined</span>) <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">queue</span>[index2] === <span class="literal">undefined</span>) <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">compareFn</span>(<span class="variable language_">this</span>.<span class="property">queue</span>[index1], <span class="variable language_">this</span>.<span class="property">queue</span>[index2])</span><br><span class="line">    &#125;</span><br><span class="line">    enqueue = <span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">queue</span>.<span class="title function_">push</span>(item)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 进行上浮操作</span></span><br><span class="line">        <span class="keyword">let</span> index = <span class="variable language_">this</span>.<span class="title function_">size</span>() - <span class="number">1</span></span><br><span class="line">        <span class="keyword">let</span> parent = <span class="title class_">Math</span>.<span class="title function_">floor</span>((index - <span class="number">1</span>) / <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">while</span> (parent &gt;= <span class="number">0</span> &amp;&amp; <span class="variable language_">this</span>.<span class="title function_">compare</span>(parent, index) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            [<span class="variable language_">this</span>.<span class="property">queue</span>[index], <span class="variable language_">this</span>.<span class="property">queue</span>[parent]] = [<span class="variable language_">this</span>.<span class="property">queue</span>[parent], <span class="variable language_">this</span>.<span class="property">queue</span>[index]]</span><br><span class="line">            index = parent</span><br><span class="line">            parent = <span class="title class_">Math</span>.<span class="title function_">floor</span>((index - <span class="number">1</span>) / <span class="number">2</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dequeue = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">size</span>() &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">queue</span>.<span class="title function_">pop</span>()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> outer = <span class="variable language_">this</span>.<span class="property">queue</span>[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">queue</span>[<span class="number">0</span>] = <span class="variable language_">this</span>.<span class="property">queue</span>.<span class="title function_">pop</span>()</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 进行下沉操作</span></span><br><span class="line">        <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">        <span class="keyword">let</span> left = <span class="number">2</span> * index + <span class="number">1</span></span><br><span class="line">        <span class="keyword">let</span> searchChild = <span class="variable language_">this</span>.<span class="title function_">compare</span>(left, left + <span class="number">1</span>) &gt; <span class="number">0</span> ? left + <span class="number">1</span>: left</span><br><span class="line">        <span class="keyword">while</span> (<span class="variable language_">this</span>.<span class="title function_">compare</span>(index, searchChild) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            [<span class="variable language_">this</span>.<span class="property">queue</span>[index], <span class="variable language_">this</span>.<span class="property">queue</span>[searchChild]] = [<span class="variable language_">this</span>.<span class="property">queue</span>[searchChild], <span class="variable language_">this</span>.<span class="property">queue</span>[index]]</span><br><span class="line">            index = searchChild</span><br><span class="line">            left = <span class="number">2</span> * index + <span class="number">1</span></span><br><span class="line">            searchChild = <span class="variable language_">this</span>.<span class="title function_">compare</span>(left, left + <span class="number">1</span>) &gt; <span class="number">0</span> ? left + <span class="number">1</span>: left</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> outer</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">var</span> topKFrequent = <span class="keyword">function</span> (<span class="params">nums, k</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">    <span class="keyword">const</span> res = [];</span><br><span class="line">    <span class="comment">//使用 map 统计元素出现频率</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> num <span class="keyword">of</span> nums) &#123;</span><br><span class="line">      map.<span class="title function_">set</span>(num, (map.<span class="title function_">get</span>(num) || <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//创建小顶堆</span></span><br><span class="line">    <span class="keyword">const</span> heap = <span class="keyword">new</span> <span class="title class_">Heap</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a.<span class="property">value</span> - b.<span class="property">value</span>)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> [key, value] <span class="keyword">of</span> map) &#123;</span><br><span class="line">      heap.<span class="title function_">enqueue</span>(&#123; key, value &#125;);</span><br><span class="line">      <span class="keyword">if</span> (heap.<span class="title function_">size</span>() &gt; k) heap.<span class="title function_">dequeue</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//处理输出</span></span><br><span class="line">    <span class="keyword">while</span> (heap.<span class="title function_">size</span>()) res.<span class="title function_">push</span>(heap.<span class="title function_">dequeue</span>().<span class="property">key</span>);</span><br><span class="line">    <span class="comment">// console.log(res)</span></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="comment">// topKFrequent([1, 1, 1, 2, 2, 2, 9, 8, 1, 3, 4], 2)</span></span><br></pre></td></tr></table></figure><h1 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h1><h2 id="二叉树的递归遍历"><a href="#二叉树的递归遍历" class="headerlink" title="二叉树的递归遍历"></a>二叉树的递归遍历</h2><h4 id="144-145-94-二叉树的前序、后序、中序遍历"><a href="#144-145-94-二叉树的前序、后序、中序遍历" class="headerlink" title="144 145 94 二叉树的前序、后序、中序遍历"></a>144 145 94 二叉树的前序、后序、中序遍历</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">traversal</span> = (<span class="params">node, nums</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (node === <span class="literal">null</span>) <span class="keyword">return</span></span><br><span class="line">    nums.<span class="title function_">push</span>(node.<span class="property">val</span>)</span><br><span class="line">    <span class="title function_">traversal</span>(node.<span class="property">left</span>, nums)</span><br><span class="line">    <span class="title function_">traversal</span>(node.<span class="property">right</span>, nums)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> preorderTraversal = <span class="keyword">function</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> res = []</span><br><span class="line">    <span class="title function_">traversal</span>(root, res)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">traversal</span> = (<span class="params">node, nums</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (node === <span class="literal">null</span>) <span class="keyword">return</span></span><br><span class="line">    <span class="title function_">traversal</span>(node.<span class="property">left</span>, nums)</span><br><span class="line">    nums.<span class="title function_">push</span>(node.<span class="property">val</span>)</span><br><span class="line">    <span class="title function_">traversal</span>(node.<span class="property">right</span>, nums)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> inorderTraversal = <span class="keyword">function</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> res = []</span><br><span class="line">    <span class="title function_">traversal</span>(root, res)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">traversal</span> = (<span class="params">node, nums</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (node === <span class="literal">null</span>) <span class="keyword">return</span></span><br><span class="line">    <span class="title function_">traversal</span>(node.<span class="property">left</span>, nums)</span><br><span class="line">    <span class="title function_">traversal</span>(node.<span class="property">right</span>, nums)</span><br><span class="line">    nums.<span class="title function_">push</span>(node.<span class="property">val</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> inorderTraversal = <span class="keyword">function</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> res = []</span><br><span class="line">    <span class="title function_">traversal</span>(root, res)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="二叉树的迭代遍历"><a href="#二叉树的迭代遍历" class="headerlink" title="二叉树的迭代遍历"></a>二叉树的迭代遍历</h2><h4 id="144-145-94先序遍历-中序遍历-后序遍历"><a href="#144-145-94先序遍历-中序遍历-后序遍历" class="headerlink" title="144 145 94先序遍历 中序遍历 后序遍历"></a>144 145 94先序遍历 中序遍历 后序遍历</h4><p><strong>先序遍历的思路</strong></p><ul><li>根节点结点进栈</li><li>栈不为空，则出栈，出栈元素录入结果</li><li>进出栈元素的右结点，再进左结点</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val, left, right) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.left = (left===undefined ? null : left)</span></span><br><span class="line"><span class="comment"> *     this.right = (right===undefined ? null : right)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">TreeNode</span>&#125; <span class="variable">root</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> preorderTraversal = <span class="keyword">function</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> res = []</span><br><span class="line">    <span class="keyword">if</span>(!root) <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">let</span> stack = [root]</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">stackEmpty</span> = stack =&gt; !stack.<span class="property">length</span></span><br><span class="line">    <span class="keyword">while</span> (!<span class="title function_">stackEmpty</span>(stack)) &#123;</span><br><span class="line">        <span class="keyword">const</span> cur = stack.<span class="title function_">pop</span>()</span><br><span class="line">        res.<span class="title function_">push</span>(cur.<span class="property">val</span>)</span><br><span class="line">        cur.<span class="property">right</span> &amp;&amp; stack.<span class="title function_">push</span>(cur.<span class="property">right</span>)</span><br><span class="line">        cur.<span class="property">left</span> &amp;&amp; stack.<span class="title function_">push</span>(cur.<span class="property">left</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>后序遍历的思路</strong></p><p>在先序遍历的基础上 变为左结点入栈后 再右节点入栈，然后再倒序数组即可</p><p>即 中左右 -&gt; 中右左 -&gt; 左右中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val, left, right) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.left = (left===undefined ? null : left)</span></span><br><span class="line"><span class="comment"> *     this.right = (right===undefined ? null : right)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">TreeNode</span>&#125; <span class="variable">root</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">reverse</span> = (<span class="params">res</span>) =&gt;&#123;</span><br><span class="line">    <span class="keyword">let</span> start = <span class="number">0</span>, end = res.<span class="property">length</span> - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> (start &lt; end) &#123;</span><br><span class="line">        [res[start], res[end]] = [res[end], res[start]]</span><br><span class="line">        start++</span><br><span class="line">        end--</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> postorderTraversal = <span class="keyword">function</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> res = []</span><br><span class="line">    <span class="keyword">if</span>(!root) <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">let</span> stack = [root]</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">stackEmpty</span> = stack =&gt; !stack.<span class="property">length</span></span><br><span class="line">    <span class="keyword">while</span> (!<span class="title function_">stackEmpty</span>(stack)) &#123;</span><br><span class="line">        <span class="keyword">const</span> cur = stack.<span class="title function_">pop</span>()</span><br><span class="line">        res.<span class="title function_">push</span>(cur.<span class="property">val</span>)</span><br><span class="line">        cur.<span class="property">left</span> &amp;&amp; stack.<span class="title function_">push</span>(cur.<span class="property">left</span>)</span><br><span class="line">        cur.<span class="property">right</span> &amp;&amp; stack.<span class="title function_">push</span>(cur.<span class="property">right</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    res = <span class="title function_">reverse</span>(res)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>中序遍历的思路</strong></p><ol><li><p>根节点进栈，一路向左进栈</p></li><li><p>遇到为空结点，指针指向栈顶，栈顶元素进数组</p></li><li><p>指针指向栈顶元素右节点，返回步骤1</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val, left, right) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.left = (left===undefined ? null : left)</span></span><br><span class="line"><span class="comment"> *     this.right = (right===undefined ? null : right)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">TreeNode</span>&#125; <span class="variable">root</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> inorderTraversal = <span class="keyword">function</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> res = []</span><br><span class="line">    <span class="keyword">let</span> st = []</span><br><span class="line">    <span class="keyword">let</span> cur = root</span><br><span class="line">    <span class="keyword">while</span> (cur !== <span class="literal">null</span> || st.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (cur !== <span class="literal">null</span>) &#123;</span><br><span class="line">            st.<span class="title function_">push</span>(cur)</span><br><span class="line">            cur = cur.<span class="property">left</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            cur = st.<span class="title function_">pop</span>()</span><br><span class="line">            res.<span class="title function_">push</span>(cur.<span class="property">val</span>)</span><br><span class="line">            cur = cur.<span class="property">right</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="二叉树的统一迭代法"><a href="#二叉树的统一迭代法" class="headerlink" title="二叉树的统一迭代法"></a>二叉树的统一迭代法</h2><h4 id="144-145-94先序遍历-中序遍历-后序遍历-1"><a href="#144-145-94先序遍历-中序遍历-后序遍历-1" class="headerlink" title="144 145 94先序遍历 中序遍历 后序遍历"></a>144 145 94先序遍历 中序遍历 后序遍历</h4><p>思路： 标记法</p><p>将访问的节点放入栈中，对要处理的节点放入栈中但是做标记</p><p>做标记的方法：先放一个空指针进栈，再放元素进栈</p><p>中序代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> inorderTraversal = <span class="keyword">function</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">top</span> = stack =&gt; stack[stack.<span class="property">length</span> - <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">let</span> res = []</span><br><span class="line">    <span class="keyword">let</span> st = []</span><br><span class="line">    <span class="keyword">if</span>(root) &#123;st.<span class="title function_">push</span>(root)&#125;</span><br><span class="line">    <span class="keyword">while</span>(st.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> node = <span class="title function_">top</span>(st)</span><br><span class="line">        <span class="keyword">if</span> (node !== <span class="literal">null</span>) &#123;</span><br><span class="line">            st.<span class="title function_">pop</span>()</span><br><span class="line">            <span class="keyword">if</span> (node.<span class="property">right</span>) &#123;st.<span class="title function_">push</span>(node.<span class="property">right</span>)&#125;</span><br><span class="line"></span><br><span class="line">            st.<span class="title function_">push</span>(node)</span><br><span class="line">            st.<span class="title function_">push</span>(<span class="literal">null</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (node.<span class="property">left</span>) &#123;st.<span class="title function_">push</span>(node.<span class="property">left</span>)&#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            st.<span class="title function_">pop</span>()</span><br><span class="line">            res.<span class="title function_">push</span>(st.<span class="title function_">pop</span>().<span class="property">val</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>前序代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> preorderTraversal = <span class="keyword">function</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">top</span> = stack =&gt; stack[stack.<span class="property">length</span> - <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">let</span> res = []</span><br><span class="line">    <span class="keyword">let</span> st = []</span><br><span class="line">    <span class="keyword">if</span>(root) &#123;st.<span class="title function_">push</span>(root)&#125;</span><br><span class="line">    <span class="keyword">while</span>(st.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> node = <span class="title function_">top</span>(st)</span><br><span class="line">        <span class="keyword">if</span> (node !== <span class="literal">null</span>) &#123;</span><br><span class="line">            st.<span class="title function_">pop</span>()</span><br><span class="line">            <span class="keyword">if</span> (node.<span class="property">right</span>) &#123;st.<span class="title function_">push</span>(node.<span class="property">right</span>)&#125;</span><br><span class="line">            <span class="keyword">if</span> (node.<span class="property">left</span>) &#123;st.<span class="title function_">push</span>(node.<span class="property">left</span>)&#125;</span><br><span class="line">            st.<span class="title function_">push</span>(node)</span><br><span class="line">            st.<span class="title function_">push</span>(<span class="literal">null</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            st.<span class="title function_">pop</span>()</span><br><span class="line">            res.<span class="title function_">push</span>(st.<span class="title function_">pop</span>().<span class="property">val</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>后序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> postorderTraversal = <span class="keyword">function</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">top</span> = stack =&gt; stack[stack.<span class="property">length</span> - <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">let</span> res = []</span><br><span class="line">    <span class="keyword">let</span> st = []</span><br><span class="line">    <span class="keyword">if</span>(root) &#123;st.<span class="title function_">push</span>(root)&#125;</span><br><span class="line">    <span class="keyword">while</span>(st.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> node = <span class="title function_">top</span>(st)</span><br><span class="line">        <span class="keyword">if</span> (node !== <span class="literal">null</span>) &#123;</span><br><span class="line">            st.<span class="title function_">pop</span>()</span><br><span class="line">            st.<span class="title function_">push</span>(node)</span><br><span class="line">            st.<span class="title function_">push</span>(<span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">if</span> (node.<span class="property">right</span>) &#123;st.<span class="title function_">push</span>(node.<span class="property">right</span>)&#125;</span><br><span class="line">            <span class="keyword">if</span> (node.<span class="property">left</span>) &#123;st.<span class="title function_">push</span>(node.<span class="property">left</span>)&#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            st.<span class="title function_">pop</span>()</span><br><span class="line">            res.<span class="title function_">push</span>(st.<span class="title function_">pop</span>().<span class="property">val</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="二叉树的层序遍历"><a href="#二叉树的层序遍历" class="headerlink" title="二叉树的层序遍历"></a>二叉树的层序遍历</h2><h4 id="102-二叉树的层序遍历"><a href="#102-二叉树的层序遍历" class="headerlink" title="102 二叉树的层序遍历"></a>102 二叉树的层序遍历</h4><p>队列</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">TreeNode</span>&#125; <span class="variable">root</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[][]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> levelOrder = <span class="keyword">function</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> res = []</span><br><span class="line">    <span class="keyword">let</span> queue = []</span><br><span class="line">    <span class="keyword">if</span>(root) &#123;queue.<span class="title function_">push</span>(root)&#125;</span><br><span class="line">    <span class="keyword">while</span> (queue.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> len = queue.<span class="property">length</span></span><br><span class="line">        <span class="keyword">let</span> arr = []</span><br><span class="line">        <span class="keyword">while</span>(len--) &#123;</span><br><span class="line">            <span class="keyword">let</span> node = queue.<span class="title function_">shift</span>()</span><br><span class="line">            <span class="keyword">if</span> (node) &#123;arr.<span class="title function_">push</span>(node.<span class="property">val</span>)&#125;</span><br><span class="line">            <span class="keyword">if</span> (node.<span class="property">left</span>) &#123;queue.<span class="title function_">push</span>(node.<span class="property">left</span>)&#125;</span><br><span class="line">            <span class="keyword">if</span> (node.<span class="property">right</span>) &#123;queue.<span class="title function_">push</span>(node.<span class="property">right</span>)&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        res.<span class="title function_">push</span>(arr)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> js 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>24暑假</title>
      <link href="/2024/07/12/24%E6%9A%91%E5%81%87/"/>
      <url>/2024/07/12/24%E6%9A%91%E5%81%87/</url>
      
        <content type="html"><![CDATA[<h1 id="ajax"><a href="#ajax" class="headerlink" title="ajax"></a>ajax</h1><h2 id="1-AJAX概念和axios"><a href="#1-AJAX概念和axios" class="headerlink" title="1.AJAX概念和axios"></a>1.AJAX概念和axios</h2><h4 id="什么是AJAX？"><a href="#什么是AJAX？" class="headerlink" title="什么是AJAX？"></a>什么是AJAX？</h4><p>使用浏览器的 XMLHttpRequest 对象 与服务器通信</p><h4 id="axios用法"><a href="#axios用法" class="headerlink" title="axios用法"></a>axios用法</h4><p>1 引入axios.js文件</p><script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script><p>2 具体用法</p><p>url：资源定位符</p><p>params：请求参数</p><p>method：请求方法</p><p>data：请求体</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">      <span class="title function_">axios</span>(&#123;</span><br><span class="line">          <span class="attr">url</span>:<span class="string">&#x27; http://hmajax.itheima.net/api/area&#x27;</span>,</span><br><span class="line">          <span class="attr">params</span>:&#123;</span><br><span class="line">              pname, </span><br><span class="line">              cname,</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&#x27;http://hmajax.itheima.net/api/login&#x27;</span>,</span><br><span class="line">      <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">      <span class="attr">data</span>: &#123;</span><br><span class="line">        username,</span><br><span class="line">        password</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(result.<span class="property">data</span>.<span class="property">message</span>)</span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(error.<span class="property">response</span>.<span class="property">data</span>.<span class="property">message</span>)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h2 id="2-URL和URL参数查询"><a href="#2-URL和URL参数查询" class="headerlink" title="2.URL和URL参数查询"></a>2.URL和URL参数查询</h2><h4 id="URL概念和组成"><a href="#URL概念和组成" class="headerlink" title="URL概念和组成"></a>URL概念和组成</h4><p>什么是 URL ？</p><ul><li>统一资源定位符，简称网址，用于定位网络中的资源（资源指的是：网页，图片，数据，视频，音频等等）</li></ul><p>URL的组成？</p><ul><li>协议，域名，资源路径</li></ul><p><img src="/../img/md/URL%E7%BB%84%E6%88%90.png"></p><h4 id="URL参数查询"><a href="#URL参数查询" class="headerlink" title="URL参数查询"></a>URL参数查询</h4><p>参数查询语法？</p><ul><li>在 url 网址后面用?拼接格式：<a href="http://xxxx.com/xxx/xxx?%E5%8F%82%E6%95%B0%E5%90%8D1=%E5%80%BC1&%E5%8F%82%E6%95%B0%E5%90%8D2=%E5%80%BC2">http://xxxx.com/xxx/xxx?参数名1=值1&amp;参数名2=值2</a></li><li>参数名一般是后端规定的，值前端看情况传递即可</li></ul><p>URL参数查询类似axios用请求方法get 请求参数params</p><h4 id="URL中的端口号"><a href="#URL中的端口号" class="headerlink" title="URL中的端口号"></a>URL中的端口号</h4><p>端口号的作用：标记服务器里对应的服务程序值为（0-65535 之间的任意整数）</p><p>http 协议，默认访问的是 80 端口</p><p>常用端口如 数据库3306 ssh22</p><p>注意：0-1023 和一些特定的端口号被占用，我们自己编写服务程序请避开使用</p><h2 id="3-请求报文与响应报文"><a href="#3-请求报文与响应报文" class="headerlink" title="3.请求报文与响应报文"></a>3.请求报文与响应报文</h2><h4 id="请求报文"><a href="#请求报文" class="headerlink" title="请求报文"></a>请求报文</h4><p>请求报文：是浏览器按照协议规定发送给服务器的内容，例如刚刚注册用户时，发起的请求报文：</p><p><img src="/../img/md/%E8%AF%B7%E6%B1%82%E6%8A%A5%E6%96%87.png"></p><p>这里的格式包含：</p><ul><li>请求行：请求方法，URL，协议</li><li>请求头：以键值对的格式携带的附加信息，比如：Content-Type（指定了本次传递的内容类型）</li><li>空行：分割请求头，空行之后的是发送给服务器的资源</li><li>请求体：发送的资源</li></ul><h4 id="响应报文"><a href="#响应报文" class="headerlink" title="响应报文"></a>响应报文</h4><p><img src="/../img/md/%E5%93%8D%E5%BA%94%E6%8A%A5%E6%96%87.png"></p><p>响应报文的组成：</p><ul><li>响应行（状态行）：协议，HTTP响应状态码，状态信息</li><li>响应头：以键值对的格式携带的附加信息，比如：Content-Type（告诉浏览器，本次返回的内容类型）</li><li>空行：分割响应头，控制之后的是服务器返回的资源</li><li>响应体：返回的资源</li></ul><h4 id="HTTP-响应状态码"><a href="#HTTP-响应状态码" class="headerlink" title="HTTP 响应状态码"></a>HTTP 响应状态码</h4><p><img src="/../img/md/%E5%93%8D%E5%BA%94%E7%8A%B6%E6%80%81%E7%A0%81.png"></p><p>1xx <strong>信息响应</strong></p><ul><li><strong>100 Continue</strong>: 服务器已接收到请求头部，客户端应继续发送请求主体（例如，在发送一个较大的请求主体之前）。</li><li><strong>101 Switching Protocols</strong>: 服务器同意客户端请求更改协议（例如，从 HTTP 升级到 WebSocket）。</li></ul><p>2xx <strong>成功响应</strong></p><ul><li><strong>200 OK:</strong> 请求成功。响应的内容随请求方法的不同而不同。</li><li><strong>201 Created</strong>: 请求已成功并且在服务器上创建了新的资源。</li><li><strong>202 Accepted</strong>: 服务器已接受请求，但尚未处理完成。</li><li><strong>204 No Content</strong>: 服务器成功处理了请求，但没有返回任何内容。</li></ul><p>3xx <strong>重定向</strong></p><ul><li><strong>301 Moved Permanently</strong>: 请求的资源已永久移动到新的 URL。客户端应使用新的 URL 进行请求。</li><li><strong>302 Found</strong>: 请求的资源临时移动到新的 URL。客户端应使用原始的 URL 进行后续请求。</li><li><strong>304 Not Modified</strong>: 请求的资源未修改。客户端可以使用缓存的版本。</li></ul><p>4xx <strong>客户端错误</strong></p><ul><li><strong>400 Bad Request</strong>: 服务器无法理解请求，通常是因为请求语法错误。</li><li><strong>401 Unauthorized</strong>: 请求需要用户认证。</li><li><strong>403 Forbidden</strong>: 服务器理解请求，但拒绝执行。</li><li><strong>404 Not Found</strong>: 服务器找不到请求的资源。</li><li><strong>405 Method Not Allowed</strong>: 请求方法不被允许。</li><li><strong>408 Request Timeout</strong>: 服务器等待客户端发送请求时间过长。</li></ul><p>5xx <strong>服务器错误</strong></p><ul><li><strong>500 Internal Server Error</strong>: 服务器遇到未预期的情况，无法完成请求。</li><li><strong>501 Not Implemented</strong>: 服务器不支持请求的方法。</li><li><strong>502 Bad Gateway</strong>: 服务器作为网关或代理，从上游服务器接收到无效响应。</li><li><strong>503 Service Unavailable</strong>: 服务器暂时无法处理请求，通常是因为服务器过载或维护。</li><li><strong>504 Gateway Timeout</strong>: 服务器作为网关或代理，未能及时从上游服务器接收到响应。</li></ul><h2 id="4-Json字符串与js对象"><a href="#4-Json字符串与js对象" class="headerlink" title="4.Json字符串与js对象"></a>4.Json字符串与js对象</h2><h4 id="json字符串的展开运算符…"><a href="#json字符串的展开运算符…" class="headerlink" title="json字符串的展开运算符…"></a>json字符串的展开运算符…</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> jsonString = <span class="string">&#x27;&#123;&quot;name&quot;: &quot;John&quot;, &quot;age&quot;: 30, &quot;city&quot;: &quot;New York&quot;&#125;&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> obj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(jsonString);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newObj = &#123; ...obj, <span class="attr">country</span>: <span class="string">&#x27;USA&#x27;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newObj);</span><br><span class="line"><span class="comment">// 输出: &#123; name: &#x27;John&#x27;, age: 30, city: &#x27;New York&#x27;, country: &#x27;USA&#x27; &#125;</span></span><br></pre></td></tr></table></figure><h4 id="JSON-stringify-obj"><a href="#JSON-stringify-obj" class="headerlink" title="JSON.stringify(obj)"></a>JSON.stringify(obj)</h4><p>接受一个 JavaScript 对象或数组，并返回一个 JSON 字符串。</p><h4 id="JSON-parse-jsonString"><a href="#JSON-parse-jsonString" class="headerlink" title="JSON.parse(jsonString)"></a>JSON.parse(jsonString)</h4><p>接受一个 JSON 字符串，并返回一个 JavaScript 对象或数组。</p><h4 id="Object-keys-obj"><a href="#Object-keys-obj" class="headerlink" title="Object.keys(obj)"></a>Object.keys(obj)</h4><p>是 JavaScript 中的一个内置方法，用于返回一个给定对象的可枚举属性名（即键）的数组。</p><h4 id="获得对象obj某个键key的值-obj-key"><a href="#获得对象obj某个键key的值-obj-key" class="headerlink" title="获得对象obj某个键key的值 obj[key]"></a>获得对象obj某个键key的值 obj[key]</h4><h2 id="5-Ajax原理"><a href="#5-Ajax原理" class="headerlink" title="5.Ajax原理"></a>5.Ajax原理</h2><h4 id="ajax原理"><a href="#ajax原理" class="headerlink" title="ajax原理"></a>ajax原理</h4><p>ajax原理即xhr</p><h4 id="XMLHttpRequest的使用四个步骤"><a href="#XMLHttpRequest的使用四个步骤" class="headerlink" title="XMLHttpRequest的使用四个步骤"></a>XMLHttpRequest的使用四个步骤</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 目标：使用XMLHttpRequest对象与服务器通信</span></span><br><span class="line"><span class="comment">     *  1. 创建 XMLHttpRequest 对象</span></span><br><span class="line"><span class="comment">     *  2. 配置请求方法和请求 url 地址</span></span><br><span class="line"><span class="comment">     *  3. 监听 loadend 事件，接收响应结果</span></span><br><span class="line"><span class="comment">     *  4. 发起请求</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="comment">// 1. 创建 XMLHttpRequest 对象</span></span><br><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line"><span class="comment">// 2. 配置请求方法和请求 url 地址</span></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;请求方法&#x27;</span>,<span class="string">&#x27;url地址&#x27;</span>);</span><br><span class="line"><span class="comment">// 3. 监听 loadend 事件，接收响应结果</span></span><br><span class="line">xhr.<span class="title function_">addEventListener</span>(<span class="string">&#x27;loadend&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;);</span><br><span class="line"><span class="comment">// 4. 发起请求</span></span><br><span class="line">xhr.<span class="title function_">send</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="xmlhttprequest参数查询"><a href="#xmlhttprequest参数查询" class="headerlink" title="xmlhttprequest参数查询"></a>xmlhttprequest参数查询</h4><p>简单参数查询即第二步里，url写成url？参数1&#x3D;值1&amp;参数2&#x3D;值2这种格式</p><h4 id="URLSearchParams-API"><a href="#URLSearchParams-API" class="headerlink" title="URLSearchParams API"></a>URLSearchParams API</h4><p>URLSearchParams API 可以将js对象转成参数查询对象</p><p>示例代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> qObj = &#123;</span><br><span class="line">  pname,</span><br><span class="line">  cname,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> paramsObj = <span class="keyword">new</span> <span class="title class_">URLSearchParams</span>(qObj);</span><br><span class="line"><span class="keyword">const</span> queryString = paramsObj.<span class="title function_">toString</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(queryString);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>;</span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>,<span class="string">`http://hmajax.itheima.net/api/area?<span class="subst">$&#123;queryString&#125;</span>`</span>);</span><br></pre></td></tr></table></figure><h4 id="请求参数-body参数-设置请求头API-setRequestHeader"><a href="#请求参数-body参数-设置请求头API-setRequestHeader" class="headerlink" title="请求参数 body参数 &amp;设置请求头API setRequestHeader"></a>请求参数 body参数 &amp;设置请求头API setRequestHeader</h4><p>对请求参数要求格式是JSON时 使用API setRequestHeader设置请求头</p><p>示例代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;content-type&#x27;</span>,<span class="string">&#x27;application/json&#x27;</span>);</span><br></pre></td></tr></table></figure><p>传递请求参数</p><p>示例代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> userObj = &#123;</span><br><span class="line">     <span class="attr">username</span>: <span class="string">&#x27;winter1245464&#x27;</span>,</span><br><span class="line">     <span class="attr">password</span>: <span class="string">&#x27;winterlee446&#x27;</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">const</span> userObjStr = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(userObj);</span><br><span class="line">   xhr.<span class="title function_">send</span>(userObjStr);</span><br></pre></td></tr></table></figure><h2 id="6-promise"><a href="#6-promise" class="headerlink" title="6.promise"></a>6.promise</h2><h4 id="promise概念"><a href="#promise概念" class="headerlink" title="promise概念"></a>promise概念</h4><p>Promise 对象用于表示一个异步操作的最终完成（或失败）及其结构值</p><h4 id="promise使用步骤"><a href="#promise使用步骤" class="headerlink" title="promise使用步骤"></a>promise使用步骤</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 创建 Promise 对象</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line"> <span class="comment">// 2. 执行异步任务-并传递结果</span></span><br><span class="line"> <span class="comment">// 成功调用: resolve(值) 触发 then() 执行</span></span><br><span class="line"> <span class="comment">// 失败调用: reject(值) 触发 catch() 执行</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 接收结果</span></span><br><span class="line">p.<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line"> <span class="comment">// 成功</span></span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line"> <span class="comment">// 失败</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="Promise-有哪三种状态？"><a href="#Promise-有哪三种状态？" class="headerlink" title="Promise 有哪三种状态？"></a>Promise 有哪三种状态？</h4><blockquote><p>每个 Promise 对象必定处于以下三种状态之一(fulfilled和rejected后不可改变)</p></blockquote><ol><li>待定（pending）：初始状态，既没有被兑现，也没有被拒绝</li><li>已兑现（fulfilled）：操作成功完成</li><li>已拒绝（rejected）：操作失败</li></ol><p>错误对象打印</p><p><code>console.dir(error)</code></p><h2 id="7-封装简易axios"><a href="#7-封装简易axios" class="headerlink" title="7.封装简易axios"></a>7.封装简易axios</h2><p>示例代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myAxios</span>(<span class="params">config</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 创建XHR对象</span></span><br><span class="line">    <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">    <span class="comment">// 如果有查询参数 拼接到url上</span></span><br><span class="line">    <span class="keyword">if</span> (config.<span class="property">params</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> paramsObj = <span class="keyword">new</span> <span class="title class_">URLSearchParams</span>(config.<span class="property">params</span>)</span><br><span class="line">      <span class="keyword">const</span> queryString = paramsObj.<span class="title function_">toString</span>()</span><br><span class="line">      config.<span class="property">url</span> += <span class="string">`?<span class="subst">$&#123;queryString&#125;</span>`</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 配置请求方法和请求url地址</span></span><br><span class="line">    xhr.<span class="title function_">open</span>(config.<span class="property">method</span> || <span class="string">&#x27;GET&#x27;</span>, config.<span class="property">url</span>)</span><br><span class="line">    <span class="comment">// 异步任务 resolve reject</span></span><br><span class="line">    xhr.<span class="title function_">addEventListener</span>(<span class="string">&#x27;loadend&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt; <span class="number">300</span>) &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">response</span>))</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(xhr.<span class="property">response</span>))</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//请求参数传递 请求头设置</span></span><br><span class="line">    <span class="keyword">if</span> (config.<span class="property">data</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> jsonStr = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(config.<span class="property">data</span>)</span><br><span class="line">      xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;application/json&#x27;</span>)</span><br><span class="line">      xhr.<span class="title function_">send</span>(jsonStr)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      xhr.<span class="title function_">send</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-同步-异步"><a href="#8-同步-异步" class="headerlink" title="8.同步 异步"></a>8.同步 异步</h2><h4 id="同步代码-异步代码"><a href="#同步代码-异步代码" class="headerlink" title="同步代码 异步代码"></a>同步代码 异步代码</h4><ol><li><p><a href="%5Bhttps://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Asynchronous/Introducing#%E5%90%8C%E6%AD%A5%E7%BC%96%E7%A8%8B%5D(https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Asynchronous/Introducing)">同步代码</a>：逐行执行，需原地等待结果后，才继续向下执行</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Asynchronous/Introducing">异步代码</a>：调用后耗时，不阻塞代码继续执行（不必原地等待），在将来完成后触发回调函数传递结果</p></li></ol><p>JS 中有哪些异步代码?</p><p>setTimeout &#x2F; setInterval，事件，AJAX</p><h4 id="回调地狱"><a href="#回调地狱" class="headerlink" title="回调地狱"></a>回调地狱</h4><p>在回调函数中嵌套回调函数，一直嵌套下去就形成了回调函数地狱</p><h4 id="Promise链式调用"><a href="#Promise链式调用" class="headerlink" title="Promise链式调用"></a>Promise链式调用</h4><p><img src="/../img/md/promise%E9%93%BE%E5%BC%8F%E8%B0%83%E7%94%A8.png"></p><p>示例代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">doSomething</span>()</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">result1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">doSomethingElse</span>(result1);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">result2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">doAnotherThing</span>(result2);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">result3</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">doFinalThing</span>(result3);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">result4</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Done&#x27;</span>, result4);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Something went wrong&#x27;</span>, error);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="async函数和await"><a href="#async函数和await" class="headerlink" title="async函数和await"></a>async函数和await</h4><p>使用方法：在async函数内，使用async函数内，使用await关键字取代then函数，等待获取promise对象成功状态的结果值</p><p>示例代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 定义async修饰函数</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 2. await等待Promise对象成功的结果</span></span><br><span class="line">  <span class="keyword">const</span> pObj = <span class="keyword">await</span> <span class="title function_">axios</span>(&#123;<span class="attr">url</span>: <span class="string">&#x27;http://hmajax.itheima.net/api/province&#x27;</span>&#125;)</span><br><span class="line">  <span class="keyword">const</span> pname = pObj.<span class="property">data</span>.<span class="property">list</span>[<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">const</span> cObj = <span class="keyword">await</span> <span class="title function_">axios</span>(&#123;<span class="attr">url</span>: <span class="string">&#x27;http://hmajax.itheima.net/api/city&#x27;</span>, <span class="attr">params</span>: &#123; pname &#125;&#125;)</span><br><span class="line">  <span class="keyword">const</span> cname = cObj.<span class="property">data</span>.<span class="property">list</span>[<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">const</span> aObj = <span class="keyword">await</span> <span class="title function_">axios</span>(&#123;<span class="attr">url</span>: <span class="string">&#x27;http://hmajax.itheima.net/api/area&#x27;</span>, <span class="attr">params</span>: &#123; pname, cname &#125;&#125;)</span><br><span class="line">  <span class="keyword">const</span> areaName = aObj.<span class="property">data</span>.<span class="property">list</span>[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.province&#x27;</span>).<span class="property">innerHTML</span> = pname</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.city&#x27;</span>).<span class="property">innerHTML</span> = cname</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.area&#x27;</span>).<span class="property">innerHTML</span> = areaName</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getData</span>()</span><br></pre></td></tr></table></figure><h4 id="捕获错误-try…catch"><a href="#捕获错误-try…catch" class="headerlink" title="捕获错误 try…catch"></a>捕获错误 try…catch</h4><p>try 和 catch 的作用：语句标记要尝试的语句块，并指定一个出现异常时抛出的响应</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="comment">// 要执行的代码</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  <span class="comment">// error 接收的是，错误消息</span></span><br><span class="line">  <span class="comment">// try 里代码，如果有错误，直接进入这里执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>遇到错误直接跳出，不再往下执行</p><p>示例代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 目标：async和await_错误捕获</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 1. try包裹可能产生错误的代码</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> pObj = <span class="keyword">await</span> <span class="title function_">axios</span>(&#123; <span class="attr">url</span>: <span class="string">&#x27;http://hmajax.itheima.net/api/province&#x27;</span> &#125;)</span><br><span class="line">    <span class="keyword">const</span> pname = pObj.<span class="property">data</span>.<span class="property">list</span>[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">const</span> cObj = <span class="keyword">await</span> <span class="title function_">axios</span>(&#123; <span class="attr">url</span>: <span class="string">&#x27;http://hmajax.itheima.net/api/city&#x27;</span>, <span class="attr">params</span>: &#123; pname &#125; &#125;)</span><br><span class="line">    <span class="keyword">const</span> cname = cObj.<span class="property">data</span>.<span class="property">list</span>[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">const</span> aObj = <span class="keyword">await</span> <span class="title function_">axios</span>(&#123; <span class="attr">url</span>: <span class="string">&#x27;http://hmajax.itheima.net/api/area&#x27;</span>, <span class="attr">params</span>: &#123; pname, cname &#125; &#125;)</span><br><span class="line">    <span class="keyword">const</span> areaName = aObj.<span class="property">data</span>.<span class="property">list</span>[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.province&#x27;</span>).<span class="property">innerHTML</span> = pname</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.city&#x27;</span>).<span class="property">innerHTML</span> = cname</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.area&#x27;</span>).<span class="property">innerHTML</span> = areaName</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="comment">// 2. 接着调用catch块，接收错误信息</span></span><br><span class="line">    <span class="comment">// 如果try里某行代码报错后，try中剩余的代码不会执行了</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">dir</span>(error)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getData</span>()</span><br></pre></td></tr></table></figure><h4 id="事件循环（EventLoop）"><a href="#事件循环（EventLoop）" class="headerlink" title="事件循环（EventLoop）"></a>事件循环（EventLoop）</h4><p><strong>事件循环</strong>：执行代码和收集异步任务的模型，在调用栈空闲时，反复调用任务队列里回调函数执行机制</p><p><img src="/../img/md/%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF.png"></p><p>js单线程 浏览器多线程</p><p>步骤：</p><ol><li>js执行同步代码，遇到异步代码交给宿主浏览器环境执行</li><li>浏览器异步有结果后，会把回调函数放入任务队列排队</li><li>当调用栈空闲后，反复调用任务队列里的回调函数</li></ol><h4 id="宏任务与微任务"><a href="#宏任务与微任务" class="headerlink" title="宏任务与微任务"></a>宏任务与微任务</h4><p><strong>异步任务</strong>分为<strong>宏任务</strong>和<strong>微任务</strong></p><p><strong>宏任务</strong>：由浏览器环境执行的异步代码</p><p><strong>微任务</strong>：由JS引擎环境执行的异步代码</p><p>宏任务与微任务的具体划分</p><p><img src="/../img/md/%E5%AE%8F%E4%BB%BB%E5%8A%A1%E4%B8%8E%E5%BE%AE%E4%BB%BB%E5%8A%A1%E7%9A%84%E5%88%92%E5%88%86.png"></p><p>执行顺序：<strong>同步代码</strong>-&gt;<strong>微任务</strong>-&gt;<strong>宏任务</strong></p><h4 id="Promise-all-静态方法"><a href="#Promise-all-静态方法" class="headerlink" title="Promise.all 静态方法"></a>Promise.all 静态方法</h4><p>概念：合并多个 Promise 对象，等待所有同时成功完成（或某一个失败），做后续逻辑</p><p><img src="/../img/md/Promise.all.png"></p><p>语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="title class_">Promise</span>.<span class="title function_">all</span>([<span class="title class_">Promise</span>对象, <span class="title class_">Promise</span>对象, ...])</span><br><span class="line">p.<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// result 结果: [Promise对象成功结果, Promise对象成功结果, ...]</span></span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 第一个失败的 Promise 对象，抛出的异常对象</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="9-一些第三方库"><a href="#9-一些第三方库" class="headerlink" title="9.一些第三方库"></a>9.一些第三方库</h2><h4 id="serialize-js收集表单数据"><a href="#serialize-js收集表单数据" class="headerlink" title="serialize.js收集表单数据"></a>serialize.js收集表单数据</h4><ol><li><p>引入form-serialize.js</p></li><li><p>获取表单元素（表单元素要有name属性作为收集数据中的属性名）</p><p>示例代码</p><p><code>const form = document.querySelector(&#39;.art-form&#39;);</code></p></li><li><p>配置对象</p><ul><li>hash：<ul><li>true - 收集出来的是一个 JS 对象结构</li><li>false - 收集出来的是一个查询字符串格式</li></ul></li><li>empty：<ul><li>true - 收集空值</li><li>false - 不收集空值</li></ul></li></ul></li></ol><p>​示例代码：<code>const data =  serialize(form, &#123; hash: true, empty: true&#125;)</code></p><h4 id="富文本编辑器-wangEditor插件"><a href="#富文本编辑器-wangEditor插件" class="headerlink" title="富文本编辑器-wangEditor插件"></a>富文本编辑器-wangEditor插件</h4><p>1.引入wangEditor的css样式</p><p>2.html部分</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span>内容：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 富文本编辑器位置 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;editor—wrapper&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;toolbar-container&quot;</span>&gt;</span><span class="comment">&lt;!-- 工具栏 --&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;editor-container&quot;</span>&gt;</span><span class="comment">&lt;!-- 编辑器 --&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 记录富文本内容-用于表单收集 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;content&quot;</span> <span class="attr">class</span>=<span class="string">&quot;publish-content&quot;</span> <span class="attr">hidden</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.js部分</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 富文本编辑器</span></span><br><span class="line"><span class="comment">// 创建编辑器函数，创建工具栏函数</span></span><br><span class="line"><span class="keyword">const</span> &#123; createEditor, createToolbar &#125; = <span class="variable language_">window</span>.<span class="property">wangEditor</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> editorConfig = &#123;</span><br><span class="line">    <span class="attr">placeholder</span>: <span class="string">&#x27;Type here...&#x27;</span>,</span><br><span class="line">    <span class="title function_">onChange</span>(<span class="params">editor</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> html = editor.<span class="title function_">getHtml</span>()</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;editor content&#x27;</span>, html)</span><br><span class="line">      <span class="comment">// 也可以同步到 &lt;textarea&gt;</span></span><br><span class="line">      <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.publish-content&#x27;</span>).<span class="property">value</span> = html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> editor = <span class="title function_">createEditor</span>(&#123;</span><br><span class="line">    <span class="attr">selector</span>: <span class="string">&#x27;#editor-container&#x27;</span>,</span><br><span class="line">    <span class="attr">html</span>: <span class="string">&#x27;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&#x27;</span>,</span><br><span class="line">    <span class="attr">config</span>: editorConfig,</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&#x27;default&#x27;</span>, <span class="comment">// or &#x27;simple&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> toolbarConfig = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> toolbar = <span class="title function_">createToolbar</span>(&#123;</span><br><span class="line">    editor,</span><br><span class="line">    <span class="attr">selector</span>: <span class="string">&#x27;#toolbar-container&#x27;</span>,</span><br><span class="line">    <span class="attr">config</span>: toolbarConfig,</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&#x27;default&#x27;</span>, <span class="comment">// or &#x27;simple&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="10-axios"><a href="#10-axios" class="headerlink" title="10.axios"></a>10.axios</h2><h4 id="axios配置基地址"><a href="#axios配置基地址" class="headerlink" title="axios配置基地址"></a>axios配置基地址</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = <span class="string">&#x27;http://geek.itheima.net&#x27;</span></span><br></pre></td></tr></table></figure><p>配置后axios请求时都会baseURL + url</p><h4 id="token-访问权限令牌"><a href="#token-访问权限令牌" class="headerlink" title="token 访问权限令牌"></a>token 访问权限令牌</h4><p>概念：访问权限的令牌，本质上是一串字符串</p><p>创建：正确登录后，由后端签发并返回</p><p>作用：判断是否有登录状态等，控制访问权限</p><p>注意：前端只能判断 token 有无，而后端才能判断 token 的有效性</p><p><img src="/../img/md/token%E4%BB%A4%E7%89%8C.png"></p><h4 id="axios传递请求头参数"><a href="#axios传递请求头参数" class="headerlink" title="axios传递请求头参数"></a>axios传递请求头参数</h4><p>参数headers</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;目标资源地址&#x27;</span>,</span><br><span class="line">  <span class="attr">headers</span>: &#123;</span><br><span class="line">    <span class="title class_">Authorization</span>: <span class="string">`Bearer <span class="subst">$&#123;<span class="variable language_">localStorage</span>.getItem(<span class="string">&#x27;token&#x27;</span>)&#125;</span>`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="axios请求拦截器"><a href="#axios请求拦截器" class="headerlink" title="axios请求拦截器"></a>axios请求拦截器</h4><p><strong>请求拦截器</strong>是发起请求到服务器前被调用的一个函数，对请求参数进行设置。</p><p>有公共配置和设置时，统一设置在请求拦截器中</p><p>示例代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">config</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> token = location.<span class="title function_">getItem</span>(<span class="string">&#x27;token&#x27;</span>)  </span><br><span class="line">  token &amp;&amp; config.<span class="property">headers</span>.<span class="property">Authorization</span> = <span class="string">`Bearer <span class="subst">$&#123;token&#125;</span>`</span></span><br><span class="line">  <span class="comment">// 在发送请求之前做些什么</span></span><br><span class="line">  <span class="keyword">return</span> config</span><br><span class="line">&#125;, <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">  <span class="comment">// 对请求错误做些什么</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/../img/md/%E8%AF%B7%E6%B1%82%E6%8B%A6%E6%88%AA%E5%99%A8.png"></p><h4 id="axios响应拦截器"><a href="#axios响应拦截器" class="headerlink" title="axios响应拦截器"></a>axios响应拦截器</h4><p><strong>axios 响应拦截器</strong>：响应回到 then&#x2F;catch 之前，触发的拦截函数，对响应结果统一处理</p><p><img src="/../img/md/%E5%93%8D%E5%BA%94%E6%8B%A6%E6%88%AA%E5%99%A8.png"></p><p>示例代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">  <span class="comment">// 2xx 范围内的状态码都会触发该函数。</span></span><br><span class="line">  <span class="comment">// 对响应数据做点什么，例如：直接返回服务器的响应结果对象</span></span><br><span class="line">  <span class="keyword">const</span> result = response.<span class="property">data</span></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;, <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">  <span class="comment">// 超出 2xx 范围的状态码都会触发该函数。</span></span><br><span class="line">  <span class="comment">// 对响应错误做点什么，例如：判断响应状态为 401 代表身份验证失败</span></span><br><span class="line">  <span class="keyword">if</span> (error?.<span class="property">response</span>?.<span class="property">status</span> === <span class="number">401</span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;登录状态过期，请重新登录&#x27;</span>)</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = <span class="string">&#x27;../login/index.html&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="11-正则表达式"><a href="#11-正则表达式" class="headerlink" title="11.正则表达式"></a>11.正则表达式</h2><p>正则表达式（Regular Expression， 简称regex或regexp）是一种强大的字符串匹配和处理工具，用于搜索，匹配和操作字符串。正则表达式使用特定的语法规则来描述和匹配字符串模式。</p><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><ul><li><strong>字面字符</strong>：普通字符在正则表达式中代表它们自己的值，如<code>a</code>匹配字母<code>a</code>。</li><li><strong>元字符</strong>：具有特殊意义的字符，用于指定复杂的匹配规则，如<code>.</code>、<code>*</code>、<code>?</code>、<code>+</code>、<code>[]</code>等。</li></ul><h4 id="常用符号"><a href="#常用符号" class="headerlink" title="常用符号"></a>常用符号</h4><ol><li><strong><code>.</code>（点号）</strong>：匹配除换行符以外的任意单个字符。<ul><li>示例：<code>a.b</code>可以匹配<code>aab</code>、<code>a1b</code>等。</li></ul></li><li><strong><code>*</code>（星号）</strong>：匹配前面的元素零次或多次。<ul><li>示例：<code>a*b</code>可以匹配<code>b</code>、<code>ab</code>、<code>aab</code>等。</li></ul></li><li><strong><code>+</code>（加号）</strong>：匹配前面的元素一次或多次。<ul><li>示例：<code>a+b</code>可以匹配<code>ab</code>、<code>aab</code>、<code>aaab</code>等，但不匹配<code>b</code>。</li></ul></li><li><strong><code>?</code>（问号）</strong>：匹配前面的元素零次或一次。<ul><li>示例：<code>a?b</code>可以匹配<code>b</code>、<code>ab</code>。</li></ul></li><li><strong><code>[]</code>（方括号）</strong>：匹配方括号内的任意一个字符。<ul><li>示例：<code>[abc]</code>可以匹配<code>a</code>、<code>b</code>、<code>c</code>中的任何一个。</li></ul></li><li><strong><code>[^]</code>（脱字符在方括号内）</strong>：匹配不在方括号内的任意一个字符。<ul><li>示例：<code>[^abc]</code>可以匹配除<code>a</code>、<code>b</code>、<code>c</code>之外的任何一个字符。</li></ul></li><li><strong><code>|</code>（竖线）</strong>：表示逻辑或，用于匹配多个选项中的一个。<ul><li>示例：<code>a|b</code>可以匹配<code>a</code>或<code>b</code>。</li></ul></li><li><strong><code>()</code>（小括号）</strong>：用于分组，分组可以作为一个整体使用量词，也可以提取匹配的子字符串。<ul><li>示例：<code>(abc)+</code>可以匹配<code>abc</code>、<code>abcabc</code>等。</li></ul></li><li><strong><code>\</code>（反斜杠）</strong>：用于转义元字符，使其作为字面字符使用。<ul><li>示例：<code>\.</code>可以匹配<code>.</code>字符。</li></ul></li></ol><h4 id="预定义字符类"><a href="#预定义字符类" class="headerlink" title="预定义字符类"></a>预定义字符类</h4><ol><li>**<code>\d</code>**：匹配任意一个数字，相当于<code>[0-9]</code>。<ul><li>示例：<code>\d</code>可以匹配<code>0</code>、<code>1</code>、<code>2</code>等。</li></ul></li><li>**<code>\D</code>**：匹配任意一个非数字字符，相当于<code>[^0-9]</code>。<ul><li>示例：<code>\D</code>可以匹配<code>a</code>、<code>b</code>、<code>@</code>等。</li></ul></li><li>**<code>\w</code>**：匹配任意一个字母、数字或下划线，相当于<code>[a-zA-Z0-9_]</code>。<ul><li>示例：<code>\w</code>可以匹配<code>a</code>、<code>1</code>、<code>_</code>等。</li></ul></li><li>**<code>\W</code>**：匹配任意一个非字母、非数字、非下划线的字符，相当于<code>[^a-zA-Z0-9_]</code>。<ul><li>示例：<code>\W</code>可以匹配<code>@</code>、<code>#</code>、<code> </code>等。</li></ul></li><li>**<code>\s</code>**：匹配任意一个空白字符（包括空格、制表符、换页符等）。<ul><li>示例：<code>\s</code>可以匹配空格、<code> </code>、<code>\t</code>等。</li></ul></li><li>**<code>\S</code>**：匹配任意一个非空白字符。<ul><li>示例：<code>\S</code>可以匹配<code>a</code>、<code>1</code>、<code>@</code>等。</li></ul></li></ol><h3 id="常用示例"><a href="#常用示例" class="headerlink" title="常用示例"></a>常用示例</h3><ol><li><p><strong>匹配邮箱地址</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]&#123;2,&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>匹配电话号码</strong>（假设为10位数字）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\d&#123;10&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>匹配日期（格式为YYYY-MM-DD）</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\d&#123;4&#125;-\d&#123;2&#125;-\d&#123;2&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>匹配URL</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https?://[a-zA-Z0-9.-]+\.[a-zA-Z]&#123;2,&#125;(/[\w.-]*)*</span><br></pre></td></tr></table></figure></li></ol><h2 id="12-Node-js"><a href="#12-Node-js" class="headerlink" title="12.Node.js"></a>12.Node.js</h2><h4 id="了解Nodejs"><a href="#了解Nodejs" class="headerlink" title="了解Nodejs"></a>了解Nodejs</h4><p><strong>nodejs的作用</strong>？</p><p>1.编写后端程序，提供数据和网页资源</p><ol start="2"><li>作为前端工程化的工具，翻译压缩整合代码等，提高开发效率</li></ol><p><strong>Node.js 与浏览器环境的 JS 最大区别</strong>？</p><p>Node.js 环境中没有 BOM 和 DOM，但是也用 JS 语法</p><h4 id="fs模块-文件系统交互"><a href="#fs模块-文件系统交互" class="headerlink" title="fs模块-文件系统交互"></a>fs模块-文件系统交互</h4><p>fs模块用于与文件系统 交互</p><p><strong>使用步骤</strong></p><p>1.加载模块对象，得到fs对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br></pre></td></tr></table></figure><p>2.写入文件内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">writeFile</span>(<span class="string">&#x27;文件路径&#x27;</span>, <span class="string">&#x27;写入内容&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>3.读取文件内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;文件路径&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//data是文件内容的Buffer数据流</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="path模块-路径处理"><a href="#path模块-路径处理" class="headerlink" title="path模块-路径处理"></a>path模块-路径处理</h4><p>nodejs的相对路径是？</p><p>nodejs的相对路径是终端所在文件夹的相对路径，而不是js文件本身所在文件夹的路径</p><p>所以用path模块，获得绝对路径解决</p><p><strong>使用步骤</strong></p><p>1.加载path模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br></pre></td></tr></table></figure><p>2.获取该js文件所在文件夹的绝对路径并拼接</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pathStr = path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;...&#x27;</span>,<span class="string">&#x27;...&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="http模块-创建web服务"><a href="#http模块-创建web服务" class="headerlink" title="http模块-创建web服务"></a>http模块-创建web服务</h4><p>示例代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 目标：基于 http 模块创建 Web 服务程序</span></span><br><span class="line"><span class="comment"> *  1.1 加载 http 模块，创建 Web 服务对象</span></span><br><span class="line"><span class="comment"> *  1.2 监听 request 请求事件，设置响应头和响应体</span></span><br><span class="line"><span class="comment"> *  1.3 配置端口号并启动 Web 服务</span></span><br><span class="line"><span class="comment"> *  1.4 浏览器请求（http://localhost:3000）测试</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 1.1 加载 http 模块，创建 Web 服务对象</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>()</span><br><span class="line"><span class="comment">// 1.2 监听 request 请求事件，设置响应头和响应体</span></span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 设置响应头-内容类型-普通文本以及中文编码格式</span></span><br><span class="line">  res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/plain;charset=utf-8&#x27;</span>)</span><br><span class="line">  <span class="comment">// 设置响应体内容，结束本次请求与响应</span></span><br><span class="line">  res.<span class="title function_">end</span>(<span class="string">&#x27;欢迎使用 Node.js 和 http 模块创建的 Web 服务&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 1.3 配置端口号并启动 Web 服务</span></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Web 服务启动成功了&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="express模块-创建web服务"><a href="#express模块-创建web服务" class="headerlink" title="express模块-创建web服务"></a>express模块-创建web服务</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听请求并设置响应头和响应体</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 设置响应头-内容类型-普通文本以及中文编码格式</span></span><br><span class="line">  res.<span class="title function_">set</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/plain;charset=utf-8&#x27;</span>);</span><br><span class="line">  <span class="comment">// 设置响应体内容，结束本次请求与响应</span></span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;欢迎使用 Node.js 和 Express 框架创建的 Web 服务&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置端口号并启动 Web 服务</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Web 服务启动成功了&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="nodejs模块化"><a href="#nodejs模块化" class="headerlink" title="nodejs模块化"></a>nodejs模块化</h4><p><strong>什么是模块化?</strong></p><p>每个文件都是独立的模块</p><p><strong>commonjs 导入导出语法</strong></p><p>导出</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    对外属性名: 模块内私有变量</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>导入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> 变量名 = <span class="built_in">require</span>(<span class="string">&#x27;模块名或路径&#x27;</span>)</span><br><span class="line"><span class="comment">// Node.js 环境内置模块直接写模块名（例如：fs，path，http）</span></span><br><span class="line"><span class="comment">// 自定义模块：写模块文件路径（例如：./utils.js)</span></span><br></pre></td></tr></table></figure><p>nodejs默认支持commonJS标准</p><h4 id="ECMAScript标准的导入导出"><a href="#ECMAScript标准的导入导出" class="headerlink" title="ECMAScript标准的导入导出"></a>ECMAScript标准的导入导出</h4><p><strong>ECMAScript标准 默认导入导出语法</strong></p><p><strong>使用该标准前</strong> 先设置package.json 并设置 {“type”: module}</p><p>导出语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> : &#123;</span><br><span class="line">    对外属性名: 模块内私有变量</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>导入语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> 变量名 <span class="keyword">from</span> <span class="string">&#x27;模块名或路径&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>ECMAScript标准 命名导入导出语法</strong></p><p>导出语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// export 修饰定义语句</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> baseURL = <span class="string">&#x27;http://hmajax.itheima.net&#x27;</span></span><br></pre></td></tr></table></figure><p>导入语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;同名变量&#125; <span class="keyword">from</span> <span class="string">&#x27;模块名或路径&#x27;</span></span><br></pre></td></tr></table></figure><p>与默认导出如何选择：</p><ul><li>按需加载，使用命名导出和导入</li><li>全部加载，使用默认导出和导入</li></ul><h4 id="包的概念"><a href="#包的概念" class="headerlink" title="包的概念"></a>包的概念</h4><p>包：将模块，代码，其他资料整合成的一个<strong>文件夹</strong></p><p>包分类： </p><p>​项目包：主要用于编写项目和业务逻辑</p><p>​软件包：封装工具和方法进行使用</p><p>注意事项：</p><ul><li>需要有package.json记录软件包名字，作者，<strong>入口文件</strong></li><li>默认引入的是包文件节下的 index.js 模块文件里导出的对象，如果没有 index.js 文件，则会引入 package.json 里 main 属性指定的文件模块导出的对象</li></ul><p>入口文件应该集中工具模块的方法，再统一向外暴露</p><h4 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h4><p>初始化清单文件package.json命令</p><p><code>npm init -y</code></p><p>下载软件包命令 生产环境所需依赖</p><p><code>npm i 包名称</code></p><p>下载软件包命令 开发环境所需依赖</p><p><code>npm i 包命称 --save-dev</code></p><p>全局下载软件包命令</p><p><code>npm i 报名称 -g</code></p><p>npm安装所有依赖命令</p><p><code>npm i</code></p><p>使用情景:拿到它人项目后，没有包，根据package.json下载</p><h4 id="pnpm"><a href="#pnpm" class="headerlink" title="pnpm"></a>pnpm</h4><p>更快，更节省空间</p><p>安装pnpm</p><p><code>npm i -g pnpm</code></p><p>创建vue项目</p><p><code>pnpm create vue</code></p><p>安装所有依赖</p><p><code>pnpm install</code></p><p>安装软件包</p><p><code>pnpm add 包名 </code></p><p>安装开发依赖</p><p><code>pnpm add 包名 -D</code></p><p>卸载某个包</p><p><code>pnpm remove 包名</code></p><h2 id="13-Webpack"><a href="#13-Webpack" class="headerlink" title="13.Webpack"></a>13.Webpack</h2><h4 id="webpack概念和使用步骤"><a href="#webpack概念和使用步骤" class="headerlink" title="webpack概念和使用步骤"></a>webpack概念和使用步骤</h4><p><strong>webpack</strong>是一个静态模块打包工具</p><p><strong>静态模块</strong>：编写代码过程中的，html，css， js，图片等固定内容的文件</p><p><strong>webpack打包步骤</strong></p><p>1.先在项目文件夹下，初始化包环境，得到package.json文件</p><p><code>npm init -y</code></p><p>2.下载webpack webpack-cli到项目 （版本独立）</p><p><code>npm i webpack webpack --save-dev</code></p><p>–save-dev的意思是开发依赖</p><p>3.package.json中将webpack配置到自定义命令</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="attr">&quot;srcipts&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>4.运行命令</p><p><code>npm run build</code></p><h4 id="weback修改入口和出口"><a href="#weback修改入口和出口" class="headerlink" title="weback修改入口和出口"></a>weback修改入口和出口</h4><p>修改入口和出口以改变打包设置</p><p>步骤：</p><ol><li><p>在项目根目录，新建webpack.config.js文件</p></li><li><p>设置导出配置对象filename，配置入口entry，出口文件路径path</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">entry</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;src/login/index.js&#x27;</span>),</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;./login/index.js&#x27;</span>,</span><br><span class="line">        <span class="attr">clean</span>: <span class="string">&#x27;true&#x27;</span> <span class="comment">// 清空输出目录</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>npm run build</code></p></li></ol><h4 id="webpack生成html"><a href="#webpack生成html" class="headerlink" title="webpack生成html"></a>webpack生成html</h4><p>webpack默认只能打包js文件，打包html需用webpack插件 <strong>html-webpack-plugin</strong></p><p><strong>步骤：</strong></p><ol><li><p>下载 html-webpack-plugin 本地软件包到项目中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i html-webpack-plugin --save-dev</span><br></pre></td></tr></table></figure></li><li><p>配置 webpack.config.js 让 Webpack 拥有插件功能</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">template</span>: <span class="string">&#x27;./public/login.html&#x27;</span>, <span class="comment">// 模板文件</span></span><br><span class="line">      <span class="attr">filename</span>: <span class="string">&#x27;./login/index.html&#x27;</span> <span class="comment">// 输出文件</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>指定以 public&#x2F;login.html 为模板复制到 dist&#x2F;login&#x2F;index.html，并自动引入其他打包后资源</p></li></ol><h4 id="webpack打包css到js"><a href="#webpack打包css到js" class="headerlink" title="webpack打包css到js"></a>webpack打包css到js</h4><p>最后结果是 css在js里</p><p>用到了webpack加载器  识别更多模块内容 </p><ul><li><a href="https://webpack.docschina.org/loaders/css-loader/">加载器 css-loader</a>：解析 css 代码</li><li><a href="https://webpack.docschina.org/loaders/style-loader/">加载器 style-loader</a>：把解析后的 css 代码插入到 DOM（style 标签之间）</li></ul><p><strong>步骤：</strong></p><ol><li><p>准备 css 文件引入到 src&#x2F;login&#x2F;index.js 中（压缩转译处理等）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 准备 css 代码，并引入到 js 中</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;bootstrap/dist/css/bootstrap.min.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./index.css&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：这里只是引入代码内容让 Webpack 处理，不需定义变量接收在 JS 代码中继续使用，所以没有定义变量接收</p></blockquote></li><li><p>下载 css-loader 和 style-loader 本地软件包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i css-loader style-loader --save-dev</span><br></pre></td></tr></table></figure></li><li><p>配置 webpack.config.js 让 Webpack 拥有该加载器功能</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">module</span>: &#123; <span class="comment">// 加载器</span></span><br><span class="line">    <span class="attr">rules</span>: [ <span class="comment">// 规则列表</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/i</span>, <span class="comment">// 匹配 .css 结尾的文件</span></span><br><span class="line">        <span class="attr">use</span>: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>], <span class="comment">// 使用从后到前的加载器来解析 css 代码和插入到 DOM</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>打包后运行 dist&#x2F;login&#x2F;index.html 观察效果，看看准备好的样式是否作用在网页上</p></li></ol><h4 id="webpack提取css代码为独立文件"><a href="#webpack提取css代码为独立文件" class="headerlink" title="webpack提取css代码为独立文件"></a>webpack提取css代码为独立文件</h4><p>用到<strong>插件</strong> mini-css-extract-plugin</p><p><strong>步骤：</strong></p><ol><li><p>下载 mini-css-extract-plugin 插件软件包到本地项目中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --save-dev mini-css-extract-plugin</span><br></pre></td></tr></table></figure></li><li><p>配置 webpack.config.js 让 Webpack 拥有该插件功能</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MiniCssExtractPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;mini-css-extract-plugin&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/i</span>,</span><br><span class="line">        <span class="comment">// use: [&#x27;style-loader&#x27;, &#x27;css-loader&#x27;]</span></span><br><span class="line">        <span class="attr">use</span>: [<span class="title class_">MiniCssExtractPlugin</span>.<span class="property">loader</span>, <span class="string">&quot;css-loader&quot;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">MiniCssExtractPlugin</span>()</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>打包后观察效果</p></li><li><p>注意：不能和 style-loader 一起使用</p></li><li><p>好处：css 文件可以被浏览器缓存，减少 JS 文件体积，让浏览器并行下载 css 和 js 文件</p></li></ol><h4 id="webpack打包less代码"><a href="#webpack打包less代码" class="headerlink" title="webpack打包less代码"></a>webpack打包less代码</h4><p>让webpack能够打包less代码</p><p>用到 <a href="https://webpack.docschina.org/loaders/less-loader/">加载器 less-loader</a></p><p><strong>步骤</strong></p><ol><li><p>建立less文件，将less样式引入到src&#x2F;login&#x2F;index.js</p><p><code>import &#39;./index.less&#39;</code></p></li><li><p>下载less和less-loader 本地软件包</p><p><code>npm i less less-loader --save-dev</code></p></li><li><p>配置webpack.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.less$/i</span>,</span><br><span class="line">        <span class="attr">use</span>: [<span class="title class_">MiniCssExtractPlugin</span>.<span class="property">loader</span>, <span class="string">&quot;css-loader&quot;</span>, <span class="string">&quot;less-loader&quot;</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="webpack打包图片"><a href="#webpack打包图片" class="headerlink" title="webpack打包图片"></a>webpack打包图片</h4><p>webpack有内置资源模块的打包</p><p><strong>步骤</strong></p><p>1.配置 webpack.config.js 让 Webpack 拥有打包图片功能</p><p>占位符 【hash】对模块内容做算法计算，得到映射的数字字母组合的字符串</p><p>占位符 【ext】使用当前模块原本的占位符，例如：.png &#x2F; .jpg 等字符串</p><p>占位符 【query】保留引入文件时代码中查询参数（只有 URL 下生效）</p><p>2.注意：判断临界值默认为 8KB</p><p>大于 8KB 文件：发送一个单独的文件并导出 URL 地址</p><p>小于 8KB 文件：导出一个 data URI（base64字符串）</p><h4 id="webpack搭建开发环境"><a href="#webpack搭建开发环境" class="headerlink" title="webpack搭建开发环境"></a>webpack搭建开发环境</h4><p>webpack-dev-server可以让每次改动代码时，自动检测变化热更新到网页</p><p><strong>步骤</strong></p><ol><li><p>下载webpack-dev-server软件包</p></li><li><p>配置自定义命令，设置打包模式为开发模式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="string">&quot;dev&quot;</span>: <span class="string">&quot;webpack serve --mode=development&quot;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li></ol><p><strong>注</strong>：默认public文件夹为服务器根目录 也会把webpack.config.js里设置的output放到内存</p><p>放到内存里的output结果和output目录里的并不一样</p><p>可以在public里设置 跳转到 output目录即可</p><p>–open每次代码刷新自动打开网页</p><h4 id="webpack的打包模式"><a href="#webpack的打包模式" class="headerlink" title="webpack的打包模式"></a>webpack的打包模式</h4><p><strong>打包模式的分类</strong></p><table><thead><tr><th><strong>模式名称</strong></th><th><strong>模式名字</strong></th><th><strong>特点</strong></th><th>场景</th></tr></thead><tbody><tr><td>开发模式</td><td>development</td><td>调试代码，实时加载，模块热替换等</td><td>本地开发</td></tr><tr><td>生产模式</td><td>production</td><td>压缩代码，资源优化，更轻量等</td><td>打包上线</td></tr></tbody></table><p><strong>如何设置打包模式？</strong></p><p>方式1：在 webpack.config.js 配置文件设置 mode 选项</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;production&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方式2：在 package.json 命令行设置 mode 参数</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack --mode=production&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack serve --mode=development&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><p><strong>注</strong>：命令行设置的优先级高于配置文件中的，<strong>推荐用命令行设置</strong></p><h4 id="webpack打包模式的应用"><a href="#webpack打包模式的应用" class="headerlink" title="webpack打包模式的应用"></a>webpack打包模式的应用</h4><p>示例需求：在开发模式下用style-loader内嵌，在生产模式独立css代码</p><p><strong>方案：</strong></p><p><a href="https://webpack.docschina.org/configuration/mode/">方案</a><a href="https://webpack.docschina.org/configuration/mode/">1</a>：webpack.config.js 配置导出函数，但是局限性大（只接受 2 种模式）</p><p>方案2：借助 cross-env （跨平台通用）包命令，设置参数区分环境</p><p><a href="https://webpack.docschina.org/guides/production/">方案</a><a href="https://webpack.docschina.org/guides/production/">3</a>：配置不同的 webpack.config.js （适用多种模式差异性较大情况）</p><p><strong>步骤：</strong></p><p>1.下载cross-env软件包</p><p><code>npm i cross=env --save-dev</code></p><p>2.配置自定义命令，传入参数和值（会绑定到 process.env 对象下）</p><p><img src="/../img/md/cross-env%E9%85%8D%E7%BD%AE%E8%87%AA%E5%AE%9A%E4%B9%89%E5%91%BD%E4%BB%A4.png"></p><p>3.在 webpack.config.js 区分不同环境使用不同配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/i</span>,</span><br><span class="line">        <span class="comment">// use: [&#x27;style-loader&#x27;, &quot;css-loader&quot;],</span></span><br><span class="line">        <span class="attr">use</span>: [process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;development&#x27;</span> ? <span class="string">&#x27;style-loader&#x27;</span> : <span class="title class_">MiniCssExtractPlugin</span>.<span class="property">loader</span>, <span class="string">&quot;css-loader&quot;</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.less$/i</span>,</span><br><span class="line">        <span class="attr">use</span>: [</span><br><span class="line">          <span class="comment">// compiles Less to CSS</span></span><br><span class="line">          process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;development&#x27;</span> ? <span class="string">&#x27;style-loader&#x27;</span> : <span class="title class_">MiniCssExtractPlugin</span>.<span class="property">loader</span>,</span><br><span class="line">          <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;less-loader&#x27;</span>,</span><br><span class="line">        ],</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><h4 id="前端注入环境变量"><a href="#前端注入环境变量" class="headerlink" title="前端注入环境变量"></a>前端注入环境变量</h4><p><strong>问题:</strong></p><p>cross-env 设置的只在 Node.js 环境生效，前端代码无法访问 process.env.NODE_ENV</p><p><strong>解决</strong>:</p><p>使用 Webpack 内置的 DefinePlugin 插件</p><p><strong>使用方式</strong></p><p>配置 webpack.config.js 中给前端注入环境变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">new</span> webpack.<span class="title class_">DefinePlugin</span>(&#123;</span><br><span class="line">      <span class="comment">// key 是注入到打包后的前端 JS 代码中作为全局变量</span></span><br><span class="line">      <span class="comment">// value 是变量对应的值（在 corss-env 注入在 node.js 中的环境变量字符串）</span></span><br><span class="line">      <span class="string">&#x27;process.env.NODE_ENV&#x27;</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(process.<span class="property">env</span>.<span class="property">NODE_ENV</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>应用场景</strong></p><p>前端项目中，开发模式下打印语句生效，生产模式下打印语句失效</p><h4 id="webpack-开发环境调错-source-map"><a href="#webpack-开发环境调错-source-map" class="headerlink" title="webpack 开发环境调错 source map"></a>webpack 开发环境调错 source map</h4><p><strong>解决问题</strong>：代码被压缩后，无法确认源代码的位置</p><p><strong>注：只用于开发环境,不在生产环境使用</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">devtool</span>: <span class="string">&#x27;inline-source-map&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="设置解析路径别名-alias"><a href="#设置解析路径别名-alias" class="headerlink" title="设置解析路径别名 alias"></a>设置解析路径别名 alias</h4><p><strong>例：</strong></p><p>原来路径如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; checkPhone, checkCode &#125; <span class="keyword">from</span> <span class="string">&#x27;../src/utils/check.js&#x27;</span></span><br></pre></td></tr></table></figure><p>配置解析别名：在 webpack.config.js 中设置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="attr">alias</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;@&#x27;</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;src&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样我们以后，引入目标模块写的路径就更简单了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; checkPhone, checkCode &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/check.js&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="优化cdn使用"><a href="#优化cdn使用" class="headerlink" title="优化cdn使用"></a>优化cdn使用</h4><p>[bootcdn](<a href="https://www.bootcdn.cn/">BootCDN - Bootstrap 中文网开源项目免费 CDN 加速服务</a>) 查到cdn链接</p><p><a href="https://unpkg.com/">unpkg</a> 查到其他链接</p><p><a href="https://www.npmjs.com/">npmjs</a> 查到所有cdn</p><p><strong>优化：</strong>开发模式使用第三方库，生产模式使用cdn加载引入</p><p>1.在 html 中引入第三方库的 <a href="https://www.bootcdn.cn/">CDN </a><a href="https://www.bootcdn.cn/">地址</a><a href="https://www.bootcdn.cn/"> </a>并用模板语法判断</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if(htmlWebpackPlugin.options.useCdn)&#123; %&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/5.2.3/css/bootstrap.min.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>2.配置 webpack.config.js 中 <a href="https://webpack.docschina.org/configuration/externals">externals</a> 外部扩展选项（防止某些 import 的包被打包）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;production&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">//外部扩展 防止生产模式时 import的包被打包进来</span></span><br><span class="line">    config.<span class="property">externals</span> = &#123;</span><br><span class="line">        <span class="comment">//key: import from 语句后面的字符串</span></span><br><span class="line">        <span class="comment">//value：留在原地的全局变量</span></span><br><span class="line">        <span class="string">&#x27;bootstrap/dist/css/bootstrap.min.css&#x27;</span>: <span class="string">&#x27;bootstrap&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;axios&#x27;</span>: <span class="string">&#x27;axios&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">      <span class="comment">// 自定义属性，在 html 模板中 &lt;%=htmlWebpackPlugin.options.useCdn%&gt; 访问使用</span></span><br><span class="line">      <span class="attr">useCdn</span>: process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;production&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="webpack-多页面打包"><a href="#webpack-多页面打包" class="headerlink" title="webpack 多页面打包"></a>webpack 多页面打包</h4><p><strong>概念：</strong></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/SPA">单页面</a>：单个 html 文件，切换 DOM 的方式实现不同业务逻辑展示， Vue&#x2F;React 会用到</p><p>多页面：多个 html 文件，切换页面实现不同业务逻辑展示</p><p><strong>步骤</strong> </p><p>1.准备页面源码 改成模块化的导入导出方式</p><p>​1.css代码包可以用cdn引入，但是自己写的css代码要模块化导入导出到index.js里</p><p>​2.js代码包可以利用模板语法，生产模式引入cdn，开发模式用自己下到本地的包。自己写的js代码要模块化导入导出到index.js里</p><p>2.修改webpack.config.js 添加入口和出口和多页面的设置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="attr">entry</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;模块名1&#x27;</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;src/入口1.js&#x27;</span>),</span><br><span class="line">    <span class="string">&#x27;模块名2&#x27;</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;src/入口2.js&#x27;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;./[name]/index.js&#x27;</span>  </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">template</span>: <span class="string">&#x27;./public/页面2.html&#x27;</span>, <span class="comment">// 模板文件</span></span><br><span class="line">      <span class="attr">filename</span>: <span class="string">&#x27;./路径/index.html&#x27;</span>, <span class="comment">// 输出文件</span></span><br><span class="line">      <span class="attr">chunks</span>: [<span class="string">&#x27;模块名2&#x27;</span>]</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">template</span>: <span class="string">&#x27;./public/页面2.html&#x27;</span>, <span class="comment">// 模板文件</span></span><br><span class="line">      <span class="attr">filename</span>: <span class="string">&#x27;./路径/index.html&#x27;</span>, <span class="comment">// 输出文件</span></span><br><span class="line">      <span class="attr">chunks</span>: [<span class="string">&#x27;模块名2&#x27;</span>]</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="优化-分割公共代码"><a href="#优化-分割公共代码" class="headerlink" title="优化-分割公共代码"></a>优化-分割公共代码</h4><p>将多个页面引用的公共代码提取</p><p>配置 webpack.config.js 的 splitChunks 分割功能</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">optimization</span>: &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="attr">splitChunks</span>: &#123;</span><br><span class="line">      <span class="attr">chunks</span>: <span class="string">&#x27;all&#x27;</span>, <span class="comment">// 所有模块动态非动态移入的都分割分析</span></span><br><span class="line">      <span class="attr">cacheGroups</span>: &#123; <span class="comment">// 分隔组</span></span><br><span class="line">        <span class="attr">commons</span>: &#123; <span class="comment">// 抽取公共模块</span></span><br><span class="line">          <span class="attr">minSize</span>: <span class="number">0</span>, <span class="comment">// 抽取的chunk最小大小字节</span></span><br><span class="line">          <span class="attr">minChunks</span>: <span class="number">2</span>, <span class="comment">// 最小引用数</span></span><br><span class="line">          <span class="attr">reuseExistingChunk</span>: <span class="literal">true</span>, <span class="comment">// 当前 chunk 包含已从主 bundle 中拆分出的模块，则它将被重用</span></span><br><span class="line">          <span class="title function_">name</span>(<span class="params"><span class="variable language_">module</span>, chunks, cacheGroupKey</span>) &#123; <span class="comment">// 分离出模块文件名</span></span><br><span class="line">            <span class="keyword">const</span> allChunksNames = chunks.<span class="title function_">map</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item.<span class="property">name</span>).<span class="title function_">join</span>(<span class="string">&#x27;~&#x27;</span>) <span class="comment">// 模块名1~模块名2</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">`./js/<span class="subst">$&#123;allChunksNames&#125;</span>`</span> <span class="comment">// 输出到 dist 目录下位置</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="14-json-server"><a href="#14-json-server" class="headerlink" title="14.json-server"></a>14.json-server</h2><p><code>json-server</code> 是一个用于快速搭建 RESTful API 的工具，它能够将一个 JSON 文件模拟成一个完整的 API 服务。这个工具非常适合用于前端开发过程中，需要一个简单的后端服务来提供数据和测试 API 的场景。</p><p>使用步骤</p><ol><li>安装全局工具 json-server （全局工具仅需要安装一次）</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn global add json-server 或 npm i json-server  -g</span><br></pre></td></tr></table></figure><ol start="2"><li>代码根目录新建一个 db 目录</li><li>将资料 index.json 移入 db 目录</li><li>进入 db 目录，执行命令，启动后端接口服务 (使用–watch 参数 可以实时监听 json 文件的修改)</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">json-server  --watch  index.json</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端</title>
      <link href="/2024/06/19/%E5%89%8D%E7%AB%AF/"/>
      <url>/2024/06/19/%E5%89%8D%E7%AB%AF/</url>
      
        <content type="html"><![CDATA[<h3 id="1-微信小程序"><a href="#1-微信小程序" class="headerlink" title="1 微信小程序"></a>1 微信小程序</h3><h4 id="1-1-rpx"><a href="#1-1-rpx" class="headerlink" title="1.1 rpx"></a>1.1 rpx</h4><p>rpx是处理不同设备，元素大小的一种方法。</p><p>微信小程序的宽度固定是750rpx ，高度的rpx由长宽比决定。</p><p>其他处理相对大小的方法：</p><ul><li>使用百分比（<code>%</code>），这种方式相对于父容器来定义高度，可以适用于一些需要相对高度的场景。</li><li>使用视窗高度（<code>vh</code>）来设置元素的高度。<code>vh</code>是CSS中的单位，其中<code>1vh</code>等于1%的视窗（viewport）高度（即浏览器高度）。</li></ul><h4 id="1-2-wxml-与html-区别"><a href="#1-2-wxml-与html-区别" class="headerlink" title="1.2 wxml 与html 区别"></a>1.2 wxml 与html 区别</h4><ol><li><strong>标签和属性</strong>：<ul><li>WXML为微信小程序特有的标记语言，它提供了一些自定义组件（如 <code>&lt;view&gt;</code>、<code>&lt;text&gt;</code> 等）来替代HTML中的标签（如 <code>&lt;div&gt;</code>、<code>&lt;span&gt;</code>）。</li><li>WXML中，<code>class</code>和<code>style</code>等属性可以动态绑定数据（使用<code>&#123;&#123;&#125;&#125;</code>语法，括号内加js语句），从而实现动态的样式和内容。</li></ul></li><li><strong>数据绑定</strong>：<ul><li>WXML提供类似Vue数据绑定，通过<code>&#123;&#123;&#125;&#125;</code>进行变量插值，很方便地将页面数据与逻辑层数据连接。</li></ul></li><li><strong>事件处理</strong>：<ul><li>WXML中的事件绑定使用<code>bind</code>或<code>catch</code>前缀（如<code>bindtap</code>、<code>catchtap</code>），而HTML中则使用<code>on</code>前缀（如<code>onclick</code>）。</li><li>微信小程序中的事件绑定允许开发者直接在WXML标签中定义处理函数，而不需要在页面加载后单独进行事件监听的设置。</li></ul></li><li><strong>条件渲染和列表渲染</strong>：<ul><li>WXML提供了类似Vue的<code>wx:if</code>、<code>wx:elif</code>、<code>wx:else</code>属性用于条件渲染，以及<code>wx:for</code>用于循环列表渲染。这些指令能够简化页面的动态内容生成。</li></ul></li></ol><h4 id="1-3-跳转页面"><a href="#1-3-跳转页面" class="headerlink" title="1.3 跳转页面"></a>1.3 跳转页面</h4><h5 id="1-3-1-微信小程序跳转页面"><a href="#1-3-1-微信小程序跳转页面" class="headerlink" title="1.3.1 微信小程序跳转页面"></a>1.3.1 微信小程序跳转页面</h5><p>在微信小程序中，跳转页面主要通过API实现，有以下几种常见的方法：</p><ol><li><strong>navigateTo</strong>：保留当前页面，跳转到应用内的某个页面，但不能跳转到 tabBar 页面。</li><li><strong>redirectTo</strong>：关闭当前页面，跳转到应用内某个页面。</li><li><strong>switchTab</strong>：跳转到 tabBar 页面，并关闭其他所有非 tabBar 页面。</li><li><strong>reLaunch</strong>：关闭所有页面，跳转到应用内某个页面。</li></ol><h5 id="1-3-2-html5跳转页面"><a href="#1-3-2-html5跳转页面" class="headerlink" title="1.3.2 html5跳转页面"></a>1.3.2 html5跳转页面</h5><p>在HTML5中，页面跳转可以通过以下几种常见的方法来实现：</p><p>**使用HTML链接标签 <code>&lt;a&gt;</code>**：非常简单直接的方法。</p><p>使用 JavaScript：</p><ul><li>设置 <code>window.location.href</code></li><li>使用 <code>window.location.replace</code></li><li>使用 <code>window.location.assign</code></li></ul><p><strong>使用表单的 action</strong></p><h3 id="2-CSS"><a href="#2-CSS" class="headerlink" title="2 CSS"></a>2 CSS</h3><h4 id="2-1-display属性"><a href="#2-1-display属性" class="headerlink" title="2.1 display属性"></a>2.1 display属性</h4><ol><li><p>**<code>none</code>**：<br>元素不会被显示，并从文档流中移除，就好像它从来没有存在过一样。元素不占空间，它后面的元素会填补它原来的位置。</p></li><li><p>**<code>block</code>**：<br><strong>块级元素</strong>。这意味着元素会新起一行显示，并尽可能填满其父容器的宽度。块级元素可以设置宽度、高度、外边距（margin）和内边距（padding）。</p></li><li><p>**<code>inline</code>**：<br><strong>行内元素</strong>。元素不会新起一行，而是会和其他行内元素一样，在文本中同一行排列，只能在元素的前后添加内容。行内元素不能设置宽度和高度。</p></li><li><p>**<code>inline-block</code>**：<br>结合了<code>inline</code>和<code>block</code>的特性。元素同行内元素一样水平排列，但它可以像块级元素一样设置宽度、高度、外边距和内边距。</p></li><li><p>**<code>flex</code>**：<br>元素将变为弹性容器（flex container），其子元素（flex items）能使用弹性布局的属性。这是CSS3中引入的一种布局模式，能够简化复杂的布局设计。</p></li><li><p>**<code>grid</code>**：<br>类似于<code>flex</code>，<code>grid</code>也是CSS3引入的一种现代布局模式。元素将变为网格容器，其内部子元素可以放在网格布局中。它为复杂的二维布局提供了更为强大和灵活的解决方案。</p></li><li><p>**<code>table</code>**、<code>table-row</code>、<code>table-cell</code>等：<br>这一系列属性值将元素表现得像HTML中的表格元素一样。例如，<code>display: table;</code>可以将一个元素变为类似<code>&lt;table&gt;</code>的块级表格容器，而<code>display: table-cell;</code>则模仿了<code>&lt;td&gt;</code>的单元格盒子效果。</p><p>(注:需要使用表格，尽量用div元素再设置display为table)</p></li></ol><h4 id="2-2-position属性定位"><a href="#2-2-position属性定位" class="headerlink" title="2.2 position属性定位"></a>2.2 position属性定位</h4><h5 id="2-2-1-static"><a href="#2-2-1-static" class="headerlink" title="2.2.1  static"></a>2.2.1  static</h5><p><strong>默认值</strong>：所有元素默认都是<code>static</code>定位。</p><p><strong>特性</strong>：</p><ul><li>元素按照正常的文档流进行排列。</li><li><code>left</code>、<code>top</code>、<code>right</code>、<code>bottom</code>属性对<code>static</code>元素无效。</li></ul><h5 id="2-2-2-relative"><a href="#2-2-2-relative" class="headerlink" title="2.2.2  relative"></a>2.2.2  relative</h5><p><strong>相对定位</strong>：相对于元素在文档流中的初始位置进行偏移。</p><p><strong>特性</strong>：</p><ul><li>元素仍然保留在文档流中，原来位置占据空间。</li><li>使用<code>left</code>、<code>top</code>、<code>right</code>、<code>bottom</code>属性<strong>可以相对于初始位置进行偏移</strong>。</li></ul><h5 id="2-2-3-absolute"><a href="#2-2-3-absolute" class="headerlink" title="2.2.3  absolute"></a>2.2.3  absolute</h5><p><strong>绝对定位</strong>：相对于<strong>最近的已定位祖先元素（非<code>static</code>）进行偏移</strong>。如果不存在已定位祖先元素，则相对于初始包含块（通常是<code>&lt;html&gt;</code>元素）进行偏移。</p><p><strong>特性</strong>：</p><ul><li>元素脱离文档流，不占用原来的空间。</li><li>使用<code>left</code>、<code>top</code>、<code>right</code>、<code>bottom</code>属性进行定位。</li></ul><h5 id="2-2-4-fixed"><a href="#2-2-4-fixed" class="headerlink" title="2.2.4 fixed"></a>2.2.4 fixed</h5><p><strong>固定定位</strong>：相对于<strong>浏览器视口（viewport）进行偏移</strong>，与滚动条无关。</p><p><strong>特性</strong>：</p><ul><li>元素脱离文档流，不占用原来的空间。</li><li>使用<code>left</code>、<code>top</code>、<code>right</code>、<code>bottom</code>属性进行定位。</li><li>滚动页面时，元素的位置不变。</li></ul><h5 id="2-2-5-sticky"><a href="#2-2-5-sticky" class="headerlink" title="2.2.5 sticky"></a>2.2.5 sticky</h5><p><strong>黏性定位</strong>：根据用户的滚动位置，在相对和固定定位之间切换。</p><p><strong>特性</strong>：</p><ul><li>元素根据滚动位置，在<code>relative</code>和<code>fixed</code>定位之间切换。</li><li>使用<code>top</code>、<code>right</code>、<code>bottom</code>和<code>left</code>属性指定粘性定位的边界。</li><li>只在其祖先元素的滚动区域内有效。</li></ul><h5 id="2-2-6-left-right-top-bottom"><a href="#2-2-6-left-right-top-bottom" class="headerlink" title="2.2.6 left right top bottom"></a>2.2.6 left right top bottom</h5><p>使用<code>left</code>、<code>right</code>、<code>top</code>、<code>bottom</code>属性取决于position属性的值</p><p>例如：</p><p><strong>相对定位</strong>时<code>left：20px;</code>相对原先位置的左端右移20个像素。<code>left:-20px;</code>相对于原先位置的左端左移20px</p><p><strong>绝对定位</strong>时<code>left:20px</code>相对于最近的父非static元素右移20个像素。</p><h4 id="2-3-flex弹性布局"><a href="#2-3-flex弹性布局" class="headerlink" title="2.3 flex弹性布局"></a>2.3 flex弹性布局</h4><p>属性</p><ul><li>flex-direction</li><li>flex-wrap</li><li>justify-content</li><li>align-items</li></ul><h5 id="2-3-1-flex-direction属性"><a href="#2-3-1-flex-direction属性" class="headerlink" title="2.3.1 flex-direction属性"></a>2.3.1 flex-direction属性</h5><p>flex-direction属性决定主轴的方向（即项目的排列方向）。</p><ul><li>row（默认值）：主轴为水平方向，起点在左端。</li><li>row-reverse：主轴为水平方向，起点在右端。</li><li>column：主轴为垂直方向，起点在上沿。</li><li>column-reverse：主轴为垂直方向，起点在下沿。</li></ul><h5 id="2-3-2-flex-wrap属性"><a href="#2-3-2-flex-wrap属性" class="headerlink" title="2.3.2 flex-wrap属性"></a>2.3.2 flex-wrap属性</h5><p>flex-wrap属性决定换行</p><ul><li>nowrap（默认）：不换行。</li><li>wrap：换行，第一行在上方。</li><li>wrap-reverse：换行，第一行在下方。</li></ul><h5 id="2-3-3-justify-content属性"><a href="#2-3-3-justify-content属性" class="headerlink" title="2.3.3 justify-content属性"></a>2.3.3 justify-content属性</h5><p>justify-content决定水平方向的对齐</p><ul><li>flex-start（默认值）：左对齐</li><li>flex-end：右对齐</li><li>center： 居中</li><li>space-between：两端对齐，项目之间的间隔都相等。</li><li>space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</li></ul><h5 id="2-3-4-align-items属性"><a href="#2-3-4-align-items属性" class="headerlink" title="2.3.4 align-items属性"></a>2.3.4 align-items属性</h5><p>align-items决定垂直方向的对齐</p><ul><li>flex-start：交叉轴的起点对齐。</li><li>flex-end：交叉轴的终点对齐。</li><li>center：交叉轴的中点对齐。</li><li>baseline: 项目的第一行文字的基线对齐。</li><li>stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</li></ul><h3 id="3-JS"><a href="#3-JS" class="headerlink" title="3 JS"></a>3 JS</h3><h4 id="3-1-DOM操作"><a href="#3-1-DOM操作" class="headerlink" title="3.1 DOM操作"></a>3.1 DOM操作</h4><h5 id="3-1-1-选择元素"><a href="#3-1-1-选择元素" class="headerlink" title="3.1.1 选择元素"></a>3.1.1 选择元素</h5><p>通过id选择 <code>    var element = document.getElementById(&#39;myElement&#39;);</code></p><p>通过类class选择 </p><p>​选一个 <code>var singleElement = document.querySelector(&#39;.myClass&#39;);</code></p><p>​选所有 <code>var multipleElements = document.querySelectorAll(&#39;.myClass&#39;);</code></p><p>jQuery写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $element = $(<span class="string">&#x27;#myElement&#x27;</span>); <span class="comment">// 使用ID选择器</span></span><br><span class="line"><span class="keyword">var</span> $singleElement = $(<span class="string">&#x27;.myClass&#x27;</span>); <span class="comment">// 使用类选择器,返回的是jQuery 对象集合</span></span><br><span class="line"><span class="keyword">var</span> $multipleElements = $(<span class="string">&#x27;.myClass&#x27;</span>); <span class="comment">// 使用类选择器，返回的是jQuery 对象集合</span></span><br></pre></td></tr></table></figure><h5 id="3-1-2-修改元素内容"><a href="#3-1-2-修改元素内容" class="headerlink" title="3.1.2 修改元素内容"></a>3.1.2 修改元素内容</h5><p>修改文本内容 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> element = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myElement&#x27;</span>);</span><br><span class="line">element.<span class="property">textContent</span> = <span class="string">&#x27;新的文本内容&#x27;</span>;</span><br></pre></td></tr></table></figure><p>修改html内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> element = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myElement&#x27;</span>);</span><br><span class="line">element.<span class="property">innerHTML</span> = <span class="string">&#x27;&lt;strong&gt;新的HTML内容&lt;/strong&gt;&#x27;</span>;</span><br></pre></td></tr></table></figure><p>jQuery写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $element = $(<span class="string">&#x27;#myElement&#x27;</span>);</span><br><span class="line">$element.<span class="title function_">text</span>(<span class="string">&#x27;新的文本内容&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> $element = $(<span class="string">&#x27;#myElement&#x27;</span>);</span><br><span class="line">$element.<span class="title function_">html</span>(<span class="string">&#x27;&lt;strong&gt;新的HTML内容&lt;/strong&gt;&#x27;</span>);</span><br></pre></td></tr></table></figure><h5 id="3-1-3-修改属性与样式"><a href="#3-1-3-修改属性与样式" class="headerlink" title="3.1.3 修改属性与样式"></a>3.1.3 修改属性与样式</h5><p>修改属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> element = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myElement&#x27;</span>);</span><br><span class="line">element.<span class="title function_">setAttribute</span>(<span class="string">&#x27;src&#x27;</span>, <span class="string">&#x27;newImage.jpg&#x27;</span>);</span><br><span class="line">element.<span class="property">src</span> = <span class="string">&#x27;newImage.jpg&#x27;</span>; <span class="comment">// 等效操作</span></span><br></pre></td></tr></table></figure><p>修改样式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> element = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myElement&#x27;</span>);</span><br><span class="line">element.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line">element.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&#x27;blue&#x27;</span>;</span><br></pre></td></tr></table></figure><p>jQuery写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $element = $(<span class="string">&#x27;#myElement&#x27;</span>);</span><br><span class="line">$element.<span class="title function_">attr</span>(<span class="string">&#x27;src&#x27;</span>, <span class="string">&#x27;newImage.jpg&#x27;</span>); <span class="comment">// 设置属性</span></span><br><span class="line"><span class="keyword">var</span> srcValue = $element.<span class="title function_">attr</span>(<span class="string">&#x27;src&#x27;</span>); <span class="comment">// 获取属性</span></span><br><span class="line"><span class="keyword">var</span> $element = $(<span class="string">&#x27;#myElement&#x27;</span>);</span><br><span class="line">$element.<span class="title function_">css</span>(<span class="string">&#x27;color&#x27;</span>, <span class="string">&#x27;red&#x27;</span>);</span><br><span class="line">$element.<span class="title function_">css</span>(<span class="string">&#x27;background-color&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>);</span><br></pre></td></tr></table></figure><h5 id="3-1-4-事件处理"><a href="#3-1-4-事件处理" class="headerlink" title="3.1.4 事件处理"></a>3.1.4 事件处理</h5><p>添加事件监听器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> element = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myElement&#x27;</span>);</span><br><span class="line">element.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;元素被点击了!&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="3-1-5-jQuery其他操作"><a href="#3-1-5-jQuery其他操作" class="headerlink" title="3.1.5 jQuery其他操作"></a>3.1.5 jQuery其他操作</h5><p>追加内容 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $parentElement = $(<span class="string">&#x27;#myElement&#x27;</span>);</span><br><span class="line">$parentElement.<span class="title function_">append</span>(<span class="string">&#x27;&lt;div&gt;新内容&lt;/div&gt;&#x27;</span>); <span class="comment">// 在元素内的末尾插入新内容</span></span><br><span class="line">$parentElement.<span class="title function_">prepend</span>(<span class="string">&#x27;&lt;div&gt;新内容&lt;/div&gt;&#x27;</span>); <span class="comment">// 在元素内的开头插入新内容</span></span><br></pre></td></tr></table></figure><p>移除元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $element = $(<span class="string">&#x27;#myElement&#x27;</span>);</span><br><span class="line">$element.<span class="title function_">remove</span>(); <span class="comment">// 移除元素</span></span><br></pre></td></tr></table></figure><h4 id="3-2-es6-新特性"><a href="#3-2-es6-新特性" class="headerlink" title="3.2 es6+新特性"></a>3.2 es6+新特性</h4><h5 id="3-2-1-块级作用域-let-const"><a href="#3-2-1-块级作用域-let-const" class="headerlink" title="3.2.1 块级作用域 let const"></a>3.2.1 块级作用域 let const</h5><p>变量声明可以用var const let 先来介绍下<strong>var为什么不行</strong></p><p><strong>特点</strong></p><ul><li><strong>函数作用域</strong>：使用<code>var</code>声明的变量是函数作用域的，这意味着它只能在声明它的函数内访问到。</li><li><strong>变量提升</strong>：<code>var</code>声明的变量在作用域内会被提升到作用域的顶部（hoisted），但变量提升只会提升声明，不会提升赋值。会被初始化为undefined</li><li><strong>可重新赋值</strong>：<code>var</code>声明的变量可以重新赋值</li></ul><p><strong>坏处</strong></p><ul><li>变量提升导致不小心在变量声明之前就使用它</li><li>缺乏块级作用域导致变量的修改意外地跨越代码块发生</li></ul><p><strong>let的特点</strong></p><ul><li><strong>块级作用域</strong>：<code>let</code>声明的变量在它们所在的任何块级作用域内有效。</li><li><strong>不可重复声明</strong>：在同一作用域内使用<code>let</code>声明的变量不能重新声明。</li><li><strong>变量提升但不初始化到undefined</strong>：<code>let</code>声明的变量会被提升到所在块的顶部，但不会初始化为<code>undefined</code>，在声明之前访问这些变量会导致<code>ReferenceError</code>。</li></ul><p><strong>const 的特点</strong></p><ul><li><p><strong>块级作用域</strong>：<code>const</code>声明的变量在它们所在的任何块级作用域内有效。</p></li><li><p><strong>不可重新赋值</strong>：<code>const</code>声明的变量在初始化之后无法重新赋值。注意，<code>const</code>声明的对象可以修改其属性。</p></li><li><p><strong>不可重复声明</strong>：与<code>let</code>相似，在同一作用域内使用<code>const</code>声明的变量不能重新声明。</p></li><li><p><strong>变量提升但不初始化到undefined</strong>：与<code>let</code>相似，<code>const</code>声明的变量会被提升到所在块的顶部，但不会初始化为<code>undefined</code>，在声明之前访问这些变量会导致<code>ReferenceError</code>。</p></li></ul><p><strong>总结和区别</strong></p><ul><li><strong>作用域</strong>：<ul><li><code>var</code>：函数作用域</li><li><code>let</code>：块级作用域</li><li><code>const</code>：块级作用域</li></ul></li><li><strong>变量提升</strong>：<ul><li><code>var</code>：变量提升并初始化为<code>undefined</code></li><li><code>let</code>：变量提升但不初始化</li><li><code>const</code>：变量提升但不初始化</li></ul></li><li><strong>可重新赋值性</strong>：<ul><li><code>var</code>：可以重新赋值</li><li><code>let</code>：可以重新赋值</li><li><code>const</code>：不可重新赋值，但对象的属性可以修改</li></ul></li><li><strong>不可重复声明</strong>：<ul><li><code>var</code>：在同一作用域内可重复声明（会覆盖之前的声明）</li><li><code>let</code>：在同一作用域内不可重复声明</li><li><code>const</code>：在同一作用域内不可重复声明</li></ul></li></ul><h5 id="3-2-2-箭头函数"><a href="#3-2-2-箭头函数" class="headerlink" title="3.2.2 箭头函数"></a>3.2.2 箭头函数</h5><p><strong>示例</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params">a, b</span>) =&gt; a + b;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">res =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (res.<span class="property">success</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">message</span>);</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;短信发送成功&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(res.<span class="property">message</span>);</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;短信发送失败&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>箭头函数主要特点</strong></p><ol><li><strong>简洁的语法</strong>：<ul><li>比传统的匿名函数语法简短，特别适合用于简短的回调函数。</li></ul></li><li>**词法的<code>this</code>**：<ul><li>箭头函数不会创建它自己的<code>this</code>上下文，<code>this</code>将保持为定义该箭头函数的上下文中的值。这在处理回调函数时特别有用，避免<code>this</code>值在不同上下文中的意外变化问题。</li></ul></li></ol><h5 id="3-2-3-模板字符串"><a href="#3-2-3-模板字符串" class="headerlink" title="3.2.3 模板字符串"></a>3.2.3 模板字符串</h5><p>使用反引号（&#96;&#96;&#96;）定义多行字符串和内插变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;John&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> greeting = <span class="string">`Hello, <span class="subst">$&#123;name&#125;</span>!`</span>;</span><br></pre></td></tr></table></figure><h4 id="3-3-JS变量类型及判定"><a href="#3-3-JS变量类型及判定" class="headerlink" title="3.3 JS变量类型及判定"></a>3.3 JS变量类型及判定</h4><h5 id="3-3-1-基本类型"><a href="#3-3-1-基本类型" class="headerlink" title="3.3.1 基本类型"></a>3.3.1 基本类型</h5><ol><li><strong>Number</strong>：<ul><li>表示数字类型，包括整数和浮点数。</li><li>示例：<code>let a = 42;</code>，<code>let b = 3.14;</code></li></ul></li><li><strong>String</strong>：<ul><li>表示文本数据，字符串是不可变的。</li><li>示例：<code>let name = &quot;Alice&quot;;</code></li></ul></li><li><strong>Boolean</strong>：<ul><li>只有两个值：<code>true</code> 和 <code>false</code>。</li><li>示例：<code>let isValid = true;</code></li></ul></li><li><strong>Null</strong>：<ul><li>表示一个空值（空对象引用），是JavaScript中有意表示空值的对象。</li><li>示例：<code>let empty = null;</code></li></ul></li><li><strong>Undefined</strong>：<ul><li>表示尚未赋值的变量。</li><li>示例：<code>let value;</code>（<code>value</code> 的值是 <code>undefined</code>）</li></ul></li><li><strong>Symbol</strong>：<ul><li>用于创建唯一的标识符。</li><li>示例：<code>let sym = Symbol(&#39;description&#39;);</code></li></ul></li><li><strong>BigInt</strong>：<ul><li>表示任意精度的整数。</li><li>示例：<code>let bigInt = 12345678901234567890n;</code></li></ul></li></ol><h5 id="3-3-2-引用类型"><a href="#3-3-2-引用类型" class="headerlink" title="3.3.2  引用类型"></a>3.3.2  引用类型</h5><ol><li><strong>Object</strong>：<ul><li>JavaScript 中最基本的引用类型，可以包含多个键值对。</li><li>示例：<code>let person = &#123; name: &quot;Alice&quot;, age: 25 &#125;;</code></li></ul></li><li><strong>Array</strong>（本质上是对象的一种特殊形式）：<ul><li>一种特殊的对象类型，用于存储有序的值集合。</li><li>示例：<code>let numbers = [1, 2, 3, 4, 5];</code></li></ul></li><li><strong>Function</strong>（也是对象的一种）：<ul><li>函数是可调用的对象，可以保存和执行代码块。</li><li>示例：<code>let greet = function() &#123; console.log(&quot;Hello!&quot;); &#125;;</code></li></ul></li><li><strong>Date</strong>：<ul><li>用于处理日期和时间。</li><li>示例：<code>let now = new Date();</code></li></ul></li><li><strong>RegExp</strong>：<ul><li>用于匹配正则表达式。</li><li>示例：<code>let pattern = /abc/;</code></li></ul></li></ol><h5 id="3-3-3-判定方法"><a href="#3-3-3-判定方法" class="headerlink" title="3.3.3 判定方法"></a>3.3.3 判定方法</h5><h6 id="3-3-3-1-typeof-运算符"><a href="#3-3-3-1-typeof-运算符" class="headerlink" title="3.3.3.1  typeof 运算符"></a>3.3.3.1  <code>typeof</code> 运算符</h6><p><code>typeof</code> 是一个一元运算符，用于检测变量的数据类型。它适用于基本类型和一些特殊对象类型（如函数），但对某些复杂对象类型（如 Array、null）不够精确。</p><p><strong>示例</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="number">42</span>);             <span class="comment">// &quot;number&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="string">&quot;Hello&quot;</span>);        <span class="comment">// &quot;string&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">true</span>);           <span class="comment">// &quot;boolean&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">undefined</span>);      <span class="comment">// &quot;undefined&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">null</span>);           <span class="comment">// &quot;object&quot;   // 特殊情况，历史遗留问题</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="title class_">Symbol</span>());       <span class="comment">// &quot;symbol&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="number">12345678901234567890n</span>); <span class="comment">// &quot;bigint&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> &#123; <span class="attr">name</span>: <span class="string">&quot;Alice&quot;</span> &#125;); <span class="comment">// &quot;object&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);         <span class="comment">// &quot;object&quot;  // 不够精确</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;);     <span class="comment">// &quot;function&quot;</span></span><br></pre></td></tr></table></figure><h6 id="3-3-3-2-instanceof-运算符"><a href="#3-3-3-2-instanceof-运算符" class="headerlink" title="3.3.3.2  instanceof 运算符"></a>3.3.3.2  <code>instanceof</code> 运算符</h6><p><code>instanceof</code> 运算符用于检测对象是否为指定构造函数的实例，常用于引用类型的判定。</p><p><strong>示例</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr <span class="keyword">instanceof</span> <span class="title class_">Array</span>);   <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr <span class="keyword">instanceof</span> <span class="title class_">Object</span>);  <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date <span class="keyword">instanceof</span> <span class="title class_">Date</span>);   <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date <span class="keyword">instanceof</span> <span class="title class_">Object</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = &#123; <span class="attr">name</span>: <span class="string">&quot;Alice&quot;</span> &#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person <span class="keyword">instanceof</span> <span class="title class_">Object</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h6 id="3-3-3-3-Object-prototype-toString-call"><a href="#3-3-3-3-Object-prototype-toString-call" class="headerlink" title="3.3.3.3 Object.prototype.toString.call"></a>3.3.3.3 <code>Object.prototype.toString.call</code></h6><p>使用 <code>Object.prototype.toString.call</code> 可以更精确地判断对象类型，特别在判定 Array 和 Null 等特殊对象时非常有效。</p><p><strong>示例</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="number">42</span>));              <span class="comment">// &quot;[object Number]&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="string">&quot;Hello&quot;</span>));         <span class="comment">// &quot;[object String]&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="literal">true</span>));            <span class="comment">// &quot;[object Boolean]&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="literal">undefined</span>));       <span class="comment">// &quot;[object Undefined]&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="literal">null</span>));            <span class="comment">// &quot;[object Null]&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="title class_">Symbol</span>()));        <span class="comment">// &quot;[object Symbol]&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="number">12345678901234567890n</span>));  <span class="comment">// &quot;[object BigInt]&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;Alice&quot;</span> &#125;));  <span class="comment">// &quot;[object Object]&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]));          <span class="comment">// &quot;[object Array]&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;));      <span class="comment">// &quot;[object Function]&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="keyword">new</span> <span class="title class_">Date</span>()));         <span class="comment">// &quot;[object Date]&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="regexp">/abc/</span>));              <span class="comment">// &quot;[object RegExp]&quot;</span></span><br></pre></td></tr></table></figure><p>以下是一个综合使用 <code>typeof</code>、<code>instanceof</code> 和 <code>Object.prototype.toString.call</code> 来判定变量类型的示例函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getType</span>(<span class="params">value</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (value === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;null&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;undefined&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (value <span class="keyword">instanceof</span> <span class="title class_">Array</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;array&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (value <span class="keyword">instanceof</span> <span class="title class_">Date</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;date&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (value <span class="keyword">instanceof</span> <span class="title class_">RegExp</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;regexp&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;object&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getType</span>(<span class="number">42</span>));           <span class="comment">// &quot;number&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getType</span>(<span class="string">&quot;Hello&quot;</span>));      <span class="comment">// &quot;string&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getType</span>(<span class="literal">true</span>));         <span class="comment">// &quot;boolean&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getType</span>(<span class="literal">undefined</span>));    <span class="comment">// &quot;undefined&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getType</span>(<span class="literal">null</span>));         <span class="comment">// &quot;null&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getType</span>(<span class="title class_">Symbol</span>()));     <span class="comment">// &quot;symbol&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getType</span>(<span class="number">12345678901234567890n</span>)); <span class="comment">// &quot;bigint&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getType</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;Alice&quot;</span> &#125;));  <span class="comment">// &quot;object&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getType</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]));          <span class="comment">// &quot;array&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getType</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;));      <span class="comment">// &quot;function&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getType</span>(<span class="keyword">new</span> <span class="title class_">Date</span>()));         <span class="comment">// &quot;date&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getType</span>(<span class="regexp">/abc/</span>));              <span class="comment">// &quot;regexp&quot;</span></span><br></pre></td></tr></table></figure><h6 id="3-3-3-4-总结"><a href="#3-3-3-4-总结" class="headerlink" title="3.3.3.4 总结"></a>3.3.3.4 总结</h6><p>JavaScript 变量类型包括基本类型和引用类型。为了正确判断变量的类型，可以使用多种方法：</p><ul><li><code>typeof</code>：适用于基本类型和一些特殊情况。</li><li><code>instanceof</code>：适用于引用类型的判定。</li><li><code>Object.prototype.toString.call</code>：适用于更精确的类型判定，包括特殊对象类型如 <code>Array</code> 和 <code>Null</code>。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> html css js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>24.3-5月总结</title>
      <link href="/2024/05/20/24-3-5%E6%9C%88%E6%80%BB%E7%BB%93/"/>
      <url>/2024/05/20/24-3-5%E6%9C%88%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h3 id="1-微信小程序"><a href="#1-微信小程序" class="headerlink" title="1 微信小程序"></a>1 微信小程序</h3><h4 id="1-1-rpx"><a href="#1-1-rpx" class="headerlink" title="1.1 rpx"></a>1.1 rpx</h4><p>rpx是处理不同设备，元素大小的一种方法。</p><p>微信小程序的宽度固定是750rpx ，高度的rpx由长宽比决定。</p><p>其他处理相对大小的方法：</p><ul><li>使用百分比（<code>%</code>），这种方式相对于父容器来定义高度，可以适用于一些需要相对高度的场景。</li><li>使用视窗高度（<code>vh</code>）来设置元素的高度。<code>vh</code>是CSS中的单位，其中<code>1vh</code>等于1%的视窗（viewport）高度（即浏览器高度）。</li></ul><h4 id="1-2-wxml-与html-区别"><a href="#1-2-wxml-与html-区别" class="headerlink" title="1.2 wxml 与html 区别"></a>1.2 wxml 与html 区别</h4><ol><li><strong>标签和属性</strong>：<ul><li>WXML为微信小程序特有的标记语言，它提供了一些自定义组件（如 <code>&lt;view&gt;</code>、<code>&lt;text&gt;</code> 等）来替代HTML中的标签（如 <code>&lt;div&gt;</code>、<code>&lt;span&gt;</code>）。</li><li>WXML中，<code>class</code>和<code>style</code>等属性可以动态绑定数据（使用<code>&#123;&#123;&#125;&#125;</code>语法，括号内加js语句），从而实现动态的样式和内容。</li></ul></li><li><strong>数据绑定</strong>：<ul><li>WXML提供类似Vue数据绑定，通过<code>&#123;&#123;&#125;&#125;</code>进行变量插值，很方便地将页面数据与逻辑层数据连接。</li></ul></li><li><strong>事件处理</strong>：<ul><li>WXML中的事件绑定使用<code>bind</code>或<code>catch</code>前缀（如<code>bindtap</code>、<code>catchtap</code>），而HTML中则使用<code>on</code>前缀（如<code>onclick</code>）。</li><li>微信小程序中的事件绑定允许开发者直接在WXML标签中定义处理函数，而不需要在页面加载后单独进行事件监听的设置。</li></ul></li><li><strong>条件渲染和列表渲染</strong>：<ul><li>WXML提供了类似Vue的<code>wx:if</code>、<code>wx:elif</code>、<code>wx:else</code>属性用于条件渲染，以及<code>wx:for</code>用于循环列表渲染。这些指令能够简化页面的动态内容生成。</li></ul></li></ol><h3 id="2-CSS"><a href="#2-CSS" class="headerlink" title="2 CSS"></a>2 CSS</h3><h4 id="2-1-display属性"><a href="#2-1-display属性" class="headerlink" title="2.1 display属性"></a>2.1 display属性</h4><ol><li><p>**<code>none</code>**：<br>元素不会被显示，并从文档流中移除，就好像它从来没有存在过一样。元素不占空间，它后面的元素会填补它原来的位置。</p></li><li><p>**<code>block</code>**：<br><strong>块级元素</strong>。这意味着元素会新起一行显示，并尽可能填满其父容器的宽度。块级元素可以设置宽度、高度、外边距（margin）和内边距（padding）。</p></li><li><p>**<code>inline</code>**：<br><strong>行内元素</strong>。元素不会新起一行，而是会和其他行内元素一样，在文本中同一行排列，只能在元素的前后添加内容。行内元素不能设置宽度和高度。</p></li><li><p>**<code>inline-block</code>**：<br>结合了<code>inline</code>和<code>block</code>的特性。元素同行内元素一样水平排列，但它可以像块级元素一样设置宽度、高度、外边距和内边距。</p></li><li><p>**<code>flex</code>**：<br>元素将变为弹性容器（flex container），其子元素（flex items）能使用弹性布局的属性。这是CSS3中引入的一种布局模式，能够简化复杂的布局设计。</p></li><li><p>**<code>grid</code>**：<br>类似于<code>flex</code>，<code>grid</code>也是CSS3引入的一种现代布局模式。元素将变为网格容器，其内部子元素可以放在网格布局中。它为复杂的二维布局提供了更为强大和灵活的解决方案。</p></li><li><p>**<code>table</code>**、<code>table-row</code>、<code>table-cell</code>等：<br>这一系列属性值将元素表现得像HTML中的表格元素一样。例如，<code>display: table;</code>可以将一个元素变为类似<code>&lt;table&gt;</code>的块级表格容器，而<code>display: table-cell;</code>则模仿了<code>&lt;td&gt;</code>的单元格盒子效果。</p><p>(注:需要使用表格，尽量用div元素再设置display为table)</p></li></ol><h4 id="2-2-position属性定位"><a href="#2-2-position属性定位" class="headerlink" title="2.2 position属性定位"></a>2.2 position属性定位</h4><ul><li>**<code>static</code>**（默认）：不进行特殊定位，元素出现在正常的流中。</li><li>**<code>relative</code>**：元素相对于其正常位置进行定位。</li><li>**<code>absolute</code>**：元素相对于最近的非static定位的祖先元素进行定位。</li><li>**<code>fixed</code>**：元素相对于浏览器窗口进行定位，即便窗口滚动，元素也会保持在指定的位置。</li><li>**<code>sticky</code>**：元素根据用户的滚动位置在<code>relative</code>和<code>fixed</code>定位之间切换。</li></ul><p>使用<code>left</code>、<code>right</code>、<code>top</code>、<code>bottom</code>属性取决于position属性的值</p><h4 id="2-3-flex弹性布局"><a href="#2-3-flex弹性布局" class="headerlink" title="2.3 flex弹性布局"></a>2.3 flex弹性布局</h4><p>属性</p><ul><li>flex-direction</li><li>flex-wrap</li><li>justify-content</li><li>align-items</li></ul><h5 id="2-3-1-flex-direction属性"><a href="#2-3-1-flex-direction属性" class="headerlink" title="2.3.1 flex-direction属性"></a>2.3.1 flex-direction属性</h5><p>flex-direction属性决定主轴的方向（即项目的排列方向）。</p><ul><li>row（默认值）：主轴为水平方向，起点在左端。</li><li>row-reverse：主轴为水平方向，起点在右端。</li><li>column：主轴为垂直方向，起点在上沿。</li><li>column-reverse：主轴为垂直方向，起点在下沿。</li></ul><h5 id="2-3-2-flex-wrap属性"><a href="#2-3-2-flex-wrap属性" class="headerlink" title="2.3.2 flex-wrap属性"></a>2.3.2 flex-wrap属性</h5><p>flex-wrap属性决定换行</p><ul><li>nowrap（默认）：不换行。</li><li>wrap：换行，第一行在上方。</li><li>wrap-reverse：换行，第一行在下方。</li></ul><h5 id="2-3-3-justify-content属性"><a href="#2-3-3-justify-content属性" class="headerlink" title="2.3.3 justify-content属性"></a>2.3.3 justify-content属性</h5><p>justify-content决定水平方向的对齐</p><ul><li>flex-start（默认值）：左对齐</li><li>flex-end：右对齐</li><li>center： 居中</li><li>space-between：两端对齐，项目之间的间隔都相等。</li><li>space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</li></ul><h5 id="2-3-4-align-items属性"><a href="#2-3-4-align-items属性" class="headerlink" title="2.3.4 align-items属性"></a>2.3.4 align-items属性</h5><p>align-items决定垂直方向的对齐</p><ul><li>flex-start：交叉轴的起点对齐。</li><li>flex-end：交叉轴的终点对齐。</li><li>center：交叉轴的中点对齐。</li><li>baseline: 项目的第一行文字的基线对齐。</li><li>stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</li></ul><h3 id="3-JS"><a href="#3-JS" class="headerlink" title="3 JS"></a>3 JS</h3><h4 id="3-1-DOM操作"><a href="#3-1-DOM操作" class="headerlink" title="3.1 DOM操作"></a>3.1 DOM操作</h4><h5 id="3-1-1-选择元素"><a href="#3-1-1-选择元素" class="headerlink" title="3.1.1 选择元素"></a>3.1.1 选择元素</h5><p>通过id选择 <code>    var element = document.getElementById(&#39;myElement&#39;);</code></p><p>通过类class选择 </p><p>​选一个 <code>var singleElement = document.querySelector(&#39;.myClass&#39;);</code></p><p>​选所有 <code>var multipleElements = document.querySelectorAll(&#39;.myClass&#39;);</code></p><p>jQuery写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $element = $(<span class="string">&#x27;#myElement&#x27;</span>); <span class="comment">// 使用ID选择器</span></span><br><span class="line"><span class="keyword">var</span> $singleElement = $(<span class="string">&#x27;.myClass&#x27;</span>); <span class="comment">// 使用类选择器,返回的是jQuery 对象集合</span></span><br><span class="line"><span class="keyword">var</span> $multipleElements = $(<span class="string">&#x27;.myClass&#x27;</span>); <span class="comment">// 使用类选择器，返回的是jQuery 对象集合</span></span><br></pre></td></tr></table></figure><h5 id="3-1-2-修改元素内容"><a href="#3-1-2-修改元素内容" class="headerlink" title="3.1.2 修改元素内容"></a>3.1.2 修改元素内容</h5><p>修改文本内容 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> element = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myElement&#x27;</span>);</span><br><span class="line">element.<span class="property">textContent</span> = <span class="string">&#x27;新的文本内容&#x27;</span>;</span><br></pre></td></tr></table></figure><p>修改html内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> element = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myElement&#x27;</span>);</span><br><span class="line">element.<span class="property">innerHTML</span> = <span class="string">&#x27;&lt;strong&gt;新的HTML内容&lt;/strong&gt;&#x27;</span>;</span><br></pre></td></tr></table></figure><p>jQuery写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $element = $(<span class="string">&#x27;#myElement&#x27;</span>);</span><br><span class="line">$element.<span class="title function_">text</span>(<span class="string">&#x27;新的文本内容&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> $element = $(<span class="string">&#x27;#myElement&#x27;</span>);</span><br><span class="line">$element.<span class="title function_">html</span>(<span class="string">&#x27;&lt;strong&gt;新的HTML内容&lt;/strong&gt;&#x27;</span>);</span><br></pre></td></tr></table></figure><h5 id="3-1-3-修改属性与样式"><a href="#3-1-3-修改属性与样式" class="headerlink" title="3.1.3 修改属性与样式"></a>3.1.3 修改属性与样式</h5><p>修改属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> element = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myElement&#x27;</span>);</span><br><span class="line">element.<span class="title function_">setAttribute</span>(<span class="string">&#x27;src&#x27;</span>, <span class="string">&#x27;newImage.jpg&#x27;</span>);</span><br><span class="line">element.<span class="property">src</span> = <span class="string">&#x27;newImage.jpg&#x27;</span>; <span class="comment">// 等效操作</span></span><br></pre></td></tr></table></figure><p>修改样式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> element = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myElement&#x27;</span>);</span><br><span class="line">element.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line">element.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&#x27;blue&#x27;</span>;</span><br></pre></td></tr></table></figure><p>jQuery写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $element = $(<span class="string">&#x27;#myElement&#x27;</span>);</span><br><span class="line">$element.<span class="title function_">attr</span>(<span class="string">&#x27;src&#x27;</span>, <span class="string">&#x27;newImage.jpg&#x27;</span>); <span class="comment">// 设置属性</span></span><br><span class="line"><span class="keyword">var</span> srcValue = $element.<span class="title function_">attr</span>(<span class="string">&#x27;src&#x27;</span>); <span class="comment">// 获取属性</span></span><br><span class="line"><span class="keyword">var</span> $element = $(<span class="string">&#x27;#myElement&#x27;</span>);</span><br><span class="line">$element.<span class="title function_">css</span>(<span class="string">&#x27;color&#x27;</span>, <span class="string">&#x27;red&#x27;</span>);</span><br><span class="line">$element.<span class="title function_">css</span>(<span class="string">&#x27;background-color&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>);</span><br></pre></td></tr></table></figure><h5 id="3-1-4-事件处理"><a href="#3-1-4-事件处理" class="headerlink" title="3.1.4 事件处理"></a>3.1.4 事件处理</h5><p>添加事件监听器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> element = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myElement&#x27;</span>);</span><br><span class="line">element.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;元素被点击了!&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="3-1-5-jQuery其他操作"><a href="#3-1-5-jQuery其他操作" class="headerlink" title="3.1.5 jQuery其他操作"></a>3.1.5 jQuery其他操作</h5><p>追加内容 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $parentElement = $(<span class="string">&#x27;#myElement&#x27;</span>);</span><br><span class="line">$parentElement.<span class="title function_">append</span>(<span class="string">&#x27;&lt;div&gt;新内容&lt;/div&gt;&#x27;</span>); <span class="comment">// 在元素内的末尾插入新内容</span></span><br><span class="line">$parentElement.<span class="title function_">prepend</span>(<span class="string">&#x27;&lt;div&gt;新内容&lt;/div&gt;&#x27;</span>); <span class="comment">// 在元素内的开头插入新内容</span></span><br></pre></td></tr></table></figure><p>移除元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $element = $(<span class="string">&#x27;#myElement&#x27;</span>);</span><br><span class="line">$element.<span class="title function_">remove</span>(); <span class="comment">// 移除元素</span></span><br></pre></td></tr></table></figure><h4 id="3-2-es6-新特性"><a href="#3-2-es6-新特性" class="headerlink" title="3.2 es6+新特性"></a>3.2 es6+新特性</h4><h5 id="3-2-1-块级作用域-let-const"><a href="#3-2-1-块级作用域-let-const" class="headerlink" title="3.2.1 块级作用域 let const"></a>3.2.1 块级作用域 let const</h5><p>变量声明可以用var const let 先来介绍下<strong>var为什么不行</strong></p><p><strong>特点</strong></p><ul><li><strong>函数作用域</strong>：使用<code>var</code>声明的变量是函数作用域的，这意味着它只能在声明它的函数内访问到。</li><li><strong>变量提升</strong>：<code>var</code>声明的变量在作用域内会被提升到作用域的顶部（hoisted），但变量提升只会提升声明，不会提升赋值。会被初始化为undefined</li><li><strong>可重新赋值</strong>：<code>var</code>声明的变量可以重新赋值</li></ul><p><strong>坏处</strong></p><ul><li>变量提升导致不小心在变量声明之前就使用它</li><li>缺乏块级作用域导致变量的修改意外地跨越代码块发生</li></ul><p><strong>let的特点</strong></p><ul><li><strong>块级作用域</strong>：<code>let</code>声明的变量在它们所在的任何块级作用域内有效。</li><li><strong>不可重复声明</strong>：在同一作用域内使用<code>let</code>声明的变量不能重新声明。</li><li><strong>变量提升但不初始化到undefined</strong>：<code>let</code>声明的变量会被提升到所在块的顶部，但不会初始化为<code>undefined</code>，在声明之前访问这些变量会导致<code>ReferenceError</code>。</li></ul><p><strong>const 的特点</strong></p><ul><li><p><strong>块级作用域</strong>：<code>const</code>声明的变量在它们所在的任何块级作用域内有效。</p></li><li><p><strong>不可重新赋值</strong>：<code>const</code>声明的变量在初始化之后无法重新赋值。注意，<code>const</code>声明的对象可以修改其属性。</p></li><li><p><strong>不可重复声明</strong>：与<code>let</code>相似，在同一作用域内使用<code>const</code>声明的变量不能重新声明。</p></li><li><p><strong>变量提升但不初始化到undefined</strong>：与<code>let</code>相似，<code>const</code>声明的变量会被提升到所在块的顶部，但不会初始化为<code>undefined</code>，在声明之前访问这些变量会导致<code>ReferenceError</code>。</p></li></ul><p><strong>总结和区别</strong></p><ul><li><strong>作用域</strong>：<ul><li><code>var</code>：函数作用域</li><li><code>let</code>：块级作用域</li><li><code>const</code>：块级作用域</li></ul></li><li><strong>变量提升</strong>：<ul><li><code>var</code>：变量提升并初始化为<code>undefined</code></li><li><code>let</code>：变量提升但不初始化</li><li><code>const</code>：变量提升但不初始化</li></ul></li><li><strong>可重新赋值性</strong>：<ul><li><code>var</code>：可以重新赋值</li><li><code>let</code>：可以重新赋值</li><li><code>const</code>：不可重新赋值，但对象的属性可以修改</li></ul></li><li><strong>不可重复声明</strong>：<ul><li><code>var</code>：在同一作用域内可重复声明（会覆盖之前的声明）</li><li><code>let</code>：在同一作用域内不可重复声明</li><li><code>const</code>：在同一作用域内不可重复声明</li></ul></li></ul><h5 id="3-2-2-箭头函数"><a href="#3-2-2-箭头函数" class="headerlink" title="3.2.2 箭头函数"></a>3.2.2 箭头函数</h5><p><strong>示例</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params">a, b</span>) =&gt; a + b;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">res =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (res.<span class="property">success</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">message</span>);</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;短信发送成功&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(res.<span class="property">message</span>);</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;短信发送失败&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>箭头函数主要特点</strong></p><ol><li><strong>简洁的语法</strong>：<ul><li>比传统的匿名函数语法简短，特别适合用于简短的回调函数。</li></ul></li><li>**词法的<code>this</code>**：<ul><li>箭头函数不会创建它自己的<code>this</code>上下文，<code>this</code>将保持为定义该箭头函数的上下文中的值。这在处理回调函数时特别有用，避免<code>this</code>值在不同上下文中的意外变化问题。</li></ul></li></ol><h5 id="3-2-3-模板字符串"><a href="#3-2-3-模板字符串" class="headerlink" title="3.2.3 模板字符串"></a>3.2.3 模板字符串</h5><p>使用反引号（&#96;&#96;&#96;）定义多行字符串和内插变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;John&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> greeting = <span class="string">`Hello, <span class="subst">$&#123;name&#125;</span>!`</span>;</span><br></pre></td></tr></table></figure><h3 id="4-NodeJS"><a href="#4-NodeJS" class="headerlink" title="4 NodeJS"></a>4 NodeJS</h3><h4 id="4-1-linux-NodeJs安装"><a href="#4-1-linux-NodeJs安装" class="headerlink" title="4.1 linux NodeJs安装"></a>4.1 linux NodeJs安装</h4><h5 id="4-1-1-下载nodejs"><a href="#4-1-1-下载nodejs" class="headerlink" title="4.1.1 下载nodejs"></a>4.1.1 下载nodejs</h5><p>去官网 <a href="https://nodejs.org/en/download/source-code">Node.js — Download Node.js® (nodejs.org)</a></p><p><img src="/../img/md/node-1.jpg"></p><p>右键复制链接</p><p>建议输入 <code>wget https://nodejs.org/dist/v20.15.1/node-v20.15.1-linux-x64.tar.xz</code></p><p>建议解压 <code>tar -xvf node-v20.15.1-linux-x64.tar.xz </code> </p><h5 id="4-1-2-设置软链接-供全局使用"><a href="#4-1-2-设置软链接-供全局使用" class="headerlink" title="4.1.2 设置软链接 供全局使用"></a>4.1.2 设置软链接 供全局使用</h5><p><code>ln -s /usr/local/node-v20.15.1-linux-x64/bin/node /usr/local/bin/node</code></p><p><code>ln -s /usr/local/node-v20.15.1-linux-x64/bin/npm /usr/local/bin/npm</code></p><p>设置好后 winscp可以看到</p><p><img src="/../img/md/node-2.png"></p><h5 id="4-1-3-配置环境，以防万一"><a href="#4-1-3-配置环境，以防万一" class="headerlink" title="4.1.3 配置环境，以防万一"></a>4.1.3 配置环境，以防万一</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//进入到profile文件</span><br><span class="line">vim /etc/profile  </span><br><span class="line">//在文件的末尾添加一下三行语句 (vim 操作命令可见此博客)</span><br><span class="line">export NODE_HOME=/usr/local/node-v20.15.1-linux-x64</span><br><span class="line">export PATH=$PATH:$NODE_HOME/bin</span><br><span class="line">export NODE_PATH=$NODE_HOME/lib/node_modules</span><br><span class="line">//按ESC键，再输入:wq保存并退出</span><br><span class="line">//配置完成后执行 </span><br><span class="line">source /etc/profile</span><br><span class="line">//在命令行中输入 node -v </span><br><span class="line">//为了保证每个账户下该配置均可用需要</span><br><span class="line">vim /root/.bashrc</span><br><span class="line">//在这个文件的末尾加上以下这句语句</span><br><span class="line">source etc/profile</span><br><span class="line">//按ESC键，再输入:wq保存并退出</span><br><span class="line">//成啦</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4-2-pm2操作"><a href="#4-2-pm2操作" class="headerlink" title="4.2 pm2操作"></a>4.2 pm2操作</h4><p>pm2安装 <code>npm install pm2 -g</code></p><p>pm2: linux系统下用来保证nodejs文件一直运行的软件</p><p>pm2常用命令</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">启动：pm2 start demo.js  //demo.js是你要启动的app_name|app_id文件</span><br><span class="line">停止：pm2 stop app_name|app_id</span><br><span class="line">删除：pm2 delete app_name|app_id</span><br><span class="line">重启：pm2 restart app_name|app_id</span><br><span class="line">停止所有：pm2 stop all</span><br><span class="line">查看所有的进程：pm2 list</span><br><span class="line">查看所有的进程状态：pm2 status</span><br><span class="line">查看某一个进程的信息：pm2 describe app_name|app_id</span><br><span class="line">参数说明</span><br><span class="line">--watch：监听应用目录源码的变化，一旦发生变化，自动重启。如果要精确监听、不见听的目录，最好通过配置文件</span><br><span class="line">-i --instances：启用多少个实例，可用于负载均衡。如果-i 0或者-i max，则根据当前机器核数确定实例数目，可以弥补node.js缺陷</span><br><span class="line">--ignore-watch：排除监听的目录/文件，可以是特定的文件名，也可以是正则。比如--ignore-watch=&quot;test node_modules &quot;some scripts&quot;</span><br><span class="line">-n --name：应用的名称，查看应用信息的时候可以用到</span><br><span class="line">-o --output &lt;path&gt;：标准输出日志文件的路径，有默认路径</span><br><span class="line">-e --error &lt;path&gt;：错误输出日志文件的路径，有默认路径</span><br><span class="line">--interpreter &lt;interpreter&gt;：the interpreter pm2 should use for executing app (bash, python...)</span><br><span class="line">如完整参数命令：</span><br><span class="line">pm2 start demo.js --watch -i 2   //开启2个进程</span><br><span class="line">pm2 start app.js -i max   //根据机器CPU核数，开启对应数目的进程 </span><br></pre></td></tr></table></figure><h4 id="4-3-vim"><a href="#4-3-vim" class="headerlink" title="4.3 vim"></a>4.3 vim</h4><p>linux文本编辑器</p><p>在 Vim 中，有三种主要的工作模式：</p><ol><li><strong>普通模式（Normal mode）</strong>：执行浏览和编辑命令。</li><li><strong>插入模式（Insert mode）</strong>：编辑文本，输入字符。</li><li><strong>命令模式（Command mode）</strong>：保存或退出文档，设置配置，运行宏等。</li></ol><p>一些Vim中常用的操作和命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">进入和退出</span><br><span class="line">vim 文件名：在终端中打开一个文件。</span><br><span class="line">:q：退出Vim（如果有未保存的更改，此命令会失败）。</span><br><span class="line">:q!：强制退出并丢弃所有更改。</span><br><span class="line">:w：保存文件。</span><br><span class="line">:wq或:x或ZZ：保存文件并退出。</span><br><span class="line">:w 文件名：保存文件到指定的文件名。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">普通模式：</span><br><span class="line">h、j、k、l：左、下、上、右移动光标。</span><br><span class="line">w和W：移动到下一个单词的开头。</span><br><span class="line">b和B：移动到上一个单词的开头。</span><br><span class="line">e和E：移动到下一个单词的末尾。</span><br><span class="line">0：移动到行首。</span><br><span class="line">$：移动到行末。</span><br><span class="line">gg：移动到文件的第一行。</span><br><span class="line">G：移动到文件的最后一行。</span><br><span class="line">Ctrl + f：向下滚动一页。</span><br><span class="line">Ctrl + b：向上滚动一页。</span><br><span class="line">dd：删除（剪切）当前行。</span><br><span class="line">yy：复制当前行。</span><br><span class="line">p：粘贴内容到光标后。</span><br><span class="line">u：撤销上一步操作。</span><br><span class="line">Ctrl + r：重做上一步被撤销的操作。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">插入模式：</span><br><span class="line">i：在光标位置进入插入模式。</span><br><span class="line">Esc：从插入模式返回普通模式。</span><br></pre></td></tr></table></figure><h3 id="5-异步操作-Promise-Async-Await"><a href="#5-异步操作-Promise-Async-Await" class="headerlink" title="5 异步操作 Promise Async Await"></a>5 异步操作 Promise Async Await</h3><p>在JavaScript中，异步操作通常用于执行耗时的任务，如数据请求、文件读写等，而不阻塞主线程的执行。回调函数是处理异步操作的一种方式，但如果使用不当，可能导致回调地狱（Callback Hell）的问题。而Promises提供了更好的异步操作管理方法。</p><h4 id="5-1-什么是Promise？"><a href="#5-1-什么是Promise？" class="headerlink" title="5.1 什么是Promise？"></a>5.1 什么是Promise？</h4><p>Promise是一个表示异步操作最终完成或失败的对象。它允许你为异步操作的成功值或失败原因编写处理方法。Promise有三种状态：</p><ul><li>Pending（等待态）：异步操作尚未完成。</li><li>Fulfilled（成功态）：异步操作成功完成。</li><li>Rejected（失败态）：异步操作失败。</li></ul><h4 id="5-2-创建与使用Promise"><a href="#5-2-创建与使用Promise" class="headerlink" title="5.2 创建与使用Promise"></a>5.2 创建与使用Promise</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 异步操作</span></span><br><span class="line">  <span class="keyword">const</span> success = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">if</span> (success) &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;Operation successful&#x27;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&#x27;Operation failed&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">promise</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value); <span class="comment">// &#x27;Operation successful&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(error); <span class="comment">// &#x27;Operation failed&#x27;</span></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h4 id="5-3-Promise链式调用"><a href="#5-3-Promise链式调用" class="headerlink" title="5.3 Promise链式调用"></a>5.3 Promise链式调用</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">doSomething</span>()</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> <span class="title function_">doSomethingElse</span>(result))</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">newResult</span> =&gt;</span> <span class="title function_">doThirdThing</span>(newResult))</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">finalResult</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Got the final result: <span class="subst">$&#123;finalResult&#125;</span>`</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(failureCallback);</span><br></pre></td></tr></table></figure><p>Promise链式调用中，每个<code>.then()</code>方法接收前一个<code>.then()</code>返回的结果作为输入，在链的任意位置抛出的错误（或被<code>reject</code>的Promise）都会被最近的<code>.catch()</code>处理。</p><h4 id="5-4-Promise-all"><a href="#5-4-Promise-all" class="headerlink" title="5.4 Promise.all"></a>5.4 Promise.all</h4><p><code>Promise.all()</code>可以将多个Promise实例包装成一个新的Promise实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise1 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">const</span> promise2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> <span class="built_in">setTimeout</span>(resolve, <span class="number">100</span>, <span class="string">&#x27;foo&#x27;</span>));</span><br><span class="line"><span class="keyword">const</span> promises = [promise1, promise2];</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>(promises)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">results</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> [result1, result2] = results;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result1); <span class="comment">// 3</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result2); <span class="comment">// &#x27;foo&#x27;</span></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>只有当所有Promise都fulfill了，由<code>Promise.all()</code>返回的新Promise才会fulfill，它的结果是一个数组，包含了所有传入的Promise的结果。如果传入的任意一个Promise被reject，新的Promise也会立即reject，并且reject的是第一个Promise的错误信息。</p><h4 id="5-5-async和await"><a href="#5-5-async和await" class="headerlink" title="5.5 async和await"></a>5.5 async和await</h4><h5 id="5-5-1-什么是aysnc-和-await"><a href="#5-5-1-什么是aysnc-和-await" class="headerlink" title="5.5.1 什么是aysnc 和 await"></a>5.5.1 什么是<code>aysnc</code> 和 <code>await</code></h5><ul><li><code>async</code> 关键字用来定义一个异步函数，函数中的操作默认返回一个Promise。</li><li><code>await</code> 关键字只能在<code>async</code>函数中使用，它使异步函数暂停执行，直到Promise解决，然后返回Promise的结果。</li></ul><h5 id="5-5-2-使用async-和-await基本示例"><a href="#5-5-2-使用async-和-await基本示例" class="headerlink" title="5.5.2 使用async 和 await基本示例"></a>5.5.2 使用<code>async</code> 和 <code>await</code>基本示例</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个返回Promise的函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fetchData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="string">&#x27;数据获取成功&#x27;</span>), <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用async和await获取数据</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Fetching data...&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">fetchData</span>(); <span class="comment">// 等待Promise解决</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// 输出：数据获取成功</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getData</span>();</span><br></pre></td></tr></table></figure><h5 id="5-5-3-错误处理"><a href="#5-5-3-错误处理" class="headerlink" title="5.5.3 错误处理"></a>5.5.3 错误处理</h5><p>使用<code>async</code>和<code>await</code>处理异步操作时，同样需要考虑错误处理。可以通过<code>try...catch</code>块来处理可能的异步操作错误：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getDataWithErrorHandling</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Fetching data...&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">fetchData</span>(); <span class="comment">// 等待Promise解决</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// 输出：数据获取成功</span></span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error fetching data:&#x27;</span>, error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getDataWithErrorHandling</span>();</span><br></pre></td></tr></table></figure><h5 id="5-5-4-多个异步操作进行交互"><a href="#5-5-4-多个异步操作进行交互" class="headerlink" title="5.5.4 多个异步操作进行交互"></a>5.5.4 多个异步操作进行交互</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fetchData1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="string">&#x27;数据1获取成功&#x27;</span>), <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fetchData2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="string">&#x27;数据2获取成功&#x27;</span>), <span class="number">500</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchDataSequentially</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> data1 = <span class="keyword">await</span> <span class="title function_">fetchData1</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data1); <span class="comment">// 数据1获取成功</span></span><br><span class="line">    <span class="keyword">const</span> data2 = <span class="keyword">await</span> <span class="title function_">fetchData2</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data2); <span class="comment">// 数据2获取成功</span></span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error fetching data:&#x27;</span>, error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fetchDataSequentially</span>();</span><br></pre></td></tr></table></figure><p>使用<code>await</code>时，每个异步操作是顺序执行的。这意味着如果你想并行执行多个异步操作，可以使用<code>Promise.all</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchDataConcurrently</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> [data1, data2] = <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>([<span class="title function_">fetchData1</span>(), <span class="title function_">fetchData2</span>()]);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data1); <span class="comment">// 数据1获取成功</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data2); <span class="comment">// 数据2获取成功</span></span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error fetching data:&#x27;</span>, error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fetchDataConcurrently</span>();</span><br></pre></td></tr></table></figure><h5 id="5-5-5-总结"><a href="#5-5-5-总结" class="headerlink" title="5.5.5 总结"></a>5.5.5 总结</h5><ul><li><strong><code>async</code>函数</strong>：定义异步函数，它返回一个Promise。</li><li><strong><code>await</code>关键字</strong>：暂停<code>async</code>函数的执行，等待Promise解决，并返回结果。它只能在<code>async</code>函数中使用。</li><li><strong>错误处理</strong>：使用<code>try...catch</code>块在异步函数中处理可能的错误。</li><li><strong>顺序操作</strong>：将多个异步操作顺序执行，通过多个<code>await</code>。</li></ul><p>通过使用<code>async</code>和<code>await</code>，可以使异步代码看起来更像是同步代码，增强代码的可读性和维护性。</p>]]></content>
      
      
      
        <tags>
            
            <tag> html css js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue笔记</title>
      <link href="/2024/04/15/Vue%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/04/15/Vue%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="Vue2"><a href="#Vue2" class="headerlink" title="Vue2"></a>Vue2</h2><h3 id="使用Vue"><a href="#使用Vue" class="headerlink" title="使用Vue"></a>使用Vue</h3><h4 id="引用Vue-js"><a href="#引用Vue-js" class="headerlink" title="引用Vue.js"></a>引用Vue.js</h4><p>1 放到body后，DOM加载完后引用 </p><p>2 先引用vue.js 再引用自己的js</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/jquery-3.5.1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/lookUp.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;vue_test&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>site : &#123;&#123;site&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>url : &#123;&#123;url&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;details()&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#vue_test&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">site</span>: <span class="string">&quot;Winter&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">url</span>: <span class="string">&quot;www.winterlee.top.com&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">details</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span>  <span class="variable language_">this</span>.<span class="property">site</span> + <span class="string">&quot; Winter&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>1.Vue构造器中参数el与DOM中元素的id保持一致</p><p>2.data用于定义属性，存放数据和变量</p><p>3.methods用于定义函数</p><h3 id="Vue指令"><a href="#Vue指令" class="headerlink" title="Vue指令"></a>Vue指令</h3><h4 id="v-html和v-text"><a href="#v-html和v-text" class="headerlink" title="v-html和v-text"></a>v-html和v-text</h4><p>v-html和v-text用来辅助渲染DOM元素的文本内容。</p><p>v-text（类似innerText）v-html（类似 innerHTML）</p><p>使用该标签属性后，会覆盖标签内部内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;msg&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">&#x27;html&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-text</span>=<span class="string">&#x27;name&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123; </span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">msg</span>: <span class="string">&#x27;!!!!!&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">name</span>: <span class="string">&#x27;winter&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">html</span>: <span class="string">`&lt;a href=&quot;http://www.winterlee.top&quot;&gt;winter的博客&lt;/a&gt;`</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h4><p>v-for 可以绑定数据到数组来渲染一个列表：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;province&quot;</span> &gt;</span>省份:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;province&quot;</span>  <span class="attr">name</span>=<span class="string">&quot;province&quot;</span> <span class="attr">onChange</span>=<span class="string">&quot;switchSubjects()&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">v-for</span>=<span class="string">&quot;(province,index) in provinces&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;province.value&quot;</span>&gt;</span>&#123;&#123;province.name&#125;&#125;<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>样例中provinces是Vue实例中的数据 province是其元素迭代别名 </p><p>v-for中的**:key后面跟唯一标识，确保列表项正确排序复用**</p><p><strong>为什么加key：</strong>Vue 的默认行为会尝试原地修改元素（<strong>就地复用</strong>）</p><h4 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h4><p>v-if用来显示或者隐藏元素，并控制元素的创建和移除：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;subject-row&quot;</span> <span class="attr">id</span>=<span class="string">&quot;type-0&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;type===0&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;subject-button&quot;</span> <span class="attr">name</span>=<span class="string">&quot;subject&quot;</span> <span class="attr">value</span>=<span class="string">&quot;文史&quot;</span></span></span><br><span class="line"><span class="tag">                @<span class="attr">click</span>=<span class="string">&quot;onActivateWenke&quot;</span> <span class="attr">id</span>=<span class="string">&quot;wenke&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;&#x27;active&#x27;:selectedWenke&#125;&quot;</span>&gt;</span>文科<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;subject-button&quot;</span> <span class="attr">name</span>=<span class="string">&quot;subject&quot;</span> <span class="attr">value</span>=<span class="string">&quot;理工&quot;</span></span></span><br><span class="line"><span class="tag">                @<span class="attr">click</span>=<span class="string">&quot;onActivateLike&quot;</span> <span class="attr">id</span>=<span class="string">&quot;like&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;&#x27;active&#x27;:selectedLike&#125;&quot;</span>&gt;</span>理科<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>v-if后面跟着JS语句 其值决定是否隐藏该元素</p><p>还有v-else-if v-else 需要跟在v-if或者v-else-if后面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;gender === 1&quot;</span>&gt;</span>性别：♂ 男<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else</span>=<span class="string">&quot;&quot;</span>&gt;</span>性别：♀ 女<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;score &gt; 90&quot;</span>&gt;</span>成绩评定A：奖励电脑一台<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else-if</span>=<span class="string">&quot;score &gt; 80&quot;</span>&gt;</span>成绩评定B：奖励周末郊游<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else-if</span>=<span class="string">&quot;score &gt; 70&quot;</span>&gt;</span>成绩评定C：奖励零食礼包<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else</span>=<span class="string">&quot;&quot;</span>&gt;</span>成绩评定D：惩罚一周不能玩手机<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">gender</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">score</span>: <span class="number">100</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="v-show和v-if的区别？"><a href="#v-show和v-if的区别？" class="headerlink" title="v-show和v-if的区别？"></a>v-show和v-if的区别？</h4><p>v-if用来显示或者隐藏元素，并控制元素的创建和移除</p><p>v-show切换css的display：none来控制显示隐藏</p><p>v-show适合频繁显示隐藏的，v-if则反之</p><h4 id="v-on-click-和-v-on-change"><a href="#v-on-click-和-v-on-change" class="headerlink" title="v-on:click 和 v-on:change"></a>v-on:click 和 v-on:change</h4><ul><li>&lt;button v-on:事件名&#x3D;”内联语句”&gt;按钮</button></li><li>&lt;button v-on:事件名&#x3D;”处理函数”&gt;按钮</button></li><li>&lt;button v-on:事件名&#x3D;”处理函数(实参)”&gt;按钮</button></li><li><code>v-on:</code> 简写为 <strong>@</strong></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;message&quot;</span>&gt;</span>一键智能查询<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>缩写是 @click和@change</p><h4 id="v-bind-和-v-model"><a href="#v-bind-和-v-model" class="headerlink" title="v-bind 和 v-model"></a>v-bind 和 v-model</h4><p>v-bind 绑定Vue数据到html元素</p><p><strong>作用：</strong>动态设置html的标签属性 比如：src、url、title</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;province&quot;</span>  <span class="attr">name</span>=<span class="string">&quot;province&quot;</span> <span class="attr">onChange</span>=<span class="string">&quot;switchSubjects()&quot;</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">v-for</span>=<span class="string">&quot;province in provinces&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;province.value&quot;</span>&gt;</span>&#123;&#123;province.name&#125;&#125;<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 其他省份 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里的:value 实际是 v-bind:value的<strong>简写</strong></p><p>v-model实现数据和html元素的<strong>双向绑定</strong></p><p><strong>作用：</strong> 给<strong>表单元素</strong>（input、radio、select）使用，双向绑定数据，可以快速 <strong>获取</strong> 或 <strong>设置</strong> 表单元素内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;score&quot;</span>&gt;</span>分数:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">id</span>=<span class="string">&quot;score&quot;</span> <span class="attr">name</span>=<span class="string">&quot;score&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入您的分数&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;score&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>改一个 变两个</p><h3 id="指令修饰符"><a href="#指令修饰符" class="headerlink" title="指令修饰符"></a>指令修饰符</h3><p>所谓指令修饰符就是通过<code>.</code>指明一些指令<strong>后缀</strong></p><p>不同<strong>后缀</strong>封装不同的处理操作  用于简化代码</p><h4 id="按键修饰符"><a href="#按键修饰符" class="headerlink" title="按键修饰符"></a><strong>按键修饰符</strong></h4><p>例如</p><p>@keyup.enter  —&gt;当松开enter键的时候才触发</p><h4 id="v-model修饰符"><a href="#v-model修饰符" class="headerlink" title="v-model修饰符"></a>v-model修饰符</h4><ul><li>v-model.trim  —&gt;去除首位空格</li><li>v-model.number —&gt;转数字</li></ul><h4 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h4><ul><li>@事件名.stop —&gt; 阻止冒泡（例如点击子元素，阻止父元素也被点击）</li><li>@事件名.prevent  —&gt;阻止默认行为</li><li>@事件名.stop.prevent —&gt;可以连用 即阻止事件冒泡也阻止默认行为</li></ul><h3 id="v-bind对样式的控制"><a href="#v-bind对样式的控制" class="headerlink" title="v-bind对样式的控制"></a>v-bind对样式的控制</h3><h4 id="v-bind控制class"><a href="#v-bind控制class" class="headerlink" title="v-bind控制class"></a>v-bind控制class</h4><p><strong>语法</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span> :class = &quot;对象/数组&quot;&gt;这是一个div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>对象语法</strong></p><p>当class动态绑定的是<strong>对象</strong>时，<strong>键就是类名，值就是布尔值</strong>，如果值是<strong>true</strong>，就有这个类，否则没有这个类</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;&#123; 类名1: 布尔值, 类名2: 布尔值 &#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>适用场景：</strong>一个类名，来回切换</p><p><strong>数组语法</strong></p><p>当class动态绑定的是<strong>数组</strong>时 → 数组中所有的类，都会添加到盒子上，本质就是一个 class 列表</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;[ 类名1, 类名2, 类名3 ]&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>使用场景：</strong>需要对类批量添加或者删除时</p><h4 id="v-bind控制style"><a href="#v-bind控制style" class="headerlink" title="v-bind控制style"></a>v-bind控制style</h4><p><strong>语法</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;&#123; CSS属性名1: CSS属性值, CSS属性名2: CSS属性值 &#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong> 属性键名不能用横杠 需使用引号或者驼峰</p><h3 id="v-model应用表单元素"><a href="#v-model应用表单元素" class="headerlink" title="v-model应用表单元素"></a>v-model应用表单元素</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入框  <span class="attr">input</span>:text   ——&gt; value</span><br><span class="line">文本域  textarea ——&gt; value</span><br><span class="line">复选框  <span class="attr">input</span>:checkbox  ——&gt; checked</span><br><span class="line">单选框  <span class="attr">input</span>:radio   ——&gt; checked</span><br><span class="line">下拉菜单 select    ——&gt; value</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="计算属性computed"><a href="#计算属性computed" class="headerlink" title="计算属性computed"></a>计算属性computed</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p><strong>概念</strong></p><p>基于<strong>现有的数据</strong>，计算出来的<strong>新属性</strong>。 <strong>依赖</strong>的数据变化，<strong>自动</strong>重新计算。</p><p><strong>语法</strong></p><ol><li>声明在 <strong>computed 配置项</strong>中，一个计算属性对应一个函数</li><li>使用起来和普通属性一样使用  </li></ol><p><strong>注意</strong></p><ol><li>computed配置项和data配置项是<strong>同级</strong>的</li><li>computed中的计算属性<strong>虽然是函数的写法</strong>，但他<strong>依然是个属性</strong></li><li>computed中的计算属性<strong>不能</strong>和data中的属性<strong>同名</strong></li><li>使用computed中的计算属性和使用data中的属性是一样的用法</li><li>computed中计算属性内部的<strong>this</strong>依然<strong>指向的是Vue实例</strong></li></ol><h4 id="computed的简易使用"><a href="#computed的简易使用" class="headerlink" title="computed的简易使用"></a>computed的简易使用</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    <span class="attr">computed</span>:&#123;</span><br><span class="line">        <span class="comment">/*计算属性名()&#123;</span></span><br><span class="line"><span class="comment">  ...</span></span><br><span class="line"><span class="comment">        &#125; */</span></span><br><span class="line">        <span class="title function_">totalCount</span>(<span class="params"></span>) &#123;</span><br><span class="line">          <span class="keyword">let</span> total = <span class="variable language_">this</span>.<span class="property">list</span>.<span class="title function_">reduce</span>(<span class="function">(<span class="params">sum, item</span>) =&gt;</span> sum + item.<span class="property">num</span>, <span class="number">0</span>)</span><br><span class="line">          <span class="keyword">return</span> total</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>总数：&#123;&#123;totalCount&#125;&#125; 个<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="计算属性完整写法"><a href="#计算属性完整写法" class="headerlink" title="计算属性完整写法"></a>计算属性完整写法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">computed:&#123;</span></span><br><span class="line"><span class="comment">对象名:&#123;</span></span><br><span class="line"><span class="comment">get()&#123; 计算属性被调用时 get方法被调用</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#125;，</span></span><br><span class="line"><span class="comment">set(newValue)&#123; 计算属性改变时set方法被调用，且计算属性的新值作为newValue传到set里</span></span><br><span class="line"><span class="comment">...</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">        <span class="attr">fullName</span>:&#123;</span><br><span class="line">          <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="variable language_">this</span>.<span class="property">lastName</span>;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="title function_">set</span>(<span class="params">newValue</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">firstName</span> = (newValue.<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">1</span>))</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">lastName</span> = (newValue.<span class="title function_">slice</span>(<span class="number">1</span>))</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>即 获取+设置 </p><p>一个计算属性被获取时被调用，一个计算属性被设置时被调用</p><h4 id="computed的优势-缓存特性"><a href="#computed的优势-缓存特性" class="headerlink" title="computed的优势-缓存特性"></a>computed的优势-缓存特性</h4><p> 计算属性会对计算出来的结果，之后被调用会直接读取缓存</p><p>依赖项变化后，会重新计算再缓存</p><p><strong>多次调用只计算一次</strong></p><h3 id="watch监视器"><a href="#watch监视器" class="headerlink" title="watch监视器"></a>watch监视器</h3><p><strong>监视数据变化</strong>，执行一些业务逻辑</p><p>简单写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">data</span>:&#123;</span><br><span class="line">    <span class="attr">words</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">watch</span>:&#123;</span><br><span class="line">    <span class="title function_">words</span>(<span class="params">newValue,oldValue</span>)&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整写法(对多个数据监视或者有其他要求时)</p><ol><li>deep:true 对复杂类型进行深度监听 （对象中的属性，只要一个变了就被监听到）</li><li>immediate:true 初始化 立刻执行一次（一进页面，立刻执行一次）</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">data</span>: &#123;</span><br><span class="line">  <span class="attr">obj</span>: &#123;</span><br><span class="line">    <span class="attr">words</span>: <span class="string">&#x27;苹果&#x27;</span>,</span><br><span class="line">    <span class="attr">lang</span>: <span class="string">&#x27;italy&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="attr">watch</span>: &#123;<span class="comment">// watch 完整写法</span></span><br><span class="line">  对象: &#123;</span><br><span class="line">    <span class="attr">deep</span>: <span class="literal">true</span>, <span class="comment">// 深度监视</span></span><br><span class="line">    <span class="attr">immdiate</span>:<span class="literal">true</span>,<span class="comment">//一进页面，立即执行handler函数</span></span><br><span class="line">    handler (newValue) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(newValue)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><strong>防抖</strong> 延迟执行，一定时间没有执行后再请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">watch</span>: &#123;</span><br><span class="line">          <span class="attr">obj</span>:&#123;</span><br><span class="line">            <span class="attr">deep</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">immediate</span>: <span class="literal">true</span>,</span><br><span class="line">            handler (newValue, oldValue) &#123;</span><br><span class="line">            <span class="built_in">clearTimeout</span>(<span class="variable language_">this</span>.<span class="property">timer</span>)</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">timer</span> = <span class="built_in">setTimeout</span>(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">              <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">axios</span>(&#123;</span><br><span class="line">              <span class="attr">url</span>:<span class="string">&#x27;https://applet-base-api-t.itheima.net/api/translate&#x27;</span>,</span><br><span class="line">              <span class="attr">params</span>:&#123;</span><br><span class="line">                <span class="attr">words</span>: <span class="variable language_">this</span>.<span class="property">words</span>,</span><br><span class="line">                <span class="attr">lang</span>: <span class="variable language_">this</span>.<span class="property">lang</span></span><br><span class="line">              &#125;</span><br><span class="line">              &#125;)</span><br><span class="line">              <span class="variable language_">this</span>.<span class="property">result</span> =res.<span class="property">data</span>.<span class="property">data</span>;</span><br><span class="line">              <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>.<span class="property">data</span>);</span><br><span class="line">              &#125;,<span class="number">300</span>)</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="Vue生命周期"><a href="#Vue生命周期" class="headerlink" title="Vue生命周期"></a>Vue生命周期</h3><p><strong>生命周期：</strong>一个Vue实例从创建到销毁的整个过程</p><p><strong>四个阶段</strong>：<strong>创建，挂载，更新，销毁</strong></p><p>1.创建阶段：创建响应式数据</p><p>2.挂载阶段：渲染模板</p><p>3.更新阶段：修改数据，更新视图</p><p>4.销毁阶段：销毁Vue实例</p><p><img src="/..%5Cimg%5Cmd%5CVue%E5%AE%9E%E4%BE%8B%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png"></p><p><strong>初始化渲染请求的时间</strong> 创建阶段结束后</p><p><strong>操作dom的时间</strong> 挂载阶段结束后</p><h4 id="Vue生命周期函数（钩子函数）"><a href="#Vue生命周期函数（钩子函数）" class="headerlink" title="Vue生命周期函数（钩子函数）"></a>Vue生命周期函数（钩子函数）</h4><p>Vue生命周期过程中，会<strong>自动运行一些函数</strong>，被称为【<strong>生命周期钩子</strong>】→  让开发者可以在【<strong>特定阶段</strong>】运行<strong>自己的代码</strong></p><p><img src="/..%5Cimg%5Cmd%5CVue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%87%BD%E6%95%B0.png"></p><p><strong>created</strong> 发送初始化渲染请求</p><p><strong>mounted</strong> 操作dom</p><p><strong>beforeUpdate</strong>和<strong>updated</strong>只有 修改数据才会被调用</p><p><strong>beforeUpdate</strong>里 数据已经修改 但视图还没更新</p><p><strong>updated</strong>里 数据已经修改 视图也已经更新</p><p><strong>beforedestroy</strong> 释放Vue实例以外 的资源</p><h3 id="Vue工程化开发版本对应"><a href="#Vue工程化开发版本对应" class="headerlink" title="Vue工程化开发版本对应"></a>Vue工程化开发版本对应</h3><p>Vue<strong>2</strong>—VueRouter<strong>3</strong>.x—Vuex<strong>3</strong>.x</p><p>Vue<strong>3</strong>—VueRouter<strong>4</strong>.x—Vuex<strong>4</strong>.x</p><h3 id="Vue工程化开发和脚手架"><a href="#Vue工程化开发和脚手架" class="headerlink" title="Vue工程化开发和脚手架"></a>Vue工程化开发和脚手架</h3><h4 id="开发Vue的两种方式"><a href="#开发Vue的两种方式" class="headerlink" title="开发Vue的两种方式"></a>开发Vue的两种方式</h4><ul><li><p>核心包传统开发模式：基于html &#x2F; css &#x2F; js 文件，直接引入核心包，开发 Vue。</p></li><li><p><strong>工程化开发模式：基于构建工具（例如：webpack）的环境中开发Vue。</strong></p><p><img src="/..%5Cimg%5Cmd%5CVue%E5%B7%A5%E7%A8%8B%E5%8C%96%E5%BC%80%E5%8F%91.png"></p></li></ul><h4 id="脚手架Vue-CLI"><a href="#脚手架Vue-CLI" class="headerlink" title="脚手架Vue CLI"></a>脚手架Vue CLI</h4><p><strong>基本概念</strong></p><p> Vue CLI 是Vue官方提供的一个<strong>全局命令工具</strong></p><p>   可以帮助我们<strong>快速创建</strong>一个开发Vue项目的<strong>标准化基础架子</strong>。【集成了webpack配置】</p><p><strong>好处：</strong></p><ol><li>零配置</li><li>内置babel等工具</li><li>标准化的webpack配置</li></ol><p><strong>使用步骤：</strong></p><ol><li>全局安装（只需安装一次即可） yarn global add @vue&#x2F;cli 或者 npm i @vue&#x2F;cli -g</li><li>查看vue&#x2F;cli版本： vue –version</li><li>创建项目架子：<strong>vue create project-name</strong>(项目名不能使用中文)</li><li>启动项目：<strong>yarn serve</strong> 或者 <strong>npm run serve</strong>(命令不固定，找package.json)</li></ol><h3 id="VueCLi自定义创建项目"><a href="#VueCLi自定义创建项目" class="headerlink" title="VueCLi自定义创建项目"></a>VueCLi自定义创建项目</h3><p>1.安装脚手架 (已安装)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i @vue/cli -g</span><br></pre></td></tr></table></figure><p>2.创建项目</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create hm-exp-mobile</span><br></pre></td></tr></table></figure><ul><li>选项</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span> <span class="variable constant_">CLI</span> v5<span class="number">.0</span><span class="number">.8</span></span><br><span class="line">? <span class="title class_">Please</span> pick a <span class="attr">preset</span>:</span><br><span class="line">  <span class="title class_">Default</span> ([<span class="title class_">Vue</span> <span class="number">3</span>] babel, eslint)</span><br><span class="line">  <span class="title class_">Default</span> ([<span class="title class_">Vue</span> <span class="number">2</span>] babel, eslint)</span><br><span class="line">&gt; <span class="title class_">Manually</span> select features     选自定义</span><br></pre></td></tr></table></figure><p><img src="/..%5Cimg%5Cmd%5CVue%E8%87%AA%E5%AE%9A%E4%B9%89%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE.png"></p><ul><li>选择Vue版本</li><li>是否使用history模式 （项目目录不带#）</li><li>选择css预处理</li><li>选择eslint风格（代码规范校验工具）</li><li>选择校验的时机</li><li>配置文件的生成方式 独立的还是统一在package.json里</li><li>是否保存预设</li></ul><h3 id="Vue项目目录介绍和运行流程"><a href="#Vue项目目录介绍和运行流程" class="headerlink" title="Vue项目目录介绍和运行流程"></a>Vue项目目录介绍和运行流程</h3><h4 id="项目目录介绍"><a href="#项目目录介绍" class="headerlink" title="项目目录介绍"></a>项目目录介绍</h4><p><img src="/..%5Cimg%5Cmd%5CVue%E9%A1%B9%E7%9B%AE%E7%9B%AE%E5%BD%95%E4%BB%8B%E7%BB%8D.png"></p><p><strong>重点</strong></p><ol><li>main.js  入口文件</li><li>App.vue  App根组件  （vue实例都在这写）</li><li>index.html 模板文件</li></ol><h4 id="运行流程"><a href="#运行流程" class="headerlink" title="运行流程"></a>运行流程</h4><p><img src="/..%5Cimg%5Cmd%5CVue%E5%B7%A5%E7%A8%8B%E9%A1%B9%E7%9B%AE%E8%BF%90%E8%A1%8C%E6%B5%81%E7%A8%8B.png"></p><p>main.js代码示例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入Vue</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//导入App.vue</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//当前出于生产环境还是开发环境</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="comment">// el:&#x27;#app&#x27; 和 $mount(&#x27;#app)一样</span></span><br><span class="line">  <span class="comment">// render: h =&gt; h(App) 和下方一样 h和create都是形参</span></span><br><span class="line">  <span class="attr">render</span>: <span class="function">(<span class="params">createElement</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">createElement</span>(<span class="title class_">App</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="组件化开发"><a href="#组件化开发" class="headerlink" title="组件化开发"></a>组件化开发</h4><p><strong>组件化</strong>：一个页面可以拆分成一个个组件，每个组件有着自己独立的结构、样式、行为。</p><p><strong>好处</strong>：便于维护，利于复用 → 提升开发效率。</p><p>​     <strong>组件分类</strong>：普通组件、根组件。</p><p>​      比如：下面这个页面，可以把所有的代码都写在一个页面中，但是这样显得代码比较混乱，难易维护。可以按模块进行组件划分</p><p><img src="/..%5Cimg%5Cmd%5CVue%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91.png"></p><h3 id="根组件-App-vue"><a href="#根组件-App-vue" class="headerlink" title="根组件 App.vue"></a>根组件 App.vue</h3><p>根组件包裹所有组件</p><ul><li><p>三部分构成</p><ul><li>template：结构 （有且只能一个根元素）</li><li>script:   js逻辑 </li><li>style： 样式 (可支持less，需要装包)</li></ul></li><li><p>让组件支持less</p><p>（1） style标签，lang&#x3D;”less” 开启less功能 </p><p>（2） 装包: yarn add less less-loader -D 或者npm i less less-loader -D</p></li></ul><p>示例代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 结构 vue2只支持一个根节点--&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;App&quot; &gt;</span><br><span class="line">    &lt;!-- 头 --&gt;</span><br><span class="line">    &lt;WinterHeader&gt;&lt;/WinterHeader&gt;</span><br><span class="line">    &lt;WinterHeader&gt;&lt;/WinterHeader&gt;</span><br><span class="line">    &lt;!-- 组 --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 底 --&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import WinterHeader from &#x27;./components/WinterHeader.vue&#x27;;</span><br><span class="line">// 导出的是当前组件的配置项</span><br><span class="line">// 里面可以提供 data(特殊) methods computed watch 生命周期八大钩子</span><br><span class="line">export default &#123;</span><br><span class="line">  components:&#123;</span><br><span class="line">    WinterHeader: WinterHeader</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;less&quot;&gt;</span><br><span class="line">/* 支持less 需要1 加上lang=&quot;less&quot; 2 安装依赖包 less less-loader*/</span><br><span class="line">.App &#123;</span><br><span class="line">  width: 600px;</span><br><span class="line">  height: 700px;</span><br><span class="line">  background-color: skyblue;</span><br><span class="line">  margin: 0 auto;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="普通组件的注册使用-局部注册"><a href="#普通组件的注册使用-局部注册" class="headerlink" title="普通组件的注册使用-局部注册"></a>普通组件的注册使用-局部注册</h3><p><strong>局部注册</strong>(只能在注册的组件内使用)</p><ol><li><p>创建.vue文件</p></li><li><p>在使用的组件.vue内先导入再注册，最后使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 导入</span><br><span class="line">...</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import 组件对象 from &#x27;.vue文件路径&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">    components:&#123;</span><br><span class="line">        组件名: 组件对象,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p><strong>使用方式</strong> 当成html标签即可 &lt;组件名&gt;&lt;&#x2F;组件名&gt;</p></li><li><p><strong>组件名规范</strong> —&gt; 大驼峰命名法 如WinterHeader</p></li></ol><h3 id="普通组件的注册使用-全局注册"><a href="#普通组件的注册使用-全局注册" class="headerlink" title="普通组件的注册使用-全局注册"></a>普通组件的注册使用-全局注册</h3><p><strong>全局注册</strong>（在项目的任何组件中都能使用）</p><ol><li><p>创建vue组件</p></li><li><p><strong>main.js</strong>中进行全局注册</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> 组件对象 <span class="keyword">from</span> <span class="string">&#x27;.vue文件路径&#x27;</span></span><br><span class="line">vue.<span class="title function_">component</span>(<span class="string">&#x27;组件名&#x27;</span>, 组件对象)</span><br></pre></td></tr></table></figure></li><li><p><strong>使用方式</strong> 当成html标签即可 &lt;组件名&gt;&lt;&#x2F;组件名&gt;</p></li></ol><p>vscode vue不高亮 有的文件夹没有图标</p><p>微软账号改 发送邮箱</p><h3 id="scoped解决样式冲突"><a href="#scoped解决样式冲突" class="headerlink" title="scoped解决样式冲突"></a>scoped解决样式冲突</h3><p>scoped 让组件的样式是独立的，只作用于当前组件</p><p><strong>scoped使用</strong> </p><p>给style添加<strong>scoped属性</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt; ... &lt;/template&gt;</span><br><span class="line">&lt;script&gt; ... &lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt; ... &lt;/style&gt;</span><br></pre></td></tr></table></figure><p><strong>scoped原理</strong></p><p>当前组件内标签都被添加<strong>data-v-hash值</strong> 的属性 </p><h3 id="组件的数据-data必须写成函数"><a href="#组件的数据-data必须写成函数" class="headerlink" title="组件的数据 data必须写成函数"></a>组件的数据 data必须写成函数</h3><p>写成函数的<strong>目的</strong>是 让每一个组件实例的数据是独立的</p><p>示例代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt; ... &lt;/template&gt;</span><br><span class="line">&lt;script&gt; </span><br><span class="line">export default &#123;</span><br><span class="line">    data () &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            数据1: &#x27;&#x27;,</span><br><span class="line">           数据2: &#x27;&#x27;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style &gt; ... &lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="组件通信"><a href="#组件通信" class="headerlink" title="组件通信"></a>组件通信</h3><p><strong>组件通信：</strong>组件通信，就是指<strong>组件与组件</strong>之间的<strong>数据传递</strong></p><p><strong>组件关系</strong>:  父子关系，非父子关系</p><h4 id="不同关系的组件通信"><a href="#不同关系的组件通信" class="headerlink" title="不同关系的组件通信"></a>不同关系的组件通信</h4><p><img src="/..%5Cimg%5Cmd%5CVue%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1.png"></p><h4 id="父子通信流程与示例"><a href="#父子通信流程与示例" class="headerlink" title="父子通信流程与示例"></a>父子通信流程与示例</h4><p><strong>流程</strong></p><ol><li>父组件 在标签里<code>:数据名=&quot;数据&quot;</code>传递子组件</li><li>子组件 <code>props[&#39;数据名&#39;]</code>接收数据，并通过<code>$emit(&#39;方法&#39;, &#39;数据新值&#39;)</code>通知父组件修改</li><li>父组件<code>@方法=&quot;父组件方法&quot;</code></li></ol><p><strong>示例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 父组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;app&quot;&gt;</span><br><span class="line">    //1. 标签里`:数据名=&quot;数据&quot;`传递给子组件</span><br><span class="line">    &lt;Son :data=&quot;true&quot; @changeData=&quot;handleChange&quot;&gt;&lt;/Son&gt;</span><br><span class="line">    //4. 父组件`@方法=&quot;父组件方法&quot;`</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">methods: &#123;</span><br><span class="line">        handleChange (newValue) &#123;</span><br><span class="line">            this.data = newValue</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">//子组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;son&quot;&gt;</span><br><span class="line">    我是Son组件 &#123;&#123;data&#125;&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;button @click=&quot;handleChange&quot;&gt;改数据&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  //2. 子组件 `props[&#x27;数据名&#x27;]`接收数据</span><br><span class="line">  props:[&#x27;data&#x27;],</span><br><span class="line">  methods:&#123;</span><br><span class="line">      handleChange () &#123;</span><br><span class="line">          //3. 并通过`$emit(&#x27;方法&#x27;, &#x27;数据新值&#x27;)`通知父组件修改</span><br><span class="line">          this.$emit(&#x27;changeData&#x27;, false)</span><br><span class="line">      &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="非父子组件通信-EventBus-事件总线"><a href="#非父子组件通信-EventBus-事件总线" class="headerlink" title="非父子组件通信-EventBus 事件总线"></a>非父子组件通信-EventBus 事件总线</h4><p><strong>步骤</strong></p><ol><li><p>创建一个所有组件都能访问的事件总线 （例如放在utils里 EventBus.js）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Bus</span> = <span class="keyword">new</span> <span class="title class_">Vue</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Bus</span></span><br></pre></td></tr></table></figure></li><li><p>B组件 （发送方），触发bus的￥emit事件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">import Bus from &#x27;../utils/EventBus&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  Bus.$emit(&#x27;sendMsg&#x27;,&#x27;消息&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>A组件 （接收方），监听Bus的 ￥on事件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">import Bus from &#x27;../utils/EventBus&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  Bus.$on(&#x27;sendMsg&#x27;, (msg) =&gt; &#123;</span><br><span class="line">      this.msg = msg</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ol><h4 id="跨层级的非父子组件通信-provide-inject"><a href="#跨层级的非父子组件通信-provide-inject" class="headerlink" title="跨层级的非父子组件通信-provide &amp; inject"></a>跨层级的非父子组件通信-provide &amp; inject</h4><p><strong>特点：</strong>跨层级共享数据</p><p>简单类型 （非响应式） </p><p>复杂类型 （响应式）</p><p><strong>步骤</strong></p><ol><li><p>父组件提供数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">provide () &#123;</span><br><span class="line">return &#123;</span><br><span class="line">           // 普通类型【非响应式】</span><br><span class="line">           color: this.color, </span><br><span class="line">           // 复杂类型【响应式】</span><br><span class="line">           userInfo: &#123;id: &#x27;1&#x27;, name: &#x27;winter&#x27;&#125;, </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>子&#x2F;孙组件 inject获取数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">inject:[&#x27;color&#x27;, &#x27;userInfo&#x27;]</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="props校验"><a href="#props校验" class="headerlink" title="props校验"></a>props校验</h3><p><strong>props概念</strong>:组件上注册的自定义属性，如<code>&lt;son :data1=&quot;&quot; :data2=&quot;&quot;&gt;&lt;son&gt;</code></p><p>使用方式</p><h4 id="props类型校验"><a href="#props类型校验" class="headerlink" title="props类型校验"></a>props类型校验</h4><ul><li><strong>类型校验</strong></li><li>非空校验</li><li>默认值</li><li>自定义校验</li></ul><p><strong>类型校验示例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//写在子组件script里</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    props:&#123;</span><br><span class="line">        data1: String,</span><br><span class="line">        data2: Boolean</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="props完整校验写法"><a href="#props完整校验写法" class="headerlink" title="props完整校验写法"></a>props完整校验写法</h4><p><strong>语法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    props:&#123;</span><br><span class="line">        data1:&#123;</span><br><span class="line">            type: 类型,  // Number String Boolean ...</span><br><span class="line">            required: true, // 是否必填</span><br><span class="line">            default: 默认值, // 默认值</span><br><span class="line">            validator (value) &#123;</span><br><span class="line">              // 自定义校验逻辑</span><br><span class="line">              return 是否通过校验</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">        data2: &#123;</span><br><span class="line">    ...</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="props-data、单向数据流"><a href="#props-data、单向数据流" class="headerlink" title="props &amp; data、单向数据流"></a>props &amp; data、单向数据流</h3><h4 id="props和data的区别"><a href="#props和data的区别" class="headerlink" title="props和data的区别"></a><strong>props</strong>和<strong>data</strong>的区别</h4><ul><li>data 的数据是子组件<strong>自己</strong>的  →   随便改  </li><li>prop 的数据是父组件<strong>外部</strong>的  →   不能直接改，要遵循 <strong>单向数据流</strong></li></ul><h4 id="单向数据流"><a href="#单向数据流" class="headerlink" title="单向数据流"></a>单向数据流</h4><p>父级的数据更新，会向下流动到子级的props里，影响这个子组件。这个数据流动是单向的</p><h3 id="v-model详解"><a href="#v-model详解" class="headerlink" title="v-model详解"></a>v-model详解</h3><h4 id="v-model原理"><a href="#v-model原理" class="headerlink" title="v-model原理"></a>v-model原理</h4><p>v-model本质是<strong>语法糖</strong>。例如输入框中，就是value属性和input属性的合写</p><p>不同表单元素v-model的语法糖不一样</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot; &gt;</span><br><span class="line">    &lt;input v-model=&quot;msg&quot; type=&quot;text&quot;&gt;</span><br><span class="line">      &lt;!-- 等同 --&gt;</span><br><span class="line">    &lt;input :value=&quot;msg&quot; @input=&quot;msg = $event.target.value&quot; type=&quot;text&quot;&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h4 id="v-model实现数据双向绑定，简化代码"><a href="#v-model实现数据双向绑定，简化代码" class="headerlink" title="v-model实现数据双向绑定，简化代码"></a>v-model实现数据双向绑定，简化代码</h4><p><strong>前提</strong> props通过<code>value</code>接收，事件触发<code>input</code></p><p><strong>示例</strong></p><p>子组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;select :value=&quot;value&quot; @change=&quot;handleChange&quot;&gt;...&lt;/select&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    props: &#123;</span><br><span class="line">      value: String</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      handleChange (e) &#123;</span><br><span class="line">        this.$emit(&#x27;input&#x27;, e.target.value)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>父组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;BaseSelect v-model=&quot;selectId&quot;&gt;&lt;/BaseSelect&gt;</span><br></pre></td></tr></table></figure><h4 id="Vue3-v-model原理"><a href="#Vue3-v-model原理" class="headerlink" title="Vue3 v-model原理"></a>Vue3 v-model原理</h4><p>vue3中的v-model语法糖统一成了 </p><p><code>:modelValue</code>和<code>@update:modelValue</code></p><p><strong>示例</strong></p><p>子组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">defineProps(&#123;</span><br><span class="line">  modelValue: &#123;</span><br><span class="line">    type: [Number, String]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">const emit = defineEmits([&#x27;update:modelValue&#x27;])</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;el-select</span><br><span class="line">        :modelValue=&quot;modelValue&quot;</span><br><span class="line">        @update:modelValue=&quot;emit(&#x27;update:modelValue&#x27;, $event)&quot;</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;el-option</span><br><span class="line">          v-for=&quot;channel in channelList&quot;</span><br><span class="line">          :key=&quot;channel.id&quot;</span><br><span class="line">          :label=&quot;channel.cate_name&quot;</span><br><span class="line">          :value=&quot;channel.id&quot;</span><br><span class="line">        &gt;&lt;/el-option&gt;</span><br><span class="line">      &lt;/el-select&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>父组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;channel-select v-model=&quot;params.cate_id&quot;&gt;&lt;/channel-select&gt;</span><br></pre></td></tr></table></figure><h3 id="sync修饰符"><a href="#sync修饰符" class="headerlink" title=".sync修饰符"></a>.sync修饰符</h3><p>和<strong>v-model相比</strong>也是语法糖，也用于父子组件数据的双向绑定，但是可以<strong>自定义props属性名</strong></p><p><strong>使用场景</strong>：封装表单元素用v-model，其他元素可以用.sync修饰符</p><p><strong>本质：</strong>.sync修饰符 就是 <strong>:属性名</strong> 和 <strong>@update:属性名</strong> 合写</p><p><strong>示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//父组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;select :visible:sync=&quot;isShow&quot;&gt;...&lt;/select&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p><strong>子组件：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    props: &#123;</span><br><span class="line">      visible: Boolean</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      handleChange (e) &#123;</span><br><span class="line">        this.$emit(&#x27;input&#x27;, e.target.value)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="ref和-refs"><a href="#ref和-refs" class="headerlink" title="ref和$refs"></a>ref和$refs</h3><p><strong>作用：</strong></p><ol><li>专门获取组件内部的dom元素</li><li>获得组件内部的方法</li></ol><p><strong>获取dom示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//某组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div ref=&quot;chartRef&quot;&gt;我是渲染图表的容器&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">   mounted () &#123;</span><br><span class="line">       console.log(this.$refs.chartRef)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>父组件获得子组件内部方法示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//父组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;son ref=&quot;chartRef&quot;&gt;我是渲染图表的容器&lt;/son&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">   mounted () &#123;</span><br><span class="line">       console.log(this.$refs.chartRef)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>获得组件内部方法示例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//父组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;son ref=&quot;chartRef&quot;&gt;我是渲染图表的容器&lt;/son&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">   mounted () &#123;</span><br><span class="line">       this.$refs.chartRef.method1()</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="Vue异步dom更新、-nextTick"><a href="#Vue异步dom更新、-nextTick" class="headerlink" title="Vue异步dom更新、$nextTick"></a>Vue异步dom更新、$nextTick</h3><p>Vue更新dom是异步的，所以用<code>$nextTick</code></p><p><code>$nextTick</code> 等DOM更新后，才会执行方法里的函数体</p><p><strong>示例</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.$nextTick(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">inp</span>.<span class="title function_">focus</span>()</span><br><span class="line"><span class="comment">//inp为refs的属性值</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>$nextTick 内的函数体 一定是<strong>箭头函数</strong>，这样才能让函数内部的this指向Vue实例</p><h3 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h3><p><strong>概念</strong>：自己定义的指令，可以<strong>封装一些DOM操作</strong>，扩展额外的功能</p><p><strong>注册</strong></p><ul><li><p>全局注册 在main.js里</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;指令名&#x27;</span>, &#123;</span><br><span class="line">    <span class="string">&quot;inserted&quot;</span> (el) &#123;</span><br><span class="line">        el.<span class="title function_">focus</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>局部注册 当前组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    directives: &#123;</span><br><span class="line">        &quot;指令名&quot;: &#123;</span><br><span class="line">            inserted(el) &#123;</span><br><span class="line">                el.focus()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul><p><strong>inserted</strong>:被绑定元素插入父节点时调用的钩子函数</p><p><strong>el</strong>：使用指令的那个DOM元素</p><p><strong>使用</strong></p><p>标签里添加属性<code>v-指令名</code></p><p><strong>自指令的值</strong></p><p>1.在绑定指令时，可以通过<code>v-指令名=值</code>的形式为指令 绑定 具体的参数值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-color</span>=<span class="string">&quot;color&quot;</span>&gt;</span>我是内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.通过 binding.value 可以拿到指令值，<strong>指令值修改会 触发 update 函数</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">directives: &#123;</span><br><span class="line">    color: &#123;</span><br><span class="line">        inserted (el, binding) &#123;</span><br><span class="line">          el.style.color = binding.value</span><br><span class="line">        &#125;,</span><br><span class="line">        update (el, binding) &#123;</span><br><span class="line">          el.style.color = binding.value</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h3><p>让我们在App.vue里使用组件<strong>内部结构</strong>支持<strong>自定义</strong> </p><h4 id="默认插槽用法"><a href="#默认插槽用法" class="headerlink" title="默认插槽用法"></a><strong>默认插槽用法</strong></h4><ol><li><p>组件内部需要定制的部分，使用<code>&lt;slot&gt;&lt;/slot&gt;</code>占位</p></li><li><p>使用组件时，<code>&lt;组件名&gt;&lt;/组件名&gt;</code>标签内部传入的结构会替换slot</p></li></ol><p><strong>示例代码</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 组件内部</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;dialog&quot;&gt;</span><br><span class="line">    &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// App.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;MyDialog&gt;</span><br><span class="line">        这部分内容会替换slot</span><br><span class="line">    &lt;/MyDialog&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p><strong>插槽后备内容（默认值）</strong> </p><p>封装组件时，可以为预留的 <code>&lt;slot&gt;</code> 插槽提供后备内容（默认内容）</p><p>当外部使用组件时，不传内容，则会显示slot槽内的后备内容</p><h4 id="具名插槽用法"><a href="#具名插槽用法" class="headerlink" title="具名插槽用法"></a><strong>具名插槽用法</strong></h4><p><strong>适用情形</strong>：当一个组件内有多处结构，需要外部传入标签进行定制时</p><ul><li><p>用name属性区分名字</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">        &lt;slot name=&quot;name1&quot;&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">        &lt;slot name=&quot;name2&quot;&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></li><li><p>template配合<code>v-slot:名字</code>或<code>#名字</code>分发标签</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;MyDialog&gt;</span><br><span class="line">&lt;template v-shot:name1&gt;</span><br><span class="line">    内容1</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">    &lt;template v-shot:name2&gt;</span><br><span class="line">    内容2</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">&lt;/MyDialog&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="作用域插槽（给插槽绑定数据）"><a href="#作用域插槽（给插槽绑定数据）" class="headerlink" title="作用域插槽（给插槽绑定数据）"></a><strong>作用域插槽（给插槽绑定数据）</strong></h4><p><strong>使用步骤</strong></p><ol><li><p>给slot标签以添加属性的方式传值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;slot :id=&quot;item.id&quot; msg=&quot;测试文本&quot;&gt;&lt;/slot&gt;</span><br></pre></td></tr></table></figure></li><li><p>所有添加的属性都会被收集到一个对象里</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; id: 3, msg: &#x27;测试文本&#x27; &#125;</span><br></pre></td></tr></table></figure></li><li><p>在template中，通过<code>#插槽名=obj</code>接收，默认插槽的话用<code>#default</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;MyTable :list=&quot;list&quot;&gt;</span><br><span class="line">  &lt;template #default=&quot;obj&quot;&gt;</span><br><span class="line">    &lt;button @click=&quot;del(obj.id)&quot;&gt;删除&lt;/button&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">&lt;/MyTable&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="路由入门"><a href="#路由入门" class="headerlink" title="路由入门"></a>路由入门</h3><p><strong>单页应用程序 SPA</strong>：是指所有的功能都在<strong>一个html页面</strong>上实现</p><p>vue经常用来开发单页应用</p><p><strong>Vue路由</strong>：<strong>访问路径</strong>和 <strong>组件</strong>的对应关系</p><h4 id="路由使用步骤"><a href="#路由使用步骤" class="headerlink" title="路由使用步骤"></a>路由使用步骤</h4><ol><li><p>下载VueRouter模块到当前工程，vue2使用3.x版本 vue3使用4.x版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i vue-router@3.6.5</span><br></pre></td></tr></table></figure></li><li><p><strong>main.js</strong>中引入<strong>VueRouter</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import VueRouter from <span class="string">&#x27;vue-router&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>main.js</strong>安装注册路由</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>)</span><br></pre></td></tr></table></figure></li><li><p><strong>main.js</strong>创建路由对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span></span><br></pre></td></tr></table></figure></li><li><p>将路由对象注入到Vue实例中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">  <span class="attr">router</span>:router</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p><strong>main.js</strong>创建需要的组件（views目录下），在步骤4里的路由对象配置路由规则</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Find</span> <span class="keyword">from</span> <span class="string">&#x27;./views/Find.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">My</span> <span class="keyword">from</span> <span class="string">&#x27;./views/My.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Friend</span> <span class="keyword">from</span> <span class="string">&#x27;./views/Friend.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//path 组件对应的路径 component 用到的组件</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/find&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Find</span>&#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/my&#x27;</span>, <span class="attr">component</span>: <span class="title class_">My</span>&#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/friend&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Friend</span>&#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>在App.vue里配置<strong>导航</strong>与<strong>路由出口</strong>（组件显示的位置）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;footer_wrap&quot;&gt;</span><br><span class="line">  &lt;a href=&quot;#/find&quot;&gt;发现音乐&lt;/a&gt;</span><br><span class="line">  &lt;a href=&quot;#/my&quot;&gt;我的音乐&lt;/a&gt;</span><br><span class="line">  &lt;a href=&quot;#/friend&quot;&gt;朋友&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;top&quot;&gt;</span><br><span class="line">  &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="路由进阶"><a href="#路由进阶" class="headerlink" title="路由进阶"></a>路由进阶</h3><h4 id="封装路由"><a href="#封装路由" class="headerlink" title="封装路由"></a>封装路由</h4><p><strong>步骤</strong></p><ol><li>将原先main.js里 <strong>导入VueRouter 安装注册路由  创建路由对象</strong> 这几步放到单独的js文件里</li><li>再将单独的js文件导出到 main.js</li></ol><p><img src="/..%5Cimg%5Cmd%5C%E5%B0%81%E8%A3%85%E8%B7%AF%E7%94%B1.png"></p><p><strong>路径简写：</strong>vue可以直接用@指代src目录 </p><p>不需要webpack中设置解析路径别名alias （创建vue项目时已自动设置）</p><h4 id="声明式导航-router-link组件-导航链接"><a href="#声明式导航-router-link组件-导航链接" class="headerlink" title="声明式导航 router-link组件 导航链接"></a>声明式导航 router-link组件 导航链接</h4><p>替代a标签 设置to属性 无需# <code>to=&quot;/路径值&quot;</code></p><p>router-link组件也是对a标签进行封装，样式设置在a标签上就可以了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link to=&#x27;page1&#x27;&gt;导航&lt;/router-link&gt;</span><br></pre></td></tr></table></figure><p>默认提供<strong>高亮类名</strong></p><h4 id="声明式导航-高亮类名"><a href="#声明式导航-高亮类名" class="headerlink" title="声明式导航 高亮类名"></a>声明式导航 高亮类名</h4><ul><li><p>router-link-active</p><p>模糊匹配（用的比较多） 可以匹配到以路径值开头的</p></li><li><p>router-link-exact-active</p><p>精准匹配 只能匹配到路径值</p></li></ul><h4 id="声明式导航-自定义类名"><a href="#声明式导航-自定义类名" class="headerlink" title="声明式导航 自定义类名"></a>声明式导航 自定义类名</h4><p>在创建路由对象时 添加属性 <code>linkActiveClass</code>,<code>linkExactActiveClass</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line"><span class="attr">routes</span>: [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/find&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Find</span>&#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/my&#x27;</span>, <span class="attr">component</span>: <span class="title class_">My</span>&#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/friend&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Friend</span>&#125;</span><br><span class="line">  ],</span><br><span class="line"><span class="attr">linkActiveClass</span>: <span class="string">&#x27;active&#x27;</span>,</span><br><span class="line"><span class="attr">linkExactActiveClass</span>: <span class="string">&#x27;exact-active&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="声明式导航-跳转传参"><a href="#声明式导航-跳转传参" class="headerlink" title="声明式导航 跳转传参"></a>声明式导航 跳转传参</h4><p><strong>查询参数传参</strong></p><ol><li><p>配置<code>router-link</code>的属性<code>to=&quot;/路径名?参数名=值&quot;</code></p></li><li><p>使用 <code>$route.query.参数名</code>获得参数</p></li></ol><p><strong>动态路由传参</strong></p><ol><li><p>创建路由对象时，配置路由的path为<code>/path/:参数</code></p></li><li><p>跳转时 to属性设置为 <code>/path/参数名 </code></p></li><li><p>接收时 <code>$route.params.参数名</code>获得参数</p></li></ol><p><strong>可选符</strong> 在创建路由对象配置path时 可以设置<code>/path/参数?</code>表明该参数可传可不传</p><p><strong>多个参数用查询参数传参，单个参数用动态路由传参</strong></p><h4 id="vue路由-重定向"><a href="#vue路由-重定向" class="headerlink" title="vue路由 重定向"></a>vue路由 重定向</h4><p><strong>示例</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">   <span class="attr">routes</span>: [</span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, <span class="attr">redirect</span>: <span class="string">&#x27;/home&#x27;</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="vue路由-404"><a href="#vue路由-404" class="headerlink" title="vue路由 404"></a>vue路由 404</h4><p>创建路由对象时 <strong>配置在路由规则的最后面</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">NotFound</span> <span class="keyword">from</span> <span class="string">&#x27;@/views/NotFound&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    ...</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;*&#x27;</span>, <span class="attr">component</span>: <span class="title class_">NotFound</span> &#125; <span class="comment">//最后一个</span></span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="vue路由-模式设置"><a href="#vue路由-模式设置" class="headerlink" title="vue路由 模式设置"></a>vue路由 模式设置</h4><p>路由的路径看起来不自然, 有#，更改路径形式的方法</p><ul><li>hash路由(默认)        例如:  <a href="http://localhost:8080/#/home">http://localhost:8080/#/home</a></li><li>history路由(常用)     例如: <a href="http://localhost:8080/home">http://localhost:8080/home</a>   (以后上线需要服务器端支持，开发环境webpack给规避掉了history模式的问题)</li></ul><p>创建路由对象时</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="attr">mode</span>:<span class="string">&#x27;histroy&#x27;</span>, <span class="comment">//默认是hash</span></span><br><span class="line">    <span class="attr">routes</span>:[]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="vue路由-导航跳转"><a href="#vue路由-导航跳转" class="headerlink" title="vue路由 导航跳转"></a>vue路由 导航跳转</h4><p><strong>path路径跳转</strong></p><p><strong>push</strong>语法 跳转保留原先的地址 可以返回</p><p><strong>replace</strong> 跳转不保留原先的地址 不可返回</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//简单写法</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="string">&#x27;路由路径&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//完整写法</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;路由路径&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>path路径传参 query传参</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="string">&#x27;/路径?参数名1=参数值1&amp;参数2=参数值2&#x27;</span>)</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;路由名字&#x27;</span>,</span><br><span class="line">  <span class="attr">query</span>: &#123;</span><br><span class="line">    参数名: <span class="string">&#x27;参数值&#x27;</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>path路径传参 动态路由params传参</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="string">&#x27;/路径/参数值&#x27;</span>)</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/路径/参数值&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>name命名跳转</strong></p><p>特点：适合 path 路径长的场景</p><p>语法：</p><ul><li><p>路由规则，必须配置name配置项</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">name</span>: <span class="string">&#x27;路由名&#x27;</span>, <span class="attr">path</span>: <span class="string">&#x27;/path/xxx&#x27;</span>, <span class="attr">component</span>: <span class="variable constant_">XXX</span> &#125;,</span><br></pre></td></tr></table></figure></li><li><p>通过name来进行跳转</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;路由名&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><p><strong>name命名传参 query传参</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;路由名字&#x27;</span>,</span><br><span class="line">  <span class="attr">query</span>: &#123;</span><br><span class="line">    参数名<span class="number">1</span>: <span class="string">&#x27;参数值1&#x27;</span>,</span><br><span class="line">    参数名<span class="number">2</span>: <span class="string">&#x27;参数值2&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>name命名传参 动态路由params传参</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;路由名字&#x27;</span>,</span><br><span class="line">  <span class="attr">params</span>: &#123;</span><br><span class="line">    参数名: <span class="string">&#x27;参数值&#x27;</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>跳转到上一页</strong></p><p><code>$router.back()</code></p><h4 id="vue嵌套路由"><a href="#vue嵌套路由" class="headerlink" title="vue嵌套路由"></a>vue嵌套路由</h4><p>在一级路由下，配置children属性即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line"><span class="attr">routes</span>: [</span><br><span class="line">&#123; <span class="attr">path</span>: <span class="string">&#x27;/first&#x27;</span>,</span><br><span class="line">          <span class="attr">component</span>: <span class="title class_">First</span>, </span><br><span class="line">          <span class="attr">children</span>: [</span><br><span class="line">              &#123; <span class="attr">path</span>: <span class="string">&#x27;/second&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Second</span> &#125;,</span><br><span class="line">              &#123; <span class="attr">path</span>: <span class="string">&#x27;/duo&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Duo</span> &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="路由拦截-全局前置守卫"><a href="#路由拦截-全局前置守卫" class="headerlink" title="路由拦截-全局前置守卫"></a>路由拦截-全局前置守卫</h4><p>路由导航守卫 - <a href="https://v3.router.vuejs.org/zh/guide/advanced/navigation-guards.html">全局前置守卫</a></p><p>1.所有的路由一旦被匹配到，都会先经过全局前置守卫</p><p>2.只有全局前置守卫放行，才会真正解析渲染组件，才能看到页面内容</p><p><strong>用途</strong>：一些页面不登陆不让看，点击那些页面时自动跳转到登录页</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vuerouter3.x的写法</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 1. to   往哪里去， 到哪去的路由信息对象  </span></span><br><span class="line">  <span class="comment">// 2. from 从哪里来， 从哪来的路由信息对象</span></span><br><span class="line">  <span class="comment">// 3. next() 是否放行</span></span><br><span class="line">  <span class="comment">//    如果next()调用，就是放行</span></span><br><span class="line">  <span class="comment">//    next(路径) 拦截到某个路径页面</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// vuerouter4.x写法</span></span><br><span class="line"><span class="comment">// 登录访问拦截</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to，<span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//不再有next参数</span></span><br><span class="line">  <span class="comment">//默认放行</span></span><br><span class="line">  <span class="comment">//如果返回了具体路径 就会拦截到对应页面</span></span><br><span class="line">  <span class="comment">//如果返回false 就会返回from</span></span><br><span class="line">  <span class="keyword">const</span> userStore = <span class="title function_">useUserStore</span>()</span><br><span class="line">  <span class="keyword">if</span> (!userStore.<span class="property">token</span> &amp;&amp; to.<span class="property">path</span> !== <span class="string">&#x27;/login&#x27;</span>) <span class="keyword">return</span> <span class="string">&#x27;/login&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="路由懒加载"><a href="#路由懒加载" class="headerlink" title="路由懒加载"></a>路由懒加载</h4><p>打包时，js包会很大。</p><p>路由懒加载 &amp; 异步组件， 不会一上来就将所有的组件都加载，而是访问到对应的路由了，才加载解析这个路由对应的所有组件</p><p>使用方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//路由文件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Login</span> <span class="keyword">from</span> <span class="string">&#x27;@/views/login&#x27;</span></span><br><span class="line"><span class="comment">//修改为</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Login</span> = (<span class="params"></span>) =&gt; <span class="keyword">import</span> (<span class="string">&#x27;@/views/login&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="VueRouter4-路由代码解析"><a href="#VueRouter4-路由代码解析" class="headerlink" title="VueRouter4  路由代码解析"></a>VueRouter4  路由代码解析</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// createRouter 创建路由实例，===&gt; new VueRouter()</span></span><br><span class="line"><span class="comment">// 1. history模式: createWebHistory()   http://xxx/user</span></span><br><span class="line"><span class="comment">// 2. hash模式: createWebHashHistory()  http://xxx/#/user</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// vite 的配置 import.meta.env.BASE_URL 是路由的基准地址，默认是 ’/‘</span></span><br><span class="line"><span class="comment">// https://vitejs.dev/guide/build.html#public-base-path</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果将来你部署的域名路径是：http://xxx/my-path/user</span></span><br><span class="line"><span class="comment">// vite.config.ts  添加配置  base: my-path，路由这就会加上 my-path 前缀了</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(<span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">env</span>.<span class="property">BASE_URL</span>),</span><br><span class="line">  <span class="attr">routes</span>: []</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><h4 id="Vue3-组合式API中获取路由"><a href="#Vue3-组合式API中获取路由" class="headerlink" title="Vue3 组合式API中获取路由"></a>Vue3 组合式API中获取路由</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123;useRouter, useRoute&#125; from &#x27;vue-router&#x27;</span><br><span class="line">//router用来获取路由对象</span><br><span class="line">const router = useRouter()</span><br><span class="line">//route用来获得当前页面的路由参数</span><br><span class="line">const route = useRoute()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="组件缓存-keep-alive"><a href="#组件缓存-keep-alive" class="headerlink" title="组件缓存 keep-alive"></a>组件缓存 keep-alive</h3><h4 id="keep-alive的三个属性"><a href="#keep-alive的三个属性" class="headerlink" title="keep-alive的三个属性"></a>keep-alive的三个属性</h4><ul><li>include 组件名数组， 只有匹配的组件<strong>会被缓存</strong></li><li>exclude 组件名数组， 匹配的组件<strong>不会被缓存</strong></li><li>max 最多可以缓存多少组件实例</li></ul><p>示例：</p><p>App.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;h5-wrapper&quot;&gt;</span><br><span class="line">    &lt;keep-alive :include=&quot;[&#x27;LayoutPage&#x27;]&quot;&gt;</span><br><span class="line">      &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">    &lt;/keep-alive&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>Layout.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &#x27;LayoutPage&#x27;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="额外的两个生命周期函数"><a href="#额外的两个生命周期函数" class="headerlink" title="额外的两个生命周期函数"></a>额外的两个生命周期函数</h4><p><strong>keep-alive的使用会触发两个生命周期函数</strong></p><p><strong>activated</strong> 当组件被激活（使用）的时候触发 →  进入这个页面的时候触发</p><p><strong>deactivated</strong> 当组件不被使用的时候触发      →  离开这个页面的时候触发</p><p>组件<strong>缓存后</strong>就<strong>不会执行</strong>组件的<strong>created, mounted, destroyed</strong> 等钩子了</p><p>所以其提供了<strong>actived 和deactived</strong>钩子，帮我们实现业务需求。</p><h3 id="ESlint代码规范"><a href="#ESlint代码规范" class="headerlink" title="ESlint代码规范"></a>ESlint代码规范</h3><h4 id="JavaScript-Standard-Style-规范说明"><a href="#JavaScript-Standard-Style-规范说明" class="headerlink" title="JavaScript Standard Style 规范说明"></a>JavaScript Standard Style 规范说明</h4><p><strong>多种eslint规范里的一种</strong></p><p> <a href="https://standardjs.com/rules-zhcn.html">https://standardjs.com/rules-zhcn.html</a></p><ul><li><em>字符串使用单引号</em> – 需要转义的地方除外</li><li><em>无分号</em> – <a href="http://blog.izs.me/post/2353458699/an-open-letter-to-javascript-leaders-regarding">这</a><a href="http://inimino.org/~inimino/blog/javascript_semicolons">没什么不好。</a><a href="https://www.youtube.com/watch?v=gsfbh17Ax9I">不骗你！</a></li><li><em>关键字后加空格</em> <code>if (condition) &#123; ... &#125;</code></li><li><em>函数名后加空格</em> <code>function name (arg) &#123; ... &#125;</code></li><li>坚持使用全等 <code>===</code> 摒弃 <code>==</code> 一但在需要检查 <code>null || undefined</code> 时可以使用 <code>obj == null</code></li></ul><h4 id="自动修正-ESlint插件"><a href="#自动修正-ESlint插件" class="headerlink" title="自动修正 ESlint插件"></a>自动修正 ESlint插件</h4><ol><li><p>vscode里安装ESlint插件</p></li><li><p>在vscode里的setting.json里添加配置</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当保存的时候，eslint自动帮我们修复错误</span></span><br><span class="line"><span class="attr">&quot;editor.codeActionsOnSave&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;source.fixAll&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="comment">// 保存代码，不自动格式化</span></span><br><span class="line"><span class="attr">&quot;editor.formatOnSave&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br></pre></td></tr></table></figure></li></ol><h4 id="prettier"><a href="#prettier" class="headerlink" title="prettier"></a>prettier</h4><p>格式化代码插件 可以不使用vscode插件 创建vue项目时选择即可</p><p><strong>配置文件 .eslintrc.cjs</strong></p><p>添加如下内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">rules</span>: &#123;</span><br><span class="line">  <span class="string">&#x27;prettier/prettier&#x27;</span>: [</span><br><span class="line">    <span class="string">&#x27;warn&#x27;</span>,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">singleQuote</span>: <span class="literal">true</span>, <span class="comment">// 单引号</span></span><br><span class="line">      <span class="attr">semi</span>: <span class="literal">false</span>, <span class="comment">// 无分号</span></span><br><span class="line">      <span class="attr">printWidth</span>: <span class="number">80</span>, <span class="comment">// 每行宽度至多80字符</span></span><br><span class="line">      <span class="attr">trailingComma</span>: <span class="string">&#x27;none&#x27;</span>, <span class="comment">// 不加对象|数组最后逗号</span></span><br><span class="line">      <span class="attr">endOfLine</span>: <span class="string">&#x27;auto&#x27;</span> <span class="comment">// 换行符号不限制（win mac 不一致）</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&#x27;vue/multi-word-component-names&#x27;</span>: [</span><br><span class="line">    <span class="string">&#x27;warn&#x27;</span>,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">ignores</span>: [<span class="string">&#x27;index&#x27;</span>] <span class="comment">// vue组件名称多单词组成（忽略index.vue）</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&#x27;vue/no-setup-props-destructure&#x27;</span>: [<span class="string">&#x27;off&#x27;</span>], <span class="comment">// 关闭 props 解构的校验</span></span><br><span class="line">  <span class="comment">// 💡 添加未定义变量错误提示，create-vue@3.6.3 关闭，这里加上是为了支持下一个章节演示。</span></span><br><span class="line">  <span class="string">&#x27;no-undef&#x27;</span>: <span class="string">&#x27;error&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>prettier 风格配置 <a href="https://prettier.io/docs/en/options.html">https://prettier.io</a></p><ol><li><p>单引号</p></li><li><p>不使用分号</p></li><li><p>每行宽度至多80字符</p></li><li><p>不加对象|数组最后逗号</p></li><li><p>换行符号不限制（win mac 不一致）</p></li></ol></li><li><p>vue组件名称多单词组成（忽略index.vue）</p></li><li><p>props解构（关闭）</p></li></ol><h4 id="忽略报错"><a href="#忽略报错" class="headerlink" title="忽略报错"></a>忽略报错</h4><p>例如用了element-plus组件库的自动导入后，用到一些组件会报未定义的错误</p><p><strong>配置文件 .eslintrc.cjs</strong></p><p>添加</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">globals</span>: &#123;</span><br><span class="line">    <span class="title class_">ElMessage</span>: <span class="string">&#x27;readonly&#x27;</span>,</span><br><span class="line">    <span class="title class_">ElMessageBox</span>: <span class="string">&#x27;readonly&#x27;</span>,</span><br><span class="line">    <span class="title class_">ElLoading</span>: <span class="string">&#x27;readonly&#x27;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">//要用到的组件再做添加</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h3><h4 id="Vuex概述"><a href="#Vuex概述" class="headerlink" title="Vuex概述"></a>Vuex概述</h4><p><strong>概念：</strong>Vuex是一个Vue的状态管理工具，状态就是数据</p><p><strong>使用场景</strong>：多个组件都要用同一份数据</p><p><strong>优势</strong>：</p><ul><li>数据集中化管理，</li><li>响应式变化</li><li>操作简洁</li></ul><h4 id="vuex的使用"><a href="#vuex的使用" class="headerlink" title="vuex的使用"></a>vuex的使用</h4><p><strong>步骤</strong></p><ol><li><p>安装Vuex</p></li><li><p>新建vuex模块文件 </p><p>新建store文件夹，新建index.js文件存放vuex</p></li><li><p>创建仓库</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入 vue</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">// 导入 vuex</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">// vuex也是vue的插件, 需要use一下, 进行插件的安装初始化</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建仓库 store</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出仓库</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure></li><li><p>导入到main.js中并挂载</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">  store</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ol><h4 id="核心概念-state状态"><a href="#核心概念-state状态" class="headerlink" title="核心概念-state状态"></a>核心概念-state状态</h4><p>State提供唯一的公共数据源，所有共享的数据都要统一放到Store中的State中存储。</p><p>打开项目中的store.js文件，在state对象中可以添加我们要共享的数据。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建仓库 store</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="comment">// state 状态, 即数据, 类似于vue组件中的data,</span></span><br><span class="line">  <span class="comment">// 区别：</span></span><br><span class="line">  <span class="comment">// 1.data 是组件自己的数据, </span></span><br><span class="line">  <span class="comment">// 2.state 中的数据整个vue项目的组件都能访问到</span></span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">101</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>获取公共数据state的语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">获取 store：</span><br><span class="line"> <span class="number">1.</span><span class="title class_">Vue</span>模板中获取 <span class="variable language_">this</span>.<span class="property">$store</span></span><br><span class="line"> <span class="number">2.</span>js文件中获取 <span class="keyword">import</span> 导入 store</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">模板中：     &#123;&#123; $store.<span class="property">state</span>.<span class="property">xxx</span> &#125;&#125;</span><br><span class="line">组件逻辑中：  <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">xxx</span></span><br><span class="line"><span class="variable constant_">JS</span>模块中：   store.<span class="property">state</span>.<span class="property">xxx</span></span><br></pre></td></tr></table></figure><h4 id="辅助函数mapState"><a href="#辅助函数mapState" class="headerlink" title="辅助函数mapState"></a>辅助函数mapState</h4><p><strong>概念</strong>：</p><p>mapState能够把store中的数据<strong>映射</strong>到组件的计算属性computed里</p><p><strong>使用步骤</strong> （在需要使用state的组件里）</p><ol><li><p>从vuex中导入mapstate函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapState &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>采用数组形式引入state属性</p></li></ol>   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">mapState</span>([<span class="string">&#x27;count&#x27;</span>])</span><br></pre></td></tr></table></figure><ol start="3"><li><p>利用<strong>展开运算符</strong>将导出的状态映射给计算属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">...<span class="title function_">mapState</span>([<span class="string">&#x27;count&#x27;</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>​接下来要使用state中的count，就和使用state里的count一样</p><h4 id="核心概念-mutations"><a href="#核心概念-mutations" class="headerlink" title="核心概念-mutations"></a>核心概念-mutations</h4><p>在开发时，vuex应当遵循单向数据流，组件中不应该能直接修改仓库的数据</p><p>但默认可以修改，可以在开发时在创建store对象时，添加属性<code>strict: true</code></p><p>上线时需 关闭严格模式</p><p>所以需要<strong>mutations</strong>来修改数据</p><p><strong>步骤</strong></p><ol><li><p>store对象中定义mutations对象，对象中存档修改state的方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//mutations对象的方法里，第一个参数永远都是state</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">strict</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&#x27;Winter&#x27;</span>,</span><br><span class="line">    <span class="attr">count</span>: <span class="number">100</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    addCount (state) &#123;</span><br><span class="line">      state.<span class="property">count</span>++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>组件中提交调用mutations里的方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;addCount&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ol><p><strong>mutations传参语法</strong></p><p>mutations里定义方法 <code>方法名 (state, 参数)</code></p><p>组件传参<code>this.$store.commit(&#39;方法名&#39;, 参数)</code></p><p><strong>注意：</strong>提交的参数只能有一个 所以如果有多个参数可以提交一个对象</p><h4 id="辅助函数-mapMutations"><a href="#辅助函数-mapMutations" class="headerlink" title="辅助函数-mapMutations"></a>辅助函数-mapMutations</h4><p>mapState将state <strong>映射到组件计算属性computed</strong>里</p><p>mapMutations将mutations里的方法 <strong>映射到组件方法method</strong>里</p><h4 id="核心概念-actions"><a href="#核心概念-actions" class="headerlink" title="核心概念-actions"></a>核心概念-actions</h4><p>state用于存放数据，mutations用于同步更新数据 而<strong>action负责异步操作</strong></p><p><strong>步骤</strong></p><ol><li><p>定义actions</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//此处未分模块，context可以当成store仓库</span></span><br><span class="line"><span class="attr">mutations</span>: &#123;</span><br><span class="line">  changeCount (state, newCount) &#123;</span><br><span class="line">    state.<span class="property">count</span> = newCount</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="attr">actions</span>: &#123;</span><br><span class="line">  setAsyncCount (context, num) &#123;</span><br><span class="line">    <span class="comment">// 一秒后, 给一个数, 去修改 num</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      context.<span class="title function_">commit</span>(<span class="string">&#x27;changeCount&#x27;</span>, num)</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p>组件中通过<strong>dispatch</strong>调用</p><p><code>this.$store.dispatch(&#39;setAsyncCount&#39;, 参数)</code></p></li></ol><h4 id="辅助函数-mapActions"><a href="#辅助函数-mapActions" class="headerlink" title="辅助函数 - mapActions"></a>辅助函数 - mapActions</h4><p>mapState将state <strong>映射到组件计算属性computed</strong>里</p><p>mapMutations将mutations里的同步方法 <strong>映射到组件方法method</strong>里</p><p>mapActions将actions里的异步方法 <strong>映射到组件方法methods</strong>里</p><p><strong>使用</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapActions &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">   ...<span class="title function_">mapActions</span>([<span class="string">&#x27;changeCountAction&#x27;</span>])</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//changeCountAction就被映射到了methods里 直接this.changeCountAction使用就可以</span></span><br></pre></td></tr></table></figure><h4 id="核心概念-getters"><a href="#核心概念-getters" class="headerlink" title="核心概念-getters"></a>核心概念-getters</h4><p>getters用于从state中筛选出符合条件的一些数据</p><p><strong>步骤</strong></p><ol><li><p>在store对象中定义getters</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">getters</span>: &#123;</span><br><span class="line">  <span class="comment">// getters函数的第一个参数是 state</span></span><br><span class="line">  <span class="comment">// 必须要有返回值</span></span><br><span class="line">   <span class="attr">filterList</span>:  <span class="function"><span class="params">state</span> =&gt;</span>  state.<span class="property">list</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item &gt; <span class="number">5</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用getters</p><ol><li><p>原生方式 $store <code>this.$store.getters.filterList</code></p></li><li><p>mapGetters 映射到计算属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapgetters &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">...<span class="title function_">mapgetters</span>([<span class="string">&#x27;filterList&#x27;</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol><h4 id="核心概念-module"><a href="#核心概念-module" class="headerlink" title="核心概念-module"></a>核心概念-module</h4><p><strong>将vuex模块化</strong> 便于管理数据和维护</p><p><strong>步骤</strong></p><ol><li><p>store目录下 新建modules文件夹，将模块放在这里(例如@&#x2F;store&#x2F;modules&#x2F;user.js)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">  <span class="attr">userInfo</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actions = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getters = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  state,</span><br><span class="line">  mutations,</span><br><span class="line">  actions,</span><br><span class="line">  getters</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在index.js里导入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> user <span class="keyword">from</span> <span class="string">&#x27;./modules/user&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">    <span class="attr">modules</span>:&#123;</span><br><span class="line">        user</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><p><strong>使用模块的数据state</strong></p><ol><li>通过模块名直接访问<code>$store.state.模块名.数据</code></li><li>通过mapstate映射 <ol><li>把整个模块映射 <code>mapState[&#39;模块名&#39;]</code></li><li>映射某个数据 <code>mapstate(&#39;模块名&#39;, [&#39;数据&#39;])</code>  需要在对应模块导出时<strong>开启命名空间</strong> <code>namespaced: true</code></li></ol></li></ol><p><strong>使用模块筛选过的数据 getters</strong></p><ol><li>通过模块名访问 <code>$store.getters(&#39;[模块名/数据]&#39;)</code></li><li>子模块的映射 <code>mapGetters(&#39;模块名&#39;, [&#39;数据&#39;])</code> 也需要<strong>开启命名空间</strong></li></ol><p><strong>使用模块中的同步方法 mutations</strong></p><ol><li>直接通过 store 调用   <code>$store.commit(&#39;模块名/xxx &#39;,  额外参数)</code></li><li>通过 mapMutations 映射    <ol><li>默认根级别的映射  <code>mapMutations([ &#39;xxx&#39; ]) </code>    </li><li>子模块的映射 <code>mapMutations(&#39;模块名&#39;, [&#39;xxx&#39;])</code> -  需要<strong>开启命名空间</strong></li></ol></li></ol><p><strong>使用模块中的异步方法 actions</strong></p><ol><li>直接通过 store 调用   <code>$store.dispatch(&#39;模块名/xxx &#39;,  额外参数)</code></li><li>通过 mapActions 映射     <ol><li>默认根级别的映射  <code>mapActions([ &#39;xxx&#39; ])  </code>   </li><li>子模块的映射 <code>mapActions(&#39;模块名&#39;, [&#39;xxx&#39;]) </code> -  需要<strong>开启命名空间</strong></li></ol></li></ol><h4 id="storage存储模块-Vuex持久化处理"><a href="#storage存储模块-Vuex持久化处理" class="headerlink" title="storage存储模块-Vuex持久化处理"></a>storage存储模块-Vuex持久化处理</h4><p>一些登录凭证token和用户的信息userId 做一个持久化处理 封装到模块</p><ol><li><p>新建 <code>utils/storage.js</code> 封装方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">INFO_KEY</span> = <span class="string">&#x27;hm_shopping_info&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取个人信息</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getInfo</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> result = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="variable constant_">INFO_KEY</span>)</span><br><span class="line">  <span class="keyword">return</span> result ? <span class="title class_">JSON</span>.<span class="title function_">parse</span>(result) : &#123;</span><br><span class="line">    <span class="attr">token</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">userId</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置个人信息</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">setInfo</span> = (<span class="params">info</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="variable constant_">INFO_KEY</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(info))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 移除个人信息</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">removeInfo</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="variable constant_">INFO_KEY</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>vuex user模块调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; getInfo, setInfo &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/storage&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">namespaced</span>: <span class="literal">true</span>,</span><br><span class="line">  state () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">userInfo</span>: <span class="title function_">getInfo</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    setUserInfo (state, obj) &#123;</span><br><span class="line">      state.<span class="property">userInfo</span> = obj</span><br><span class="line">      <span class="title function_">setInfo</span>(obj)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="第三方组件库-vant-ui"><a href="#第三方组件库-vant-ui" class="headerlink" title="第三方组件库 vant-ui"></a>第三方组件库 vant-ui</h3><p><strong>地址</strong>：<a href="https://vant-contrib.gitee.io/vant/v2/#/zh-CN/">https://vant-contrib.gitee.io/vant/v2/#/zh-CN/</a></p><p>常用的组件库还有以下几种：</p><p>pc:  <a href="https://element.eleme.cn/#/zh-CN">element-ui</a>    <a href="https://element-plus.gitee.io/zh-CN/">element-plus</a>  <a href="https://iview.github.io/">iview</a>      <strong><a href="https://antdv.com/components/overview-cn">ant-design</a></strong></p><p>移动：<a href="https://vant-contrib.gitee.io/vant/v2/#/zh-CN/">vant-ui</a>     <a href="http://mint-ui.github.io/docs/#/zh-cn2">Mint UI</a> (饿了么)    <a href="https://didi.github.io/cube-ui/#/zh-CN/">Cube UI</a> (滴滴)</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a><strong>安装</strong></h4><p>vue2项目 <code>npm i vant@latest-v2 -S</code></p><h4 id="组件全部导入-不推荐"><a href="#组件全部导入-不推荐" class="headerlink" title="组件全部导入(不推荐)"></a>组件全部导入(不推荐)</h4><p><strong>在main.js注册</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vant</span> <span class="keyword">from</span> <span class="string">&#x27;vant&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;vant/lib/index.css&#x27;</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vant</span>)</span><br></pre></td></tr></table></figure><h4 id="按需导入（推荐）"><a href="#按需导入（推荐）" class="headerlink" title="按需导入（推荐）"></a>按需导入（推荐）</h4><ol><li><p><strong>安装插件</strong>  <code>npm i babel-plugin-import -D</code></p></li><li><p>在<code>babel.config.js</code>中配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">presets</span>: [</span><br><span class="line">    <span class="string">&#x27;@vue/cli-plugin-babel/preset&#x27;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    [<span class="string">&#x27;import&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">libraryName</span>: <span class="string">&#x27;vant&#x27;</span>,</span><br><span class="line">      <span class="attr">libraryDirectory</span>: <span class="string">&#x27;es&#x27;</span>,</span><br><span class="line">      <span class="attr">style</span>: <span class="literal">true</span></span><br><span class="line">    &#125;, <span class="string">&#x27;vant&#x27;</span>]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>可将引入组件的步骤抽离到单独的js文件中 如<code>utils/vant-ui.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Button</span>, <span class="title class_">Icon</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vant&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Button</span>)</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Icon</span>)</span><br></pre></td></tr></table></figure></li><li><p>在main.js中导入</p></li></ol>   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入按需导入的配置文件</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@/utils/vant-ui&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>按需导入中的全局使用</strong></p><ol><li><p>在main.js中导入并注册需要的组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Toast</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vant&#x27;</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Toast</span>)</span><br></pre></td></tr></table></figure></li><li><p>之后在其他组件里直接使用 无需导入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    created () &#123;</span><br><span class="line">        this.$Toast(&#x27;登录&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ol><h4 id="移动端适配：-vw适配"><a href="#移动端适配：-vw适配" class="headerlink" title="移动端适配： vw适配"></a>移动端适配： vw适配</h4><p>官方说明：<a href="https://vant-contrib.gitee.io/vant/v2/#/zh-CN/advanced-usage">https://vant-contrib.gitee.io/vant/v2/#/zh-CN/advanced-usage</a></p><p><strong>安装</strong> <code>npm i postcss-px-to-viewport@1.1.1 -D</code></p><h4 id="为请求、响应拦截器添加loading"><a href="#为请求、响应拦截器添加loading" class="headerlink" title="为请求、响应拦截器添加loading"></a>为请求、响应拦截器添加loading</h4><p><strong>作用：</strong>用户提示，防止用户多次点击节流</p><ol><li>请求时，打开 loading</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加请求拦截器</span></span><br><span class="line">request.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">config</span>) &#123;</span><br><span class="line">  <span class="comment">// 在发送请求之前做些什么</span></span><br><span class="line">  <span class="title class_">Toast</span>.<span class="title function_">loading</span>(&#123;</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;请求中...&#x27;</span>,</span><br><span class="line">    <span class="attr">forbidClick</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">loadingType</span>: <span class="string">&#x27;spinner&#x27;</span>,</span><br><span class="line">    <span class="attr">duration</span>: <span class="number">0</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> config</span><br><span class="line">&#125;, <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">  <span class="comment">// 对请求错误做些什么</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="2"><li>响应时，关闭 loading</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加响应拦截器</span></span><br><span class="line">request.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> res = response.<span class="property">data</span></span><br><span class="line">  <span class="keyword">if</span> (res.<span class="property">status</span> !== <span class="number">200</span>) &#123;</span><br><span class="line">    <span class="title class_">Toast</span>(res.<span class="property">message</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(res.<span class="property">message</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 清除 loading 中的效果</span></span><br><span class="line">    <span class="title class_">Toast</span>.<span class="title function_">clear</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 对响应数据做点什么</span></span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;, <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">  <span class="comment">// 对响应错误做点什么</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="第三方组件库-element-plus"><a href="#第三方组件库-element-plus" class="headerlink" title="第三方组件库 element-plus"></a>第三方组件库 element-plus</h3><p><strong>官方文档：</strong> <a href="https://element-plus.org/zh-CN/">https://element-plus.org/zh-CN/</a></p><ul><li>安装</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pnpm add element-plus</span><br></pre></td></tr></table></figure><p><strong>自动按需：</strong></p><ol><li>安装插件</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm add -D unplugin-vue-components unplugin-auto-<span class="keyword">import</span></span><br></pre></td></tr></table></figure><ol start="2"><li>然后把下列代码插入到你的 <code>Vite</code> 或 <code>Webpack</code> 的配置文件中</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">AutoImport</span> <span class="keyword">from</span> <span class="string">&#x27;unplugin-auto-import/vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Components</span> <span class="keyword">from</span> <span class="string">&#x27;unplugin-vue-components/vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ElementPlusResolver</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;unplugin-vue-components/resolvers&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// https://vitejs.dev/config/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    ...</span><br><span class="line">    <span class="title class_">AutoImport</span>(&#123;</span><br><span class="line">      <span class="attr">resolvers</span>: [<span class="title class_">ElementPlusResolver</span>()]</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="title class_">Components</span>(&#123;</span><br><span class="line">      <span class="attr">resolvers</span>: [<span class="title class_">ElementPlusResolver</span>()]</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="3"><li>直接使用</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>&gt;</span>Primary<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;success&quot;</span>&gt;</span>Success<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;info&quot;</span>&gt;</span>Info<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;warning&quot;</span>&gt;</span>Warning<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span>&gt;</span>Danger<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    ...</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h4 id="表单校验规则"><a href="#表单校验规则" class="headerlink" title="表单校验规则"></a>表单校验规则</h4><h4 id="表单校验需要进行的配置"><a href="#表单校验需要进行的配置" class="headerlink" title="表单校验需要进行的配置"></a><strong>表单校验需要进行的配置</strong></h4><ol><li><p><code>el-form</code>组件上绑定form数据对象</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> formModel = <span class="title function_">ref</span>(&#123;</span><br><span class="line">  <span class="attr">username</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">password</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">repassword</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&lt;el-form :model=<span class="string">&quot;formModel&quot;</span> &gt;</span><br></pre></td></tr></table></figure></li><li><p><code>el-form</code>上绑定rules规则对象</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-form :rules=<span class="string">&quot;rules&quot;</span> &gt;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">const</span> rules = &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>表单元素上v-model绑定form数据对象的子属性</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-input</span><br><span class="line">  v-model=<span class="string">&quot;formModel.username&quot;</span></span><br><span class="line">  :prefix-icon=<span class="string">&quot;User&quot;</span></span><br><span class="line">  placeholder=<span class="string">&quot;请输入用户名&quot;</span></span><br><span class="line">&gt;&lt;/el-input&gt;</span><br></pre></td></tr></table></figure></li><li><p>prop绑定校验规则到元素<code>el-form-item</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-form-item prop=<span class="string">&quot;username&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">el-input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">v-model</span>=<span class="string">&quot;formModel.username&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">:prefix-icon</span>=<span class="string">&quot;User&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">placeholder</span>=<span class="string">&quot;请输入用户名&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  &gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span></span><br><span class="line">&lt;/el-form-item&gt;</span><br></pre></td></tr></table></figure></li></ol><p><strong>校验规则</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> rules = &#123;</span><br><span class="line">  <span class="comment">// 为空就会报message的错误，触发时机为username改变时</span></span><br><span class="line">  <span class="comment">// 长度小于5或者大于10就会触发报错，触发时机为 失焦</span></span><br><span class="line">  <span class="attr">username</span>: [</span><br><span class="line">    &#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;请输入用户名&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;change&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">min</span>: <span class="number">5</span>, <span class="attr">max</span>: <span class="number">10</span>, <span class="attr">message</span>: <span class="string">&#x27;用户名必须是5-10位的字符&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span>&#125; </span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// 正则校验 pattern放正则规则</span></span><br><span class="line">  <span class="attr">password</span>: [</span><br><span class="line">    &#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;请输入密码&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;change&#x27;</span> &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">pattern</span>: <span class="regexp">/^\S&#123;6,15&#125;$/</span>,</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&#x27;密码必须是6-15位非空字符&#x27;</span>,</span><br><span class="line">      <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">repassword</span>: [</span><br><span class="line">    &#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;请输入密码&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;change&#x27;</span> &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">pattern</span>: <span class="regexp">/^\S&#123;6,15&#125;$/</span>,</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&#x27;密码必须是6-15位非空字符&#x27;</span>,</span><br><span class="line">      <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">      <span class="comment">// 自定义校验， validator(rule, value, callback)</span></span><br><span class="line">      <span class="comment">// rule 当前校验相关的信息</span></span><br><span class="line">      <span class="comment">// value 所校验的表单元素的值</span></span><br><span class="line">      <span class="comment">// callback 无论成功和失败，都需要回调</span></span><br><span class="line">      <span class="comment">//-callback() 校验成功</span></span><br><span class="line">      <span class="comment">//-callback(new Error(错误信息)) 校验失败</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">validator</span>: <span class="function">(<span class="params">rule, value, callback</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (value !== formModel.<span class="property">value</span>.<span class="property">password</span>) &#123;</span><br><span class="line">          <span class="title function_">callback</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;两次输入密码不一致&#x27;</span>))</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="title function_">callback</span>()</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="表单预校验"><a href="#表单预校验" class="headerlink" title="表单预校验"></a>表单预校验</h4><p>validate是表单暴露的函数，可以表单所有规则的检测，要使用它只需</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义响应式变量</span></span><br><span class="line"><span class="keyword">const</span> form = <span class="title function_">ref</span>()</span><br><span class="line"><span class="comment">// ref=form以调用内部方法</span></span><br><span class="line">&lt;el-form ref=form&gt;&lt;/el-form&gt;</span><br><span class="line"><span class="comment">// 调用内部方法validate</span></span><br><span class="line">form.<span class="property">value</span>.<span class="title function_">validate</span>()</span><br></pre></td></tr></table></figure><h4 id="表格结构与渲染数据"><a href="#表格结构与渲染数据" class="headerlink" title="表格结构与渲染数据"></a>表格结构与渲染数据</h4><p>label用来显示到用户</p><p>data绑定数据 数组对象</p><p>prop用来接收对象中的属性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-table :data=&quot;articleList&quot; style=&quot;width: 100%&quot;&gt;</span><br><span class="line">      &lt;el-table-column prop=&quot;title&quot; label=&quot;文章标题&quot; width=&quot;width&quot;&gt;</span><br><span class="line">        &lt;template #default=&quot;&#123; row &#125;&quot;&gt;</span><br><span class="line">          &lt;el-link type=&quot;primary&quot; :underline=&quot;false&quot;&gt;&#123;&#123; row.title &#125;&#125;&lt;/el-link&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">      &lt;/el-table-column&gt;</span><br><span class="line">      &lt;el-table-column prop=&quot;cate_name&quot; label=&quot;分类&quot; width=&quot;width&quot;&gt;</span><br><span class="line">      &lt;/el-table-column&gt;</span><br><span class="line">      &lt;el-table-column prop=&quot;pub_date&quot; label=&quot;发表时间&quot; width=&quot;width&quot;&gt;</span><br><span class="line">      &lt;/el-table-column&gt;</span><br><span class="line">      &lt;el-table-column prop=&quot;state&quot; label=&quot;状态&quot; width=&quot;width&quot;&gt;</span><br><span class="line">      &lt;/el-table-column&gt;</span><br><span class="line">&lt;/el-table&gt;</span><br></pre></td></tr></table></figure><h4 id="表格自定义插槽"><a href="#表格自定义插槽" class="headerlink" title="表格自定义插槽"></a>表格自定义插槽</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-table-column prop=&quot;title&quot; label=&quot;文章标题&quot; width=&quot;width&quot;&gt;</span><br><span class="line">        &lt;template #default=&quot;&#123; row &#125;&quot;&gt;</span><br><span class="line">          &lt;el-link type=&quot;primary&quot; :underline=&quot;false&quot;&gt;&#123;&#123; row.title &#125;&#125;&lt;/el-link&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;/el-table-column&gt;</span><br></pre></td></tr></table></figure><p>table的每个column都可以自定义内容 这里的row就是表单中data里的数组对象的每个item</p><h4 id="默认显示中文"><a href="#默认显示中文" class="headerlink" title="默认显示中文"></a>默认显示中文</h4><p>App.vue 中直接导入设置成中文即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import zh from &#x27;element-plus/es/locale/lang/zh-cn.mjs&#x27;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- 国际化处理 --&gt;</span><br><span class="line">  &lt;el-config-provider :locale=&quot;zh&quot;&gt;</span><br><span class="line">    &lt;router-view /&gt;</span><br><span class="line">  &lt;/el-config-provider&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h2 id="Vue3"><a href="#Vue3" class="headerlink" title="Vue3"></a>Vue3</h2><h4 id="Vue3优势"><a href="#Vue3优势" class="headerlink" title="Vue3优势"></a>Vue3优势</h4><p><strong>vue3更容易维护</strong></p><p>组合式API    更好的typesript支持</p><p><strong>更快的速度</strong></p><p>重写difff算法 模板编译优化 组件初始化更高效</p><p><strong>更小的体积</strong></p><p>良好的treeshaking   按需引入</p><p><strong>更好的数据响应式</strong></p><p>proxy</p><h4 id="create-vue搭建vue3项目"><a href="#create-vue搭建vue3项目" class="headerlink" title="create-vue搭建vue3项目"></a>create-vue搭建vue3项目</h4><p>vue-cli用来创建vue2 底层为webpack</p><p>create-vue用来创建vue3 底层为vite</p><p><code>npm init vue@latest</code></p><p>执行命令 安装并执行create-vue</p><h3 id="组合式API-setup选项"><a href="#组合式API-setup选项" class="headerlink" title="组合式API setup选项"></a>组合式API setup选项</h3><h4 id="1-执行时机"><a href="#1-执行时机" class="headerlink" title="1. 执行时机"></a>1. <strong>执行时机</strong></h4><p>在beforeCreate之前自动执行 这也导致setup函数无法获取到this</p><h4 id="2-写法"><a href="#2-写法" class="headerlink" title="2. 写法"></a>2. <strong>写法</strong></h4><ol><li><p>组合式api放在setup选项里</p></li><li><p>数据和函数需要在setup最后return 才能在模板中使用</p></li></ol><h4 id="3-语法糖"><a href="#3-语法糖" class="headerlink" title="3. &lt;script setup&gt;语法糖"></a>3. <strong><code>&lt;script setup&gt;</code>语法糖</strong></h4><p>不必return 也不用加导出语句export default</p><h3 id="组合式API-reactive和ref函数"><a href="#组合式API-reactive和ref函数" class="headerlink" title="组合式API reactive和ref函数"></a>组合式API reactive和ref函数</h3><h4 id="1-reactive"><a href="#1-reactive" class="headerlink" title="1. reactive"></a>1. reactive</h4><blockquote><p>接受对象类型数据的参数传入并返回一个响应式的对象</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"> // 导入</span><br><span class="line"> import &#123; reactive &#125; from &#x27;vue&#x27;</span><br><span class="line"> // 执行函数 传入参数 变量接收</span><br><span class="line"> const state = reactive(&#123;</span><br><span class="line">   msg:&#x27;this is msg&#x27;</span><br><span class="line"> &#125;)</span><br><span class="line"> const setSate = ()=&gt;&#123;</span><br><span class="line">   // 修改数据更新视图</span><br><span class="line">   state.msg = &#x27;this is new msg&#x27;</span><br><span class="line"> &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &#123;&#123; state.msg &#125;&#125;</span><br><span class="line">  &lt;button @click=&quot;setState&quot;&gt;change msg&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h4 id="2-ref"><a href="#2-ref" class="headerlink" title="2. ref"></a>2. ref</h4><blockquote><p>接收简单类型或者对象类型的数据传入并返回一个响应式的对象</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"> // 导入</span><br><span class="line"> import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line"> // 执行函数 传入参数 变量接收</span><br><span class="line"> const count = ref(0)</span><br><span class="line"> const setCount = ()=&gt;&#123;</span><br><span class="line">   // 修改数据更新视图必须加上.value</span><br><span class="line">   count.value++</span><br><span class="line"> &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;button @click=&quot;setCount&quot;&gt;&#123;&#123;count&#125;&#125;&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h4 id="3-reactive-对比-ref"><a href="#3-reactive-对比-ref" class="headerlink" title="3. reactive 对比 ref"></a>3. reactive 对比 ref</h4><ol><li>都是用来生成响应式数据</li><li>不同点<ol><li>reactive不能处理简单类型的数据</li><li>ref参数类型支持更好，但是js中必须通过.value做访问修改，模板中使用不需要加value</li><li>ref函数内部的实现依赖于reactive函数，本质还是将简单类型数据变成了对象</li></ol></li><li>在实际工作中的推荐<ol><li>推荐使用ref函数，减少记忆负担</li></ol></li></ol><h3 id="组合式API-computed属性"><a href="#组合式API-computed属性" class="headerlink" title="组合式API computed属性"></a>组合式API computed属性</h3><p>思想与vue2一致 只是写法不同</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">// 导入</span><br><span class="line">import &#123;ref, computed &#125; from &#x27;vue&#x27;</span><br><span class="line">// 原始数据</span><br><span class="line">const count = ref(0)</span><br><span class="line">// 计算属性</span><br><span class="line">const doubleCount = computed(()=&gt;count.value * 2)</span><br><span class="line"></span><br><span class="line">// 原始数据</span><br><span class="line">const list = ref([1,2,3,4,5,6,7,8])</span><br><span class="line">// 计算属性list</span><br><span class="line">const filterList = computed(item=&gt;item &gt; 2)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="组合式API-watch属性"><a href="#组合式API-watch属性" class="headerlink" title="组合式API watch属性"></a>组合式API watch属性</h3><blockquote><p>侦听一个或者多个数据的变化，数据变化时执行回调函数，俩个额外参数 immediate控制立刻执行，deep开启深度侦听</p></blockquote><h4 id="1-侦听单个数据"><a href="#1-侦听单个数据" class="headerlink" title="1. 侦听单个数据"></a>1. 侦听单个数据</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">  // 1. 导入watch</span><br><span class="line">  import &#123; ref, watch &#125; from &#x27;vue&#x27;</span><br><span class="line">  const count = ref(0)</span><br><span class="line">  // 2. 调用watch 侦听变化</span><br><span class="line">  watch(count, (newValue, oldValue)=&gt;&#123;</span><br><span class="line">    console.log(`count发生了变化，老值为$&#123;oldValue&#125;,新值为$&#123;newValue&#125;`)</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="2-侦听多个数据"><a href="#2-侦听多个数据" class="headerlink" title="2. 侦听多个数据"></a>2. 侦听多个数据</h4><blockquote><p>侦听多个数据，第一个参数可以改写成数组的写法</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">  // 1. 导入watch</span><br><span class="line">  import &#123; ref, watch &#125; from &#x27;vue&#x27;</span><br><span class="line">  const count = ref(0)</span><br><span class="line">  const name = ref(&#x27;cp&#x27;)</span><br><span class="line">  // 2. 调用watch 侦听变化</span><br><span class="line">  watch([count, name], ([newCount, newName],[oldCount,oldName])=&gt;&#123;</span><br><span class="line">    console.log(`count或者name变化了，[newCount, newName],[oldCount,oldName])</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="3-immediate"><a href="#3-immediate" class="headerlink" title="3. immediate"></a>3. immediate</h4><blockquote><p>在侦听器创建时立即出发回调，响应式数据变化之后继续执行回调</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">  // 1. 导入watch</span><br><span class="line">  import &#123; ref, watch &#125; from &#x27;vue&#x27;</span><br><span class="line">  const count = ref(0)</span><br><span class="line">  // 2. 调用watch 侦听变化</span><br><span class="line">  watch(count, (newValue, oldValue)=&gt;&#123;</span><br><span class="line">    console.log(`count发生了变化，老值为$&#123;oldValue&#125;,新值为$&#123;newValue&#125;`)</span><br><span class="line">  &#125;,&#123;</span><br><span class="line">    immediate: true</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="4-deep"><a href="#4-deep" class="headerlink" title="4. deep"></a>4. deep</h4><blockquote><p>通过watch监听的ref对象默认是浅层侦听的，直接修改嵌套的对象属性不会触发回调执行，需要开启deep</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">  // 1. 导入watch</span><br><span class="line">  import &#123; ref, watch &#125; from &#x27;vue&#x27;</span><br><span class="line">  const state = ref(&#123; count: 0 &#125;)</span><br><span class="line">  // 2. 监听对象state</span><br><span class="line">  watch(state, ()=&gt;&#123;</span><br><span class="line">    console.log(&#x27;数据变化了&#x27;)</span><br><span class="line">  &#125;)</span><br><span class="line">  const changeStateByCount = ()=&gt;&#123;</span><br><span class="line">    // 直接修改不会引发回调执行</span><br><span class="line">    state.value.count++</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">  // 1. 导入watch</span><br><span class="line">  import &#123; ref, watch &#125; from &#x27;vue&#x27;</span><br><span class="line">  const state = ref(&#123; count: 0 &#125;)</span><br><span class="line">  // 2. 监听对象state 并开启deep</span><br><span class="line">  watch(state, ()=&gt;&#123;</span><br><span class="line">    console.log(&#x27;数据变化了&#x27;)</span><br><span class="line">  &#125;,&#123;deep:true&#125;)</span><br><span class="line">  const changeStateByCount = ()=&gt;&#123;</span><br><span class="line">    // 此时修改可以触发回调</span><br><span class="line">    state.value.count++</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="5-精确侦听对象的某个属性"><a href="#5-精确侦听对象的某个属性" class="headerlink" title="5. 精确侦听对象的某个属性"></a>5. 精确侦听对象的某个属性</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> userInfo = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;winter&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="string">&#x27;23&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">watch</span>(<span class="function">() =&gt;</span> userInfo.<span class="property">value</span>.<span class="property">age</span>, <span class="function">(<span class="params">newvalue, oldvalue</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(newValue,oldvalue)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="组合式API-生命周期函数"><a href="#组合式API-生命周期函数" class="headerlink" title="组合式API 生命周期函数"></a>组合式API 生命周期函数</h3><p><img src="/..%5Cimg%5Cmd%5Cvue3%E7%BB%84%E5%90%88%E5%BC%8FAPI%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%87%BD%E6%95%B0.png"></p><p><code>beforeCreated</code>和<code>created</code>的相关代码 一律放在<code>setup</code>里</p><p>选项式API的钩子在组合式API里也能用</p><p>vue3 同一个生命周期函数可以调用多次</p><p>Vue3的销毁不再是destroyed</p><h3 id="组合式API-父子通信"><a href="#组合式API-父子通信" class="headerlink" title="组合式API 父子通信"></a>组合式API 父子通信</h3><h4 id="1-父传子"><a href="#1-父传子" class="headerlink" title="1. 父传子"></a>1. 父传子</h4><p><strong>步骤</strong></p><ol><li><p>父组件绑定属性传值</p></li><li><p>子组件通过defineProps方法接收</p></li></ol><p><strong>示例</strong></p><ol><li><p>父组件<code>&lt;SonCom name=&quot;winter&quot; :age=&quot;age&quot;&gt;&lt;/SonCom&gt;</code></p></li><li><p>子组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">const props = defineProps(&#123;</span><br><span class="line">    name: String,</span><br><span class="line">    age: Number</span><br><span class="line">&#125;)</span><br><span class="line">console.log(props.name);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;template lang=&quot;&quot;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        我是子组件 &#123;&#123;name&#125;&#125; &#123;&#123;age&#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></li></ol><h4 id="2-子传父"><a href="#2-子传父" class="headerlink" title="2. 子传父"></a>2. 子传父</h4><p><strong>步骤</strong></p><ol><li>父组件在子组件标签中通过@绑定事件</li><li>子组件内部通过defineEmits生成emit方法 并触发事件传递参数</li></ol><p><strong>示例</strong></p><ol><li><p>父组件  <code>&lt;SonCom :age=&quot;age&quot; @addWinterAge=&quot;addAge&quot;&gt;&lt;/SonCom&gt;</code></p></li><li><p>子组件</p></li></ol>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">const emit = defineEmits([&#x27;addWinterAge&#x27;])</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;button @click=&quot;emit(&#x27;addWinterAge&#x27;)&quot;&gt;加年龄&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h3 id="组合式API-模板引用"><a href="#组合式API-模板引用" class="headerlink" title="组合式API - 模板引用"></a>组合式API - 模板引用</h3><h4 id="1-基本使用"><a href="#1-基本使用" class="headerlink" title="1. 基本使用"></a>1. 基本使用</h4><p><strong>概念</strong>：通过 ref标识 获取真实的 dom对象或者组件实例对象</p><p><strong>步骤</strong></p><ol><li>调用ref函数生成ref对象</li><li>通过ref标识绑定ref对象到标签</li></ol><p><strong>示例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">const inp = ref(null)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;input ref=&quot;inp&quot; type=&quot;text&quot;&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">//这样就拿到了输入框dom</span><br></pre></td></tr></table></figure><h4 id="2-defineExpose"><a href="#2-defineExpose" class="headerlink" title="2. defineExpose"></a>2. defineExpose</h4><p>默认情况下在 <code>&lt;script setup&gt;</code>语法糖下组件内部的属性和方法是不开放给父组件访问的，可以通过defineExpose编译宏指定哪些属性和方法容许访问</p><p><strong>示例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">子组件</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123;ref&#125; from &#x27;vue&#x27;</span><br><span class="line">const count = ref(0)</span><br><span class="line">defineExpose(&#123;</span><br><span class="line">    count</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">父组件</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123;ref&#125; from &#x27;vue&#x27;</span><br><span class="line">const testRef = ref(null)</span><br><span class="line">const getCom = () =&gt; &#123;</span><br><span class="line">  console.log(testRef.value.count)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;button @click=&quot;getCom&quot;&gt;点击后输出子组件的数据count&lt;/button&gt;</span><br><span class="line">    &lt;testCom ref=&quot;testRef&quot;&gt;&lt;/testCom&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h3 id="组合式API-provide和inject"><a href="#组合式API-provide和inject" class="headerlink" title="组合式API provide和inject"></a>组合式API provide和inject</h3><p>作用场景：顶层组件向底层组件传递数据和方法，实现<strong>跨层级通信</strong></p><p><strong>步骤</strong></p><ol><li>顶层组件通过 <code>provide</code> 函数提供数据和修改数据的方法</li><li>底层组件通过 <code>inject</code> 函数提供数据</li></ol><p><strong>示例代码</strong></p><p>父组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import CenterBottom from &#x27;./components/center-bottom.vue&#x27;</span><br><span class="line">import &#123; provide, ref &#125; from &#x27;vue&#x27;</span><br><span class="line">const count = ref(100)</span><br><span class="line">provide(&#x27;count&#x27;, count)</span><br><span class="line">provide(&#x27;changeCount&#x27;, (newCount) =&gt; &#123;</span><br><span class="line">  count.value = newCount  </span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;CenterBottom&gt;&lt;/CenterBottom&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>子组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; inject &#125; from &#x27;vue&#x27;</span><br><span class="line">const themeColor = inject(&#x27;theme-color&#x27;)</span><br><span class="line">const count = inject(&#x27;count&#x27;)</span><br><span class="line">const clickFn = inject(&#x27;changeCount&#x27;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    底层组件-&#123;&#123; themeColor &#125;&#125;-&#123;&#123; count &#125;&#125;</span><br><span class="line">    &lt;button @click=&quot;clickFn(10)&quot;&gt;更新count&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h3 id="defineOptions"><a href="#defineOptions" class="headerlink" title="defineOptions"></a>defineOptions</h3><p> defineOptions 宏。顾名思义，主要是用来定义 Options API 的选项。可以用 defineOptions 定义任意的选项， props, emits, expose, slots 除外（因为这些可以使用 defineXXX 来做到）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">defineoptions(&#123;</span><br><span class="line">        name:&#x27;&#x27;,</span><br><span class="line">        props:[...],</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="defineModel"><a href="#defineModel" class="headerlink" title="defineModel"></a>defineModel</h3><p>优化自定义组件的v-model用法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; fileURLToPath, <span class="variable constant_">URL</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;node:url&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// https://vitejs.dev/config/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="title function_">vue</span>(&#123;</span><br><span class="line">      <span class="attr">script</span>: &#123;</span><br><span class="line">        <span class="attr">defineModel</span>: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="attr">alias</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;@&#x27;</span>: <span class="title function_">fileURLToPath</span>(<span class="keyword">new</span> <span class="title function_">URL</span>(<span class="string">&#x27;./src&#x27;</span>, <span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">url</span>))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">const modelValue = defineModel</span><br><span class="line">modelValue.value++</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="Pinia"><a href="#Pinia" class="headerlink" title="Pinia"></a>Pinia</h3><p><strong>概念</strong>：Pinia是Vue最新状态管理库，Pinia去掉了mutation和modules，配合typescript更友好</p><h4 id="Pinia使用步骤"><a href="#Pinia使用步骤" class="headerlink" title="Pinia使用步骤"></a>Pinia使用步骤</h4><p>如果使用vite创建vue项目时可以直接勾选pinia，也可以手动设置</p><p><strong>手动设置</strong> <code>npm i pinia</code></p><p>Vue项目入口文件main.js中设置Pinia</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"><span class="keyword">const</span> pinia = <span class="title function_">createPinia</span>()</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(pinia)</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>创建store</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; ref, computed&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useCounterStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;counter&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">addCount</span> = (<span class="params"></span>) =&gt; count.<span class="property">value</span>++</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">subCount</span> = (<span class="params"></span>) =&gt; count.<span class="property">value</span>--</span><br><span class="line">    <span class="keyword">const</span> double = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> count.<span class="property">value</span> * <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">const</span> msg = <span class="title function_">ref</span>(<span class="string">&#x27;winterlee&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;count, msg, addCount, subCount, double&#125;</span><br><span class="line">&#125;,&#123;</span><br><span class="line">    <span class="attr">persist</span>: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>pinia支持组合式api用法，因此可以用ref来指明state，用computed来指明getters，直接定义函数来代替actions</p><h4 id="storeToRefs"><a href="#storeToRefs" class="headerlink" title="storeToRefs"></a>storeToRefs</h4><p>从store中不能直接解构数据 解构需要用到storeToRefs</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数据不会是响应式</span></span><br><span class="line"><span class="keyword">const</span> &#123; count &#125; = counterStore</span><br><span class="line"><span class="comment">// 数据保持响应式</span></span><br><span class="line"><span class="keyword">const</span> &#123; count &#125; = <span class="title function_">storeToRefs</span>(counterStore)</span><br></pre></td></tr></table></figure><p>从store中可以直接解构方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;addCount, <span class="title class_">SubCount</span>&#125; = couterStore</span><br></pre></td></tr></table></figure><h4 id="Pinia持久化插件"><a href="#Pinia持久化插件" class="headerlink" title="Pinia持久化插件"></a>Pinia持久化插件</h4><p>官方文档：<a href="https://prazdevs.github.io/pinia-plugin-persistedstate/zh/">https://prazdevs.github.io/pinia-plugin-persistedstate/zh/</a></p><ol><li>安装插件 pinia-plugin-persistedstate</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i pinia-plugin-persistedstate</span><br></pre></td></tr></table></figure><ol start="2"><li>使用 main.js</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> persist <span class="keyword">from</span> <span class="string">&#x27;pinia-plugin-persistedstate&#x27;</span></span><br><span class="line">...</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">createPinia</span>().<span class="title function_">use</span>(persist))</span><br></pre></td></tr></table></figure><ol start="3"><li>配置 store&#x2F;counter.js</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; computed, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useCounterStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;counter&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    count,</span><br><span class="line">    doubleCount,</span><br><span class="line">    increment</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">  <span class="attr">persist</span>: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="4"><li>其他配置，看官网文档即可</li></ol><h4 id="Pinia-配置仓库统一管理"><a href="#Pinia-配置仓库统一管理" class="headerlink" title="Pinia - 配置仓库统一管理"></a>Pinia - 配置仓库统一管理</h4><p>pinia <strong>独立维护</strong></p><p>- 现在：初始化代码在 main.js 中，仓库代码在 stores 中，代码分散职能不单一</p><p>- 优化：由 stores 统一维护，在 stores&#x2F;index.js 中完成 pinia 初始化，交付 main.js 使用</p><p><strong>实现</strong></p><p>​src&#x2F;stores&#x2F;index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">import</span> persist <span class="keyword">from</span> <span class="string">&#x27;pinia-plugin-persistedstate&#x27;</span></span><br><span class="line"><span class="keyword">const</span> pinia = <span class="title function_">createPinia</span>()</span><br><span class="line">pinia.<span class="title function_">use</span>(persist)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> pinia</span><br></pre></td></tr></table></figure><p>​main.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@/assets/main.scss&#x27;</span></span><br><span class="line"><span class="keyword">import</span> pinia <span class="keyword">from</span> <span class="string">&#x27;./stores&#x27;</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line">app.<span class="title function_">use</span>(pinia)</span><br><span class="line">app.<span class="title function_">use</span>(router)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p>仓库 <strong>统一导出</strong></p><p>- 现在：使用一个仓库 import { useUserStore } from <code>./stores/user.js</code> 不同仓库路径不一致</p><p>- 优化：由 stores&#x2F;index.js 统一导出，导入路径统一 <code>./stores</code>，而且仓库维护在 stores&#x2F;modules 中</p><p><strong>实现</strong></p><p>​src&#x2F;stores&#x2F;index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">import</span> persist <span class="keyword">from</span> <span class="string">&#x27;pinia-plugin-persistedstate&#x27;</span></span><br><span class="line"><span class="keyword">const</span> pinia = <span class="title function_">createPinia</span>()</span><br><span class="line">pinia.<span class="title function_">use</span>(persist)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> pinia</span><br><span class="line"></span><br><span class="line"><span class="comment">// import &#123; useUserStore &#125; from &#x27;@/stores/modules/user&#x27;</span></span><br><span class="line"><span class="comment">// export &#123; useUserStore &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">&#x27;./modules/user&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Git</title>
      <link href="/2024/04/07/Git/"/>
      <url>/2024/04/07/Git/</url>
      
        <content type="html"><![CDATA[<h2 id="对于Git一些操作-通过git三个区来理解"><a href="#对于Git一些操作-通过git三个区来理解" class="headerlink" title="对于Git一些操作 通过git三个区来理解"></a>对于Git一些操作 通过git三个区来理解</h2><p><img src="/../img/md/git-zone.png"></p><h4 id="首先，初始化吧"><a href="#首先，初始化吧" class="headerlink" title="首先，初始化吧"></a><strong>首先，初始化吧</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><h3 id="Workspace：工作区"><a href="#Workspace：工作区" class="headerlink" title="Workspace：工作区"></a>Workspace：工作区</h3><p>本地电脑上的东西都在这个区</p><h4 id="从远程仓库克隆到本地"><a href="#从远程仓库克隆到本地" class="headerlink" title="从远程仓库克隆到本地"></a><strong>从远程仓库克隆到本地</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/username/repository.git</span><br></pre></td></tr></table></figure><h4 id="从远程仓库克隆特定分支到本地"><a href="#从远程仓库克隆特定分支到本地" class="headerlink" title="从远程仓库克隆特定分支到本地"></a><strong>从远程仓库克隆特定分支到本地</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b branch-name https://github.com/username/repository.git</span><br></pre></td></tr></table></figure><h4 id="远程仓库有多个分支时，切换到想要更新的分支"><a href="#远程仓库有多个分支时，切换到想要更新的分支" class="headerlink" title="远程仓库有多个分支时，切换到想要更新的分支"></a><strong>远程仓库有多个分支时</strong>，<strong>切换到想要更新的分支</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout branch-name</span><br></pre></td></tr></table></figure><p>（获取fetch 然后 合并merge ） 或者 pull抓取 等同这两个操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git fetch origin</span><br><span class="line">git merge origin/branch-name</span><br><span class="line"></span><br><span class="line">git pull origin branch-name</span><br></pre></td></tr></table></figure><h3 id="Index-Stage：暂存区"><a href="#Index-Stage：暂存区" class="headerlink" title="Index &#x2F; Stage：暂存区"></a>Index &#x2F; Stage：暂存区</h3><p>要提交 首先得把工作区的更改放到暂存区</p><h4 id="提交某个文件"><a href="#提交某个文件" class="headerlink" title="提交某个文件"></a><strong>提交某个文件</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add filename.txt</span><br></pre></td></tr></table></figure><h4 id="提交全部文件"><a href="#提交全部文件" class="headerlink" title="**提交全部文件 **"></a>**提交全部文件 **</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure><h4 id="将暂存区的文件覆盖给工作区"><a href="#将暂存区的文件覆盖给工作区" class="headerlink" title="将暂存区的文件覆盖给工作区"></a><strong>将暂存区的文件覆盖给工作区</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git restore filename.txt</span><br></pre></td></tr></table></figure><h4 id="将暂存区的文件移除"><a href="#将暂存区的文件移除" class="headerlink" title="将暂存区的文件移除"></a><strong>将暂存区的文件移除</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">rm</span> --cached filename.txt</span><br></pre></td></tr></table></figure><h4 id="了解工作区与暂存区文件的状态"><a href="#了解工作区与暂存区文件的状态" class="headerlink" title="了解工作区与暂存区文件的状态"></a><strong>了解工作区与暂存区文件的状态</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br><span class="line">简洁版</span><br><span class="line">git status -s</span><br></pre></td></tr></table></figure><h3 id="Repository：仓库区（或本地仓库）"><a href="#Repository：仓库区（或本地仓库）" class="headerlink" title="Repository：仓库区（或本地仓库）"></a>Repository：仓库区（或本地仓库）</h3><h4 id="版本回退（将工作区暂存区的内容回退到某个版本）"><a href="#版本回退（将工作区暂存区的内容回退到某个版本）" class="headerlink" title="版本回退（将工作区暂存区的内容回退到某个版本）"></a>版本回退（将工作区暂存区的内容回退到某个版本）</h4><p><strong>查看提交历史</strong> 获得版本号</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> --oneline</span><br></pre></td></tr></table></figure><p><strong>版本回退命令</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git reset --soft 版本号</span><br><span class="line">git reset --hard 版本号</span><br><span class="line">git reset mixed 版本号 （等价于 git reset）</span><br></pre></td></tr></table></figure><p><img src="E:\BLOG\winter\source\img\md\版本回退.png"></p><p>三者区别在于是否会覆盖 工作区和暂存区未跟踪的文件</p><h4 id="要把暂存区的变更提交到远程仓库"><a href="#要把暂存区的变更提交到远程仓库" class="headerlink" title="要把暂存区的变更提交到远程仓库"></a>要把<strong>暂存区的变更提交到远程仓库</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;提交的注释&quot;</span></span><br></pre></td></tr></table></figure><p>Remote：远程仓库</p><h4 id="推送到master分支"><a href="#推送到master分支" class="headerlink" title="推送到master分支"></a><strong>推送到master分支</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure><h4 id="推送本地分支到远程仓库"><a href="#推送本地分支到远程仓库" class="headerlink" title="推送本地分支到远程仓库"></a><strong>推送本地分支到远程仓库</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin feature-branch</span><br></pre></td></tr></table></figure><h4 id="设置推送的新分支为上游分支，之后每次提交只需用-git-push"><a href="#设置推送的新分支为上游分支，之后每次提交只需用-git-push" class="headerlink" title="设置推送的新分支为上游分支，之后每次提交只需用 git push"></a><strong>设置推送的新分支为上游分支，之后每次提交只需用 git push</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin feature-branch</span><br></pre></td></tr></table></figure><h4 id="合并dev分支到master分支-然后上传"><a href="#合并dev分支到master分支-然后上传" class="headerlink" title="合并dev分支到master分支 然后上传"></a><strong>合并dev分支到master分支</strong> <strong>然后上传</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git merge dev</span><br><span class="line">git push master</span><br></pre></td></tr></table></figure><h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><p><strong>分支</strong>本质上是指向提交节点的可变指针，默认是master或main。分支可以用来<strong>开发新需求或修理bug</strong>，保证主线代码随时可用，开发完成后合并到主分支上。</p><p><strong>HEAD指针</strong>影响工作区&#x2F;暂存区的代码状态</p><h4 id="创建和切换分支"><a href="#创建和切换分支" class="headerlink" title="创建和切换分支"></a>创建和切换分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">创建</span><br><span class="line">git branch 分支名</span><br><span class="line">切换分支</span><br><span class="line">git checkout 分支名</span><br></pre></td></tr></table></figure><h4 id="分支功能完成后，合并回到主分支"><a href="#分支功能完成后，合并回到主分支" class="headerlink" title="分支功能完成后，合并回到主分支"></a>分支功能完成后，合并回到主分支</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">切回到要合入的分支上：</span><br><span class="line">git checkout master</span><br><span class="line">合并其他分支过来</span><br><span class="line">git merge bug-fix</span><br><span class="line">删除合并后的分支指针</span><br><span class="line">git branch -d bug-fix</span><br></pre></td></tr></table></figure><h4 id="快进合并和三方合并"><a href="#快进合并和三方合并" class="headerlink" title="快进合并和三方合并"></a>快进合并和三方合并</h4><p><strong>快进合并</strong>：当前分支是目标分支的祖先分支，git会进行快速合并。分支的指针会移动到目标分支的位置，不会创建的新的合并提交。</p><p>类似这样</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A (main)</span><br><span class="line">A---B---C(target-branch)</span><br><span class="line">合并后</span><br><span class="line">A---B---C (main, target-branch)</span><br></pre></td></tr></table></figure><p><strong>三方合并</strong>：当前分支不是目标分支的祖先分支（当前分支有了新的提交）git会进行三方合并，合并会创建一个新的合并提交</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">最初</span><br><span class="line">A (main)</span><br><span class="line">A (target-branch)</span><br><span class="line"></span><br><span class="line">分支开发结束后</span><br><span class="line">A---B---C (main)</span><br><span class="line">A---E (target-branch)</span><br><span class="line"></span><br><span class="line">合并后</span><br><span class="line">A---B---C---F (main)</span><br><span class="line">A---E (target-branch)</span><br><span class="line"></span><br><span class="line">F即为新的合并提交，记录了合并过程</span><br></pre></td></tr></table></figure><h4 id="rebase和merge对比"><a href="#rebase和merge对比" class="headerlink" title="rebase和merge对比"></a>rebase和merge对比</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">当前</span><br><span class="line">A---B---C (origin/main)</span><br><span class="line"> \</span><br><span class="line">  D---E (main)</span><br><span class="line"></span><br><span class="line">merge</span><br><span class="line">A---B---C---G (main)</span><br><span class="line"> \       /</span><br><span class="line">  D---E</span><br><span class="line"></span><br><span class="line">rebase</span><br><span class="line">A---B---C---D&#x27;---E&#x27; (main)</span><br></pre></td></tr></table></figure><h4 id="合并冲突"><a href="#合并冲突" class="headerlink" title="合并冲突"></a>合并冲突</h4><p><strong>冲突的概念</strong>：一次合并中，不同的分支对于同一文件的同一部分内容不同，git无法干净的合并，产生合并冲突</p><p><strong>解决：</strong>找到冲突文件并手动解决，再进行一次提交</p><p>冲突是可以避免的，避免方式例如</p><p>1.按页面划分不同分支开发</p><p>2.公共代码在统一文件夹维护</p><p>3.Node等软件版本统一，npm 包统一下载</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h4 id="忽略文件-gitignore"><a href="#忽略文件-gitignore" class="headerlink" title="忽略文件.gitignore"></a>忽略文件.gitignore</h4><p><strong>概念</strong>：.gitignore 文件可以让 git 彻底忽略跟踪指定文件,让 git 仓库更小更快，避免重复无意义的文件管理</p><p>1.项目根目录新建 .gitignore 文件</p><p>2.填入相应配置来忽略指定文件</p><p><img src="E:\BLOG\winter\source\img\md\git忽略文件.png"></p><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><table><thead><tr><th><strong>命令</strong></th><th><strong>作用</strong></th><th><strong>注意</strong></th></tr></thead><tbody><tr><td>git -v</td><td>查看 git 版本</td><td></td></tr><tr><td>git init</td><td>初始化 git 仓库</td><td></td></tr><tr><td>git add 文件标识</td><td>暂存某个文件</td><td>文件标识以终端为起始的相对路径</td></tr><tr><td>git add .</td><td>暂存所有文件</td><td></td></tr><tr><td>git commit -m ‘说明注释’</td><td>提交产生版本记录</td><td>每次提交，把暂存区内容快照一份</td></tr><tr><td>git status</td><td>查看文件状态 - 详细信息</td><td></td></tr><tr><td>git status -s</td><td>查看文件状态 - 简略信息</td><td>第一列是暂存区状态，第二列是工作区状态</td></tr><tr><td>git ls-files</td><td>查看暂存区文件列表</td><td></td></tr><tr><td>git restore 文件标识</td><td>从暂存区恢复到工作区</td><td>如果文件标识为 . 则恢复所有文件</td></tr><tr><td>git rm –cached 文件标识</td><td>从暂存区移除文件</td><td>不让 git 跟踪文件变化</td></tr><tr><td>git log</td><td>查看提交记录 - 详细信息</td><td></td></tr><tr><td>git log –oneline</td><td>查看提交记录 - 简略信息</td><td>版本号 分支指针 提交时说明注释</td></tr></tbody></table><table><thead><tr><th><strong>命令</strong></th><th><strong>作用</strong></th><th><strong>注意</strong></th></tr></thead><tbody><tr><td>git reflog –oneline</td><td>查看完整历史 - 简略消息</td><td>包括提交，切换，回退等所有记录</td></tr><tr><td>git reset 版本号</td><td>切换版本代码到暂存区和工作区</td><td>–soft 模式保留暂存区和工作区原本内容  –hard 模式不保留暂存区和工作区原本内容  –mixed 模式不保留暂存区，工作区保留（默认）  先覆盖到暂存区，再用暂存区对比覆盖工作区</td></tr><tr><td>git branch 分支名</td><td>创建分支</td><td></td></tr><tr><td>git branch</td><td>查看本地分支</td><td></td></tr><tr><td>git branch -d 分支名</td><td>删除分支</td><td>请确保记录已经合并到别的分支下，再删除分支</td></tr><tr><td>git checkout 分支名</td><td>切换分支</td><td></td></tr><tr><td>git checkout -b 分支名</td><td>创建并立刻切换分支</td><td></td></tr><tr><td>git merge 分支名</td><td>把分支提交历史记录合并到当前所在分支</td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><table><thead><tr><th><strong>命令</strong></th><th><strong>作用</strong></th><th><strong>注意</strong></th></tr></thead><tbody><tr><td>git remote add 远程仓库别名 远程仓库地址</td><td>添加远程仓库地址</td><td>别名唯一，地址是 .git 结尾的网址</td></tr><tr><td>git remote -v</td><td>查看远程仓库地址</td><td></td></tr><tr><td>git remote remove 远程仓库别名</td><td>删除远程仓库地址</td><td></td></tr><tr><td>git pull 远程仓库别名 分支名</td><td>拉取</td><td>完整写法：git pull 远程仓库别名 远程分支名:本地分支名  等价于：git fetch 和 git merge</td></tr><tr><td>git push 远程仓库别名 分支名</td><td>推送</td><td>完整写法：git push 远程仓库别名 本地分支名:远程分支名  -u：建立通道后以后可以简写 git push</td></tr><tr><td>git pull –rebase 远程仓库别名 分支名</td><td>拉取合并</td><td>合并没有关系的记录</td></tr><tr><td>git clone 远程仓库地址</td><td>克隆</td><td>从0得到一个远程的Git仓库到本地使用</td></tr></tbody></table><h2 id="基于husky的代码检查"><a href="#基于husky的代码检查" class="headerlink" title="基于husky的代码检查"></a>基于husky的代码检查</h2><p>husky 是一个 git hooks 工具  ( git的钩子工具，可以在特定时机执行特定的命令 )</p><p>例如可以在提交时检查代码错误</p><p><strong>husky 配置</strong></p><ol><li><p>git初始化 git init</p></li><li><p>初始化 husky 工具配置  <a href="https://typicode.github.io/husky/">https://typicode.github.io/husky/</a></p></li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm dlx husky-init &amp;&amp; pnpm install</span><br></pre></td></tr></table></figure><ol start="3"><li>修改 .husky&#x2F;pre-commit 文件（这里的pnpm lint是配置好了的）</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm lint</span><br></pre></td></tr></table></figure><p><strong>问题：</strong>默认进行的是全量检查，耗时问题，历史问题。</p><h4 id="暂存区eslint校验"><a href="#暂存区eslint校验" class="headerlink" title="暂存区eslint校验"></a>暂存区eslint校验</h4><p>只对暂存区里新的内容进行规范检查</p><p><strong>lint-staged 配置</strong></p><ol><li>安装</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm i lint-staged -D</span><br></pre></td></tr></table></figure><ol start="2"><li>配置 <code>package.json</code></li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// ... 省略 ...</span></span><br><span class="line">  <span class="string">&quot;lint-staged&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;*.&#123;js,ts,vue&#125;&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;eslint --fix&quot;</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="comment">// ... 省略 ...</span></span><br><span class="line">    <span class="string">&quot;lint-staged&quot;</span>: <span class="string">&quot;lint-staged&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>修改 .husky&#x2F;pre-commit 文件</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm lint-staged</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>算法相关</title>
      <link href="/2023/07/25/%E7%AE%97%E6%B3%95%E7%9B%B8%E5%85%B3/"/>
      <url>/2023/07/25/%E7%AE%97%E6%B3%95%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<h2 id="一些零碎小知识点"><a href="#一些零碎小知识点" class="headerlink" title="一些零碎小知识点"></a>一些零碎小知识点</h2><h3 id="常用头文件"><a href="#常用头文件" class="headerlink" title="常用头文件"></a>常用头文件</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span> <span class="comment">//万能头文件</span></span></span><br></pre></td></tr></table></figure><h3 id="动态数组"><a href="#动态数组" class="headerlink" title="动态数组"></a>动态数组</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cin&gt;&gt;n <span class="comment">//输入n</span></span><br><span class="line">cout&lt;&lt;a[i]&lt;&lt;endl <span class="comment">//输出a[i]并换行</span></span><br><span class="line">cout&lt;&lt;a[i]&lt;&lt;<span class="string">&quot;\n&quot;</span> <span class="comment">//输出a[i]并换行</span></span><br></pre></td></tr></table></figure><h3 id="指针定义二维数组"><a href="#指针定义二维数组" class="headerlink" title="指针定义二维数组"></a>指针定义二维数组</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">a = (<span class="type">int</span> **)<span class="built_in">calloc</span>(n,<span class="built_in">sizeof</span>(<span class="type">int</span> *)); <span class="comment">//或(int **)malloc(n*sizeof(int *));</span></span><br><span class="line"><span class="comment">//calloc 会初始化为0 malloc不会</span></span><br><span class="line"><span class="comment">//（int **）强制类型转换 指向int型变量指针的指针</span></span><br><span class="line"><span class="comment">//sizeof(int *) int型指针占的字节数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">    a[i]=(<span class="type">int</span> *)<span class="built_in">calloc</span>(n,<span class="built_in">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">&#125; <span class="comment">//定义n个int型变量指针</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">free</span>(a);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">    <span class="built_in">free</span>(a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//释放内存</span></span><br></pre></td></tr></table></figure><h3 id="输入到文件末尾"><a href="#输入到文件末尾" class="headerlink" title="输入到文件末尾"></a>输入到文件末尾</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a)!=EOF)</span><br><span class="line"><span class="keyword">while</span>(cin&gt;&gt;a)</span><br><span class="line"><span class="comment">//输入时 换行ctrl+z结束输入</span></span><br></pre></td></tr></table></figure><h3 id="ASCII表"><a href="#ASCII表" class="headerlink" title="ASCII表"></a>ASCII表</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">大写字母 A-Z 对应的 ASCII 码是 65-90</span><br><span class="line">小写字母 a-z 对应的 ASCII 码是 97-122</span><br></pre></td></tr></table></figure><h3 id="字符串处理"><a href="#字符串处理" class="headerlink" title="字符串处理"></a>字符串处理</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x27;\0&#x27; 空字符</span><br><span class="line">scanf输入到空格即停止</span><br><span class="line">gets会输入空格 输入到换行符停止（换行符也会被读入）</span><br><span class="line">gets会把空格当&#x27; &#x27;保存 而scanf会把他当&#x27;\0&#x27;</span><br><span class="line">sscanf ssprintf memset strlen</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//sscanf和sprintf函数</span></span><br><span class="line"><span class="built_in">sscanf</span>(s,<span class="string">&quot;%d&quot;</span>,&amp;c); <span class="comment">//字符串s -&gt; 整数c</span></span><br><span class="line"><span class="built_in">sprintf</span>(s,<span class="string">&quot;%d&quot;</span>,&amp;c); <span class="comment">//整数c -&gt; 字符串s</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//memset</span></span><br><span class="line"><span class="built_in">memset</span>(s,<span class="number">0</span>,<span class="built_in">sizeof</span>(s));</span><br><span class="line"></span><br><span class="line"><span class="comment">//strlen s.length求字符串长度函数</span></span><br><span class="line"><span class="comment">//strlen要计算长度的字符串，直到以空字符\0结尾的字符</span></span><br><span class="line"><span class="comment">//s.length计算长度的字符串,可以计算空格</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//getline整行输入 会计入空格符 但是cin&gt;&gt;s不会</span></span><br><span class="line">string s;</span><br><span class="line"><span class="built_in">getline</span>(cin,s);</span><br><span class="line"></span><br><span class="line"><span class="comment">//a串+b串</span></span><br><span class="line"><span class="comment">//1 string</span></span><br><span class="line">string s,s1;</span><br><span class="line">s+=s1;</span><br><span class="line"><span class="comment">//2 字符数组</span></span><br><span class="line"><span class="type">char</span> s[<span class="number">100</span>],s1[<span class="number">100</span>]</span><br><span class="line"><span class="built_in">strcat</span>(s,s1); <span class="comment">//等于上面的s+=s1 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//s串复制到s1串</span></span><br><span class="line"><span class="comment">//1 string</span></span><br><span class="line">string s,s1;</span><br><span class="line">s=s1;</span><br><span class="line"><span class="comment">//2 字符数组</span></span><br><span class="line"><span class="type">char</span> s[<span class="number">100</span>],s1[<span class="number">100</span>]</span><br><span class="line"><span class="built_in">strcpy</span>(s1,s);</span><br><span class="line"></span><br><span class="line"><span class="comment">//子串 </span></span><br><span class="line"><span class="comment">//string</span></span><br><span class="line">string s；</span><br><span class="line">s.<span class="built_in">substr</span>(a,b); <span class="comment">//从位置a起 b个字符</span></span><br><span class="line">s.<span class="built_in">substr</span>(a); <span class="comment">//从位置a起至字符串末尾</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//s找子串s1位置</span></span><br><span class="line"><span class="comment">//1 string</span></span><br><span class="line">string s,s1;</span><br><span class="line">s.<span class="built_in">find</span>(s1) <span class="comment">//若找到返回位置 若没找到返回一个很怪的值</span></span><br><span class="line">s.<span class="built_in">find</span>(s1,a) <span class="comment">//从s的a位置找s1</span></span><br><span class="line"><span class="keyword">if</span>(s.<span class="built_in">find</span>(s1)==string::npos) <span class="comment">//没找到的判定条件</span></span><br><span class="line"><span class="comment">//2 字符数组 </span></span><br><span class="line"><span class="type">char</span> s[<span class="number">100</span>],s1[<span class="number">100</span>];</span><br><span class="line"><span class="built_in">strstr</span>(s,s1) <span class="comment">//若找到返回位置 没找到返回NULL</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//s中插入s1,在第a个字符串前</span></span><br><span class="line"><span class="comment">//string</span></span><br><span class="line">string s,s1;</span><br><span class="line">s.<span class="built_in">insert</span> (a,s1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将字符串中小写字母变大写 大写变小写</span></span><br><span class="line">string s;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.length;i++)&#123;</span><br><span class="line">    s[i]=<span class="built_in">toupper</span>(s[i]) <span class="comment">//或 s[i]=tolower(s[i])</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//统计字串出现次数</span></span><br><span class="line"><span class="type">int</span> <span class="built_in">cs</span>(string s)&#123;</span><br><span class="line">    string s1=<span class="string">&quot;VK&quot;</span>;</span><br><span class="line">    <span class="type">int</span> c=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> b=s.<span class="built_in">find</span>(s1);</span><br><span class="line">    <span class="keyword">while</span>(s.<span class="built_in">find</span>(s1,b)!=string::npos)&#123;</span><br><span class="line">        c++;</span><br><span class="line">        b=s.<span class="built_in">find</span>(s1,b+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//strcmp 字符串比较函数 返回一个int</span></span><br><span class="line"><span class="built_in">strcmp</span>(str1,str2) </span><br><span class="line"><span class="comment">// 如果str1与str2相等，则返回值为0。</span></span><br><span class="line"><span class="comment">// 如果str1长度小于str2，则返回值小于0。</span></span><br><span class="line"><span class="comment">// 如果str1长度大于str2，则返回值大于0。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">strcpy</span>(str1,str2)</span><br><span class="line"><span class="comment">//把str2的内容赋值到str1里</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">strcat</span>(str1,str2)</span><br><span class="line"><span class="comment">//把str2内容贴到str1末尾</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">to_string</span>(<span class="type">int</span> a)</span><br><span class="line"><span class="comment">//把整数a变成string型</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="质数判断"><a href="#质数判断" class="headerlink" title="质数判断"></a>质数判断</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//大于1且只能被1和自身整除的数</span></span><br><span class="line"><span class="comment">//0 1  不是质数</span></span><br><span class="line"><span class="comment">//2 是质数</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">prime</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>||n==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i*i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n%i==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="switch语句举例"><a href="#switch语句举例" class="headerlink" title="switch语句举例"></a>switch语句举例</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (month) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;冬季\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;春季\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最大公因数"><a href="#最大公因数" class="headerlink" title="最大公因数"></a>最大公因数</h3><p>欧几里得算法，两个数相除，将余数作为新除数，直到除尽为止</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//递归写法</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(b==<span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">gcd</span>(b,a%b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//不用递归</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(b!=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="type">int</span> temp=b;</span><br><span class="line">        b=a%b;</span><br><span class="line">        a=temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="斐波那契"><a href="#斐波那契" class="headerlink" title="斐波那契"></a>斐波那契</h3><p>第1项 0 第2项 1 ，之后的每项都为前两项之和</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//递归写法</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">f</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">f</span>(n<span class="number">-1</span>)+<span class="built_in">f</span>(n<span class="number">-2</span>); </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//不用递归</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">f</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">int</span> a=<span class="number">0</span>,b=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">3</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="type">int</span> t=a+b;</span><br><span class="line">            a=b;</span><br><span class="line">            b=t;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="闰年"><a href="#闰年" class="headerlink" title="闰年"></a>闰年</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//能被4整除但不能被100整除 但能被400整除也是闰年</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="高精度"><a href="#高精度" class="headerlink" title="高精度"></a>高精度</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">string <span class="title">multiply</span><span class="params">(string num1,<span class="type">int</span> num2)</span></span>&#123; <span class="comment">//字符串表示高精度</span></span><br><span class="line">    string result = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="type">int</span> carry=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=num1.<span class="built_in">length</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123; <span class="comment">//字符串与一般数组的高低位是反着的</span></span><br><span class="line">        <span class="type">int</span> product=(num1[i]-<span class="string">&#x27;0&#x27;</span>)*num2+carry;</span><br><span class="line">        result=<span class="built_in">to_string</span>(product%<span class="number">10</span>)+result;</span><br><span class="line">        carry=product/<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(carry&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        result=<span class="built_in">to_string</span>(carry%<span class="number">10</span>)+result;</span><br><span class="line">        carry/=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125; 字符串高精度乘法</span><br><span class="line"><span class="built_in">sort</span>(a+<span class="number">1</span>,a+n+<span class="number">1</span>); 排a[<span class="number">1</span>]到a[n]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line">### 汉诺塔</span><br><span class="line">```c++</span><br><span class="line">//递归写法</span><br><span class="line">void digui(int n,char a,char b,char c)&#123; //n个盘移动从a移动到c，通过b</span><br><span class="line">    if(n==1) &#123;</span><br><span class="line">        cout&lt;&lt;a&lt;&lt;&quot;--&gt;&quot;&lt;&lt;c&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        digui(n-1,a,c,b);//n-1个盘移动从a移动到b，通过c</span><br><span class="line">        cout&lt;&lt;a&lt;&lt;&quot;--&gt;&quot;&lt;&lt;c&lt;&lt;endl;</span><br><span class="line">        digui(n-1,b,a,c);//n-1个盘移动从b移动到c，通过a</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//迭代写法 用栈</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="整数划分（不是很懂）"><a href="#整数划分（不是很懂）" class="headerlink" title="整数划分（不是很懂）"></a>整数划分（不是很懂）</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">digui</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> m)</span></span>&#123; <span class="comment">//n为待划分的数 m为最大划分数</span></span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">0</span>||m==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">//n==0时return1 因为n=0时已经在计算有一个m的情况了</span></span><br><span class="line">    <span class="keyword">if</span>(n&gt;=m)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">digui</span>(n,m<span class="number">-1</span>)+<span class="built_in">digui</span>(n-m,m);</span><br><span class="line">        <span class="comment">//digui(n,m-1)是指 划分数中不包含m的情况</span></span><br><span class="line">        <span class="comment">//digui（n-m，m）是指划分数中已经有一个m 在计算其他情况</span></span><br><span class="line">        <span class="comment">//两者相加即为所得</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">digui</span>(n,n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(cin&gt;&gt;n)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="built_in">digui</span>(n,n)&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>auto current = circle.begin()vector.begin()vector.end()push_back(value)：将元素添加到vector的末尾。pop_back()：移除vector的最后一个元素。size()：返回vector中元素的个数。empty()：检查vector是否为空，如果为空返回true，否则返回false。clear()：清空vector中的所有元素。resize(newSize)：改变vector的大小，使其包含指定数量的元素。front()：返回vector的第一个元素。back()：返回vector的最后一个元素。at(index)：返回指定索引处的元素。begin() 和 end()：返回指向vector首元素和尾后元素的迭代器，用于遍历vector中的元素。insert(iterator, value)：在指定位置之前插入元素。erase(iterator)：移除指定位置的元素。swap(vector2)：交换两个vector容器的元素。大整数乘法 </code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> c </tag>
            
            <tag> c++ </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown相关</title>
      <link href="/2023/07/24/markdown%E7%9B%B8%E5%85%B3/"/>
      <url>/2023/07/24/markdown%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<h2 id="多个标签用法"><a href="#多个标签用法" class="headerlink" title="多个标签用法"></a>多个标签用法</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tags: </span><br><span class="line"><span class="bullet">  -</span> hexo   </span><br><span class="line"><span class="bullet">  -</span> gitee</span><br><span class="line"><span class="bullet">  -</span> 命令行</span><br><span class="line">  &lt;!-- -加空格  --&gt;</span><br></pre></td></tr></table></figure><h2 id="Markdown文档通常应该怎么写"><a href="#Markdown文档通常应该怎么写" class="headerlink" title="Markdown文档通常应该怎么写"></a>Markdown文档通常应该怎么写</h2><h3 id="使用标题："><a href="#使用标题：" class="headerlink" title="使用标题："></a>使用标题：</h3><p>使用井号（#）开头创建标题。使用多个井号表示不同级别的标题。例如：</p>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 标题1</span><br><span class="line">## 标题2</span><br><span class="line">### 标题3</span><br></pre></td></tr></table></figure><h3 id="强调内容："><a href="#强调内容：" class="headerlink" title="强调内容："></a>强调内容：</h3><p>使用星号（*）或下划线（_）对内容进行强调。单个星号或下划线是斜体，两个是粗体，三个是粗斜体。例如：</p>   <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="emphasis">*斜体*</span></span><br><span class="line"><span class="strong">**粗体**</span></span><br><span class="line"><span class="strong">**<span class="emphasis">*粗斜体*</span>**</span></span><br></pre></td></tr></table></figure><h3 id="列表："><a href="#列表：" class="headerlink" title="列表："></a>列表：</h3><p>使用短横线（-）或数字加点创建无序或有序列表。例如：</p>   <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> 无序列表项1</span><br><span class="line"><span class="bullet">-</span> 无序列表项2</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 有序列表项1</span><br><span class="line"><span class="bullet">2.</span> 有序列表项2</span><br></pre></td></tr></table></figure><h3 id="链接和图片："><a href="#链接和图片：" class="headerlink" title="链接和图片："></a>链接和图片：</h3><p>使用中括号（[]）输入链接文本，并使用小括号（()）输入链接地址。例如：</p>   <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">链接文本</span>](<span class="link">链接地址</span>)</span><br><span class="line">![<span class="string">图片描述</span>](<span class="link">图片链接地址</span>)</span><br></pre></td></tr></table></figure><h3 id="引用块："><a href="#引用块：" class="headerlink" title="引用块："></a>引用块：</h3><p>使用大于号（&gt;）创建引用块。例如：</p>   <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; 这是引用的内容。</span></span><br></pre></td></tr></table></figure><h3 id="代码块："><a href="#代码块：" class="headerlink" title="代码块："></a>代码块：</h3><p>使用三个反引号（&#96;&#96;&#96;)创建代码块，并指定代码语言。例如：</p>   <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello, world!&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="分割线："><a href="#分割线：" class="headerlink" title="分割线："></a>分割线：</h3><p>使用三个或更多的连字符（-）或星号（*）创建分割线。例如：</p>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">---</span><br></pre></td></tr></table></figure><h3 id="表格："><a href="#表格：" class="headerlink" title="表格："></a>表格：</h3><p>使用垂直竖线（|）和连字符（-）创建简单的表格。例如：</p>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">| 列1 | 列2 |</span><br><span class="line">|-----|-----|</span><br><span class="line">| 内容1 | 内容2 |</span><br></pre></td></tr></table></figure><h3 id="注释："><a href="#注释：" class="headerlink" title="注释："></a>注释：</h3><p>使用HTML注释语法添加注释<br>    <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 注释 --&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>My_First_Blog</title>
      <link href="/2023/07/22/My-First-Blog/"/>
      <url>/2023/07/22/My-First-Blog/</url>
      
        <content type="html"><![CDATA[<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="hexo常用操作"><a href="#hexo常用操作" class="headerlink" title="hexo常用操作"></a>hexo常用操作</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="built_in">test</span> <span class="comment">#新建一个test文档</span></span><br><span class="line">$ hexo s -p 8080 <span class="comment">#启动服务 本地看 8080端口、</span></span><br><span class="line">$ hexo clean          <span class="comment"># 清除所有记录</span></span><br><span class="line">$ hexo generate       <span class="comment"># 生成静态网页 hexo g</span></span><br><span class="line">$ hexo deplore <span class="comment">#部署 hexo d</span></span><br></pre></td></tr></table></figure><h3 id="相对路径写法"><a href="#相对路径写法" class="headerlink" title="相对路径写法"></a>相对路径写法</h3><p><strong>.&#x2F;</strong> 用于相对于当前文件夹<br><strong>…&#x2F;</strong> 用于相对于当前文件夹的上一级文件夹</p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> gitee </tag>
            
            <tag> 命令行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/07/20/hello-world/"/>
      <url>/2023/07/20/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
