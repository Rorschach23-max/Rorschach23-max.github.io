<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>24.3-5月总结</title>
      <link href="/2024/05/20/24-3-5%E6%9C%88%E6%80%BB%E7%BB%93/"/>
      <url>/2024/05/20/24-3-5%E6%9C%88%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h3 id="1-微信小程序"><a href="#1-微信小程序" class="headerlink" title="1 微信小程序"></a>1 微信小程序</h3><h4 id="1-1-rpx"><a href="#1-1-rpx" class="headerlink" title="1.1 rpx"></a>1.1 rpx</h4><p>rpx是处理不同设备，元素大小的一种方法。</p><p>微信小程序的宽度固定是750rpx ，高度的rpx由长宽比决定。</p><p>其他处理相对大小的方法：</p><ul><li>使用百分比（<code>%</code>），这种方式相对于父容器来定义高度，可以适用于一些需要相对高度的场景。</li><li>使用视窗高度（<code>vh</code>）来设置元素的高度。<code>vh</code>是CSS中的单位，其中<code>1vh</code>等于1%的视窗（viewport）高度（即浏览器高度）。</li></ul><h4 id="1-2-wxml-与html-区别"><a href="#1-2-wxml-与html-区别" class="headerlink" title="1.2 wxml 与html 区别"></a>1.2 wxml 与html 区别</h4><ol><li><strong>标签和属性</strong>：<ul><li>WXML为微信小程序特有的标记语言，它提供了一些自定义组件（如 <code>&lt;view&gt;</code>、<code>&lt;text&gt;</code> 等）来替代HTML中的标签（如 <code>&lt;div&gt;</code>、<code>&lt;span&gt;</code>）。</li><li>WXML中，<code>class</code>和<code>style</code>等属性可以动态绑定数据（使用<code>&#123;&#123;&#125;&#125;</code>语法，括号内加js语句），从而实现动态的样式和内容。</li></ul></li><li><strong>数据绑定</strong>：<ul><li>WXML提供类似Vue数据绑定，通过<code>&#123;&#123;&#125;&#125;</code>进行变量插值，很方便地将页面数据与逻辑层数据连接。</li></ul></li><li><strong>事件处理</strong>：<ul><li>WXML中的事件绑定使用<code>bind</code>或<code>catch</code>前缀（如<code>bindtap</code>、<code>catchtap</code>），而HTML中则使用<code>on</code>前缀（如<code>onclick</code>）。</li><li>微信小程序中的事件绑定允许开发者直接在WXML标签中定义处理函数，而不需要在页面加载后单独进行事件监听的设置。</li></ul></li><li><strong>条件渲染和列表渲染</strong>：<ul><li>WXML提供了类似Vue的<code>wx:if</code>、<code>wx:elif</code>、<code>wx:else</code>属性用于条件渲染，以及<code>wx:for</code>用于循环列表渲染。这些指令能够简化页面的动态内容生成。</li></ul></li></ol><h3 id="2-CSS"><a href="#2-CSS" class="headerlink" title="2 CSS"></a>2 CSS</h3><h4 id="2-1-display属性"><a href="#2-1-display属性" class="headerlink" title="2.1 display属性"></a>2.1 display属性</h4><ol><li><p>**<code>none</code>**：<br>元素不会被显示，并从文档流中移除，就好像它从来没有存在过一样。元素不占空间，它后面的元素会填补它原来的位置。</p></li><li><p>**<code>block</code>**：<br><strong>块级元素</strong>。这意味着元素会新起一行显示，并尽可能填满其父容器的宽度。块级元素可以设置宽度、高度、外边距（margin）和内边距（padding）。</p></li><li><p>**<code>inline</code>**：<br><strong>行内元素</strong>。元素不会新起一行，而是会和其他行内元素一样，在文本中同一行排列，只能在元素的前后添加内容。行内元素不能设置宽度和高度。</p></li><li><p>**<code>inline-block</code>**：<br>结合了<code>inline</code>和<code>block</code>的特性。元素同行内元素一样水平排列，但它可以像块级元素一样设置宽度、高度、外边距和内边距。</p></li><li><p>**<code>flex</code>**：<br>元素将变为弹性容器（flex container），其子元素（flex items）能使用弹性布局的属性。这是CSS3中引入的一种布局模式，能够简化复杂的布局设计。</p></li><li><p>**<code>grid</code>**：<br>类似于<code>flex</code>，<code>grid</code>也是CSS3引入的一种现代布局模式。元素将变为网格容器，其内部子元素可以放在网格布局中。它为复杂的二维布局提供了更为强大和灵活的解决方案。</p></li><li><p>**<code>table</code>**、<code>table-row</code>、<code>table-cell</code>等：<br>这一系列属性值将元素表现得像HTML中的表格元素一样。例如，<code>display: table;</code>可以将一个元素变为类似<code>&lt;table&gt;</code>的块级表格容器，而<code>display: table-cell;</code>则模仿了<code>&lt;td&gt;</code>的单元格盒子效果。</p><p>(注:需要使用表格，尽量用div元素再设置display为table)</p></li></ol><h4 id="2-2-position属性定位"><a href="#2-2-position属性定位" class="headerlink" title="2.2 position属性定位"></a>2.2 position属性定位</h4><ul><li>**<code>static</code>**（默认）：不进行特殊定位，元素出现在正常的流中。</li><li>**<code>relative</code>**：元素相对于其正常位置进行定位。</li><li>**<code>absolute</code>**：元素相对于最近的非static定位的祖先元素进行定位。</li><li>**<code>fixed</code>**：元素相对于浏览器窗口进行定位，即便窗口滚动，元素也会保持在指定的位置。</li><li>**<code>sticky</code>**：元素根据用户的滚动位置在<code>relative</code>和<code>fixed</code>定位之间切换。</li></ul><p>使用<code>left</code>、<code>right</code>、<code>top</code>、<code>bottom</code>属性取决于position属性的值</p><h4 id="2-3-flex弹性布局"><a href="#2-3-flex弹性布局" class="headerlink" title="2.3 flex弹性布局"></a>2.3 flex弹性布局</h4><p>属性</p><ul><li>flex-direction</li><li>flex-wrap</li><li>justify-content</li><li>align-items</li></ul><h5 id="2-3-1-flex-direction属性"><a href="#2-3-1-flex-direction属性" class="headerlink" title="2.3.1 flex-direction属性"></a>2.3.1 flex-direction属性</h5><p>flex-direction属性决定主轴的方向（即项目的排列方向）。</p><ul><li>row（默认值）：主轴为水平方向，起点在左端。</li><li>row-reverse：主轴为水平方向，起点在右端。</li><li>column：主轴为垂直方向，起点在上沿。</li><li>column-reverse：主轴为垂直方向，起点在下沿。</li></ul><h5 id="2-3-2-flex-wrap属性"><a href="#2-3-2-flex-wrap属性" class="headerlink" title="2.3.2 flex-wrap属性"></a>2.3.2 flex-wrap属性</h5><p>flex-wrap属性决定换行</p><ul><li>nowrap（默认）：不换行。</li><li>wrap：换行，第一行在上方。</li><li>wrap-reverse：换行，第一行在下方。</li></ul><h5 id="2-3-3-justify-content属性"><a href="#2-3-3-justify-content属性" class="headerlink" title="2.3.3 justify-content属性"></a>2.3.3 justify-content属性</h5><p>justify-content决定水平方向的对齐</p><ul><li>flex-start（默认值）：左对齐</li><li>flex-end：右对齐</li><li>center： 居中</li><li>space-between：两端对齐，项目之间的间隔都相等。</li><li>space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</li></ul><h5 id="2-3-4-align-items属性"><a href="#2-3-4-align-items属性" class="headerlink" title="2.3.4 align-items属性"></a>2.3.4 align-items属性</h5><p>align-items决定垂直方向的对齐</p><ul><li>flex-start：交叉轴的起点对齐。</li><li>flex-end：交叉轴的终点对齐。</li><li>center：交叉轴的中点对齐。</li><li>baseline: 项目的第一行文字的基线对齐。</li><li>stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</li></ul><h3 id="3-JS"><a href="#3-JS" class="headerlink" title="3 JS"></a>3 JS</h3><h4 id="3-1-DOM操作"><a href="#3-1-DOM操作" class="headerlink" title="3.1 DOM操作"></a>3.1 DOM操作</h4><h3 id="4-NodeJS"><a href="#4-NodeJS" class="headerlink" title="4 NodeJS"></a>4 NodeJS</h3><h4 id="4-1-linux-NodeJs安装"><a href="#4-1-linux-NodeJs安装" class="headerlink" title="4.1 linux NodeJs安装"></a>4.1 linux NodeJs安装</h4><h5 id="4-1-1-下载nodejs"><a href="#4-1-1-下载nodejs" class="headerlink" title="4.1.1 下载nodejs"></a>4.1.1 下载nodejs</h5><p>去官网 <a href="https://nodejs.org/en/download/source-code">Node.js — Download Node.js® (nodejs.org)</a></p><p><img src="/../img/md/node-1.jpg"></p><p>右键复制链接</p><p>输入<code>wget https://nodejs.org/dist/v20.13.1/node-v20.13.1.tar.gz</code></p><p>解压 <code>tar zxvf node-v20.13.1.tar.gz</code></p><h5 id="4-1-2-设置软链接-供全局使用"><a href="#4-1-2-设置软链接-供全局使用" class="headerlink" title="4.1.2 设置软链接 供全局使用"></a>4.1.2 设置软链接 供全局使用</h5><p><code>ln -s /usr/local/node-v20.13.1/bin/node  /usr/local/bin/node</code></p><p><code>ln -s /usr/local/node-v20.13.1/bin/npm  /usr/local/bin/npm</code></p><p>设置好后 winscp可以看到</p><p><img src="/..%5Cimg%5Cmd%5Cnode-2.png"></p><h5 id="4-1-3-配置环境，以防万一"><a href="#4-1-3-配置环境，以防万一" class="headerlink" title="4.1.3 配置环境，以防万一"></a>4.1.3 配置环境，以防万一</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//进入到profile文件</span><br><span class="line">vim /etc/profile  </span><br><span class="line">//在文件的末尾添加一下三行语句 (vim 操作命令可见此博客)</span><br><span class="line">export NODE_HOME=/usr/local/node-v20.13.1</span><br><span class="line">export PATH=$PATH:$NODE_HOME/bin</span><br><span class="line">export NODE_PATH=$NODE_HOME/lib/node_modules</span><br><span class="line">//按ESC键，再输入:wq保存并退出</span><br><span class="line">//配置完成后执行 </span><br><span class="line">source /etc/profile</span><br><span class="line">//在命令行中输入 node -v </span><br><span class="line">//为了保证每个账户下该配置均可用需要</span><br><span class="line">vim /root/.bashrc</span><br><span class="line">//在这个文件的末尾加上以下这句语句</span><br><span class="line">source etc/profile</span><br><span class="line">//按ESC键，再输入:wq保存并退出</span><br><span class="line">//成啦</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4-2-pm2操作"><a href="#4-2-pm2操作" class="headerlink" title="4.2 pm2操作"></a>4.2 pm2操作</h4><p>pm2: linux系统下用来保证nodejs文件一直运行的软件</p><p>pm2常用命令</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">启动：pm2 start demo.js  //demo.js是你要启动的app_name|app_id文件</span><br><span class="line">停止：pm2 stop app_name|app_id</span><br><span class="line">删除：pm2 delete app_name|app_id</span><br><span class="line">重启：pm2 restart app_name|app_id</span><br><span class="line">停止所有：pm2 stop all</span><br><span class="line">查看所有的进程：pm2 list</span><br><span class="line">查看所有的进程状态：pm2 status</span><br><span class="line">查看某一个进程的信息：pm2 describe app_name|app_id</span><br><span class="line">参数说明</span><br><span class="line">--watch：监听应用目录源码的变化，一旦发生变化，自动重启。如果要精确监听、不见听的目录，最好通过配置文件</span><br><span class="line">-i --instances：启用多少个实例，可用于负载均衡。如果-i 0或者-i max，则根据当前机器核数确定实例数目，可以弥补node.js缺陷</span><br><span class="line">--ignore-watch：排除监听的目录/文件，可以是特定的文件名，也可以是正则。比如--ignore-watch=&quot;test node_modules &quot;some scripts&quot;</span><br><span class="line">-n --name：应用的名称，查看应用信息的时候可以用到</span><br><span class="line">-o --output &lt;path&gt;：标准输出日志文件的路径，有默认路径</span><br><span class="line">-e --error &lt;path&gt;：错误输出日志文件的路径，有默认路径</span><br><span class="line">--interpreter &lt;interpreter&gt;：the interpreter pm2 should use for executing app (bash, python...)</span><br><span class="line">如完整参数命令：</span><br><span class="line">pm2 start demo.js --watch -i 2   //开启2个进程</span><br><span class="line">pm2 start app.js -i max   //根据机器CPU核数，开启对应数目的进程 </span><br></pre></td></tr></table></figure><h4 id="4-3-vim"><a href="#4-3-vim" class="headerlink" title="4.3 vim"></a>4.3 vim</h4><p>linux文本编辑器</p><p>在 Vim 中，有三种主要的工作模式：</p><ol><li><strong>普通模式（Normal mode）</strong>：执行浏览和编辑命令。</li><li><strong>插入模式（Insert mode）</strong>：编辑文本，输入字符。</li><li><strong>命令模式（Command mode）</strong>：保存或退出文档，设置配置，运行宏等。</li></ol><p>一些Vim中常用的操作和命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">进入和退出</span><br><span class="line">vim 文件名：在终端中打开一个文件。</span><br><span class="line">:q：退出Vim（如果有未保存的更改，此命令会失败）。</span><br><span class="line">:q!：强制退出并丢弃所有更改。</span><br><span class="line">:w：保存文件。</span><br><span class="line">:wq或:x或ZZ：保存文件并退出。</span><br><span class="line">:w 文件名：保存文件到指定的文件名。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">普通模式：</span><br><span class="line">h、j、k、l：左、下、上、右移动光标。</span><br><span class="line">w和W：移动到下一个单词的开头。</span><br><span class="line">b和B：移动到上一个单词的开头。</span><br><span class="line">e和E：移动到下一个单词的末尾。</span><br><span class="line">0：移动到行首。</span><br><span class="line">$：移动到行末。</span><br><span class="line">gg：移动到文件的第一行。</span><br><span class="line">G：移动到文件的最后一行。</span><br><span class="line">Ctrl + f：向下滚动一页。</span><br><span class="line">Ctrl + b：向上滚动一页。</span><br><span class="line">dd：删除（剪切）当前行。</span><br><span class="line">yy：复制当前行。</span><br><span class="line">p：粘贴内容到光标后。</span><br><span class="line">u：撤销上一步操作。</span><br><span class="line">Ctrl + r：重做上一步被撤销的操作。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">插入模式：</span><br><span class="line">i：在光标位置进入插入模式。</span><br><span class="line">Esc：从插入模式返回普通模式。</span><br></pre></td></tr></table></figure><h3 id="5-异步操作-Promise-Async-Await"><a href="#5-异步操作-Promise-Async-Await" class="headerlink" title="5 异步操作 Promise Async Await"></a>5 异步操作 Promise Async Await</h3><p>在JavaScript中，异步操作通常用于执行耗时的任务，如数据请求、文件读写等，而不阻塞主线程的执行。回调函数是处理异步操作的一种方式，但如果使用不当，可能导致回调地狱（Callback Hell）的问题。而Promises提供了更好的异步操作管理方法。</p><h4 id="5-1-什么是Promise？"><a href="#5-1-什么是Promise？" class="headerlink" title="5.1 什么是Promise？"></a>5.1 什么是Promise？</h4><p>Promise是一个表示异步操作最终完成或失败的对象。它允许你为异步操作的成功值或失败原因编写处理方法。Promise有三种状态：</p><ul><li>Pending（等待态）：异步操作尚未完成。</li><li>Fulfilled（成功态）：异步操作成功完成。</li><li>Rejected（失败态）：异步操作失败。</li></ul><h4 id="5-2-创建与使用Promise"><a href="#5-2-创建与使用Promise" class="headerlink" title="5.2 创建与使用Promise"></a>5.2 创建与使用Promise</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 异步操作</span></span><br><span class="line">  <span class="keyword">const</span> success = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">if</span> (success) &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;Operation successful&#x27;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&#x27;Operation failed&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">promise</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value); <span class="comment">// &#x27;Operation successful&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(error); <span class="comment">// &#x27;Operation failed&#x27;</span></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h4 id="5-3-Promise链式调用"><a href="#5-3-Promise链式调用" class="headerlink" title="5.3 Promise链式调用"></a>5.3 Promise链式调用</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">doSomething</span>()</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> <span class="title function_">doSomethingElse</span>(result))</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">newResult</span> =&gt;</span> <span class="title function_">doThirdThing</span>(newResult))</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">finalResult</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Got the final result: <span class="subst">$&#123;finalResult&#125;</span>`</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(failureCallback);</span><br></pre></td></tr></table></figure><p>Promise链式调用中，每个<code>.then()</code>方法接收前一个<code>.then()</code>返回的结果作为输入，在链的任意位置抛出的错误（或被<code>reject</code>的Promise）都会被最近的<code>.catch()</code>处理。</p><h4 id="5-4-Promise-all"><a href="#5-4-Promise-all" class="headerlink" title="5.4 Promise.all"></a>5.4 Promise.all</h4><p><code>Promise.all()</code>可以将多个Promise实例包装成一个新的Promise实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise1 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">const</span> promise2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> <span class="built_in">setTimeout</span>(resolve, <span class="number">100</span>, <span class="string">&#x27;foo&#x27;</span>));</span><br><span class="line"><span class="keyword">const</span> promises = [promise1, promise2];</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>(promises)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">results</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> [result1, result2] = results;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result1); <span class="comment">// 3</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result2); <span class="comment">// &#x27;foo&#x27;</span></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>只有当所有Promise都fulfill了，由<code>Promise.all()</code>返回的新Promise才会fulfill，它的结果是一个数组，包含了所有传入的Promise的结果。如果传入的任意一个Promise被reject，新的Promise也会立即reject，并且reject的是第一个Promise的错误信息。</p><h4 id="5-5-async和await"><a href="#5-5-async和await" class="headerlink" title="5.5 async和await"></a>5.5 async和await</h4><h5 id="5-5-1-什么是aysnc-和-await"><a href="#5-5-1-什么是aysnc-和-await" class="headerlink" title="5.5.1 什么是aysnc 和 await"></a>5.5.1 什么是<code>aysnc</code> 和 <code>await</code></h5><ul><li><code>async</code> 关键字用来定义一个异步函数，函数中的操作默认返回一个Promise。</li><li><code>await</code> 关键字只能在<code>async</code>函数中使用，它使异步函数暂停执行，直到Promise解决，然后返回Promise的结果。</li></ul><h5 id="5-5-2-使用async-和-await基本示例"><a href="#5-5-2-使用async-和-await基本示例" class="headerlink" title="5.5.2 使用async 和 await基本示例"></a>5.5.2 使用<code>async</code> 和 <code>await</code>基本示例</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个返回Promise的函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fetchData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="string">&#x27;数据获取成功&#x27;</span>), <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用async和await获取数据</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Fetching data...&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">fetchData</span>(); <span class="comment">// 等待Promise解决</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// 输出：数据获取成功</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getData</span>();</span><br></pre></td></tr></table></figure><h5 id="5-5-3-错误处理"><a href="#5-5-3-错误处理" class="headerlink" title="5.5.3 错误处理"></a>5.5.3 错误处理</h5><p>使用<code>async</code>和<code>await</code>处理异步操作时，同样需要考虑错误处理。可以通过<code>try...catch</code>块来处理可能的异步操作错误：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getDataWithErrorHandling</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Fetching data...&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">fetchData</span>(); <span class="comment">// 等待Promise解决</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// 输出：数据获取成功</span></span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error fetching data:&#x27;</span>, error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getDataWithErrorHandling</span>();</span><br></pre></td></tr></table></figure><h5 id="5-5-4-多个异步操作进行交互"><a href="#5-5-4-多个异步操作进行交互" class="headerlink" title="5.5.4 多个异步操作进行交互"></a>5.5.4 多个异步操作进行交互</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fetchData1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="string">&#x27;数据1获取成功&#x27;</span>), <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fetchData2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="string">&#x27;数据2获取成功&#x27;</span>), <span class="number">500</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchDataSequentially</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> data1 = <span class="keyword">await</span> <span class="title function_">fetchData1</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data1); <span class="comment">// 数据1获取成功</span></span><br><span class="line">    <span class="keyword">const</span> data2 = <span class="keyword">await</span> <span class="title function_">fetchData2</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data2); <span class="comment">// 数据2获取成功</span></span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error fetching data:&#x27;</span>, error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fetchDataSequentially</span>();</span><br></pre></td></tr></table></figure><p>使用<code>await</code>时，每个异步操作是顺序执行的。这意味着如果你想并行执行多个异步操作，可以使用<code>Promise.all</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchDataConcurrently</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> [data1, data2] = <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>([<span class="title function_">fetchData1</span>(), <span class="title function_">fetchData2</span>()]);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data1); <span class="comment">// 数据1获取成功</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data2); <span class="comment">// 数据2获取成功</span></span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error fetching data:&#x27;</span>, error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fetchDataConcurrently</span>();</span><br></pre></td></tr></table></figure><h5 id="5-5-5-总结"><a href="#5-5-5-总结" class="headerlink" title="5.5.5 总结"></a>5.5.5 总结</h5><ul><li><strong><code>async</code>函数</strong>：定义异步函数，它返回一个Promise。</li><li><strong><code>await</code>关键字</strong>：暂停<code>async</code>函数的执行，等待Promise解决，并返回结果。它只能在<code>async</code>函数中使用。</li><li><strong>错误处理</strong>：使用<code>try...catch</code>块在异步函数中处理可能的错误。</li><li><strong>顺序操作</strong>：将多个异步操作顺序执行，通过多个<code>await</code>。</li></ul><p>通过使用<code>async</code>和<code>await</code>，可以使异步代码看起来更像是同步代码，增强代码的可读性和维护性。</p>]]></content>
      
      
      
        <tags>
            
            <tag> html css js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue笔记</title>
      <link href="/2024/04/15/Vue%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/04/15/Vue%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="1-使用Vue"><a href="#1-使用Vue" class="headerlink" title="1 使用Vue"></a>1 使用Vue</h3><h4 id="1-1-引用Vue-js"><a href="#1-1-引用Vue-js" class="headerlink" title="1.1 引用Vue.js"></a>1.1 引用Vue.js</h4><p>1 放到body后，DOM加载完后引用 </p><p>2 先引用vue.js 再引用自己的js</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/jquery-3.5.1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/lookUp.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-2-代码示例"><a href="#1-2-代码示例" class="headerlink" title="1.2 代码示例"></a>1.2 代码示例</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;vue_test&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>site : &#123;&#123;site&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>url : &#123;&#123;url&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;details()&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#vue_test&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">site</span>: <span class="string">&quot;Winter&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">url</span>: <span class="string">&quot;www.winterlee.top.com&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">details</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span>  <span class="variable language_">this</span>.<span class="property">site</span> + <span class="string">&quot; Winter&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>1.Vue构造器中参数el与DOM中元素的id保持一致</p><p>2.data用于定义属性，存放数据和变量</p><p>3.methods用于定义函数</p><h3 id="2-Vue的指令"><a href="#2-Vue的指令" class="headerlink" title="2 Vue的指令"></a>2 Vue的指令</h3><h4 id="2-1-V-for"><a href="#2-1-V-for" class="headerlink" title="2.1 V-for"></a>2.1 V-for</h4><p>v-for 可以绑定数据到数组来渲染一个列表：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;province&quot;</span> &gt;</span>省份:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;province&quot;</span>  <span class="attr">name</span>=<span class="string">&quot;province&quot;</span> <span class="attr">onChange</span>=<span class="string">&quot;switchSubjects()&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">v-for</span>=<span class="string">&quot;province in provinces&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;province.value&quot;</span>&gt;</span>&#123;&#123;province.name&#125;&#125;<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>样例中provinces是Vue实例中的数据 province是其元素迭代别名 </p><h4 id="2-2-V-if"><a href="#2-2-V-if" class="headerlink" title="2.2 V-if"></a>2.2 V-if</h4><p>v-if用来显示或者隐藏元素：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;subject-row&quot;</span> <span class="attr">id</span>=<span class="string">&quot;type-0&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;type===0&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;subject-button&quot;</span> <span class="attr">name</span>=<span class="string">&quot;subject&quot;</span> <span class="attr">value</span>=<span class="string">&quot;文史&quot;</span></span></span><br><span class="line"><span class="tag">                @<span class="attr">click</span>=<span class="string">&quot;onActivateWenke&quot;</span> <span class="attr">id</span>=<span class="string">&quot;wenke&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;&#x27;active&#x27;:selectedWenke&#125;&quot;</span>&gt;</span>文科<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;subject-button&quot;</span> <span class="attr">name</span>=<span class="string">&quot;subject&quot;</span> <span class="attr">value</span>=<span class="string">&quot;理工&quot;</span></span></span><br><span class="line"><span class="tag">                @<span class="attr">click</span>=<span class="string">&quot;onActivateLike&quot;</span> <span class="attr">id</span>=<span class="string">&quot;like&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;&#x27;active&#x27;:selectedLike&#125;&quot;</span>&gt;</span>理科<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>v-if后面跟着JS语句 其值决定是否隐藏该元素</p><p>还有v-else-if v-else 需要跟在v-if或者v-else-if后面</p><h4 id="2-3-v-bind-和-v-model"><a href="#2-3-v-bind-和-v-model" class="headerlink" title="2.3 v-bind 和 v-model"></a>2.3 v-bind 和 v-model</h4><p>v-bind 绑定Vue数据到html元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;province&quot;</span>  <span class="attr">name</span>=<span class="string">&quot;province&quot;</span> <span class="attr">onChange</span>=<span class="string">&quot;switchSubjects()&quot;</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">v-for</span>=<span class="string">&quot;province in provinces&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;province.value&quot;</span>&gt;</span>&#123;&#123;province.name&#125;&#125;<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 其他省份 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里的:value 实际是 v-bind:value的简写</p><p>v-model实现数据和html元素的<strong>双向绑定</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;score&quot;</span>&gt;</span>分数:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">id</span>=<span class="string">&quot;score&quot;</span> <span class="attr">name</span>=<span class="string">&quot;score&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入您的分数&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;score&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>改一个 变两个</p><h4 id="2-4-v-on-click-和-v-on-change"><a href="#2-4-v-on-click-和-v-on-change" class="headerlink" title="2.4 v-on:click 和 v-on:change"></a>2.4 v-on:click 和 v-on:change</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;message&quot;</span>&gt;</span>一键智能查询<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>缩写是 @click和@change</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Git</title>
      <link href="/2024/04/07/Git/"/>
      <url>/2024/04/07/Git/</url>
      
        <content type="html"><![CDATA[<h3 id="对于Git一些操作-通过各种区来理解"><a href="#对于Git一些操作-通过各种区来理解" class="headerlink" title="对于Git一些操作 通过各种区来理解"></a>对于Git一些操作 通过各种区来理解</h3><p><img src="/../img/md/git-zone.png"></p><h4 id="Workspace：工作区"><a href="#Workspace：工作区" class="headerlink" title="Workspace：工作区"></a>Workspace：工作区</h4><p>本地电脑上的东西都在这个区</p><p><strong>从远程仓库克隆到本地</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/username/repository.git</span><br></pre></td></tr></table></figure><p><strong>从远程仓库克隆特定分支到本地</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b branch-name https://github.com/username/repository.git</span><br></pre></td></tr></table></figure><p><strong>远程仓库有多个分支时</strong>，<strong>切换到想要更新的分支</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout branch-name</span><br></pre></td></tr></table></figure><p>（获取fetch 然后 合并merge ） 或者 pull抓取 等同这两个操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git fetch origin</span><br><span class="line">git merge origin/branch-name</span><br><span class="line"></span><br><span class="line">git pull origin branch-name</span><br></pre></td></tr></table></figure><h4 id="Index-Stage：暂存区"><a href="#Index-Stage：暂存区" class="headerlink" title="Index &#x2F; Stage：暂存区"></a>Index &#x2F; Stage：暂存区</h4><p>要提交 首先得把工作区的更改放到暂存区</p><p><strong>提交某个文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add filename.txt</span><br></pre></td></tr></table></figure><p>**提交全部文件 **</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure><h4 id><a href="#" class="headerlink" title></a></h4><p>Repository：仓库区（或本地仓库）</p><p>要把<strong>暂存区的变更提交到仓库</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;提交的注释&quot;</span></span><br></pre></td></tr></table></figure><h4 id="-1"><a href="#-1" class="headerlink" title></a></h4><p>Remote：远程仓库</p><p><strong>推送到master分支</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure><p><strong>推送本地分支到远程仓库</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin feature-branch</span><br></pre></td></tr></table></figure><p><strong>设置推送的新分支为上游分支，之后每次提交只需用 git push</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin feature-branch</span><br></pre></td></tr></table></figure><p><strong>合并dev分支到master分支</strong> <strong>然后上传</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git merge dev</span><br><span class="line">git push master</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/04/07/hello-world/"/>
      <url>/2024/04/07/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>算法相关</title>
      <link href="/2023/07/25/%E7%AE%97%E6%B3%95%E7%9B%B8%E5%85%B3/"/>
      <url>/2023/07/25/%E7%AE%97%E6%B3%95%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<h2 id="一些零碎小知识点"><a href="#一些零碎小知识点" class="headerlink" title="一些零碎小知识点"></a>一些零碎小知识点</h2><h3 id="常用头文件"><a href="#常用头文件" class="headerlink" title="常用头文件"></a>常用头文件</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span> <span class="comment">//万能头文件</span></span></span><br></pre></td></tr></table></figure><h3 id="动态数组"><a href="#动态数组" class="headerlink" title="动态数组"></a>动态数组</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cin&gt;&gt;n <span class="comment">//输入n</span></span><br><span class="line">cout&lt;&lt;a[i]&lt;&lt;endl <span class="comment">//输出a[i]并换行</span></span><br><span class="line">cout&lt;&lt;a[i]&lt;&lt;<span class="string">&quot;\n&quot;</span> <span class="comment">//输出a[i]并换行</span></span><br></pre></td></tr></table></figure><h3 id="指针定义二维数组"><a href="#指针定义二维数组" class="headerlink" title="指针定义二维数组"></a>指针定义二维数组</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">a = (<span class="type">int</span> **)<span class="built_in">calloc</span>(n,<span class="built_in">sizeof</span>(<span class="type">int</span> *)); <span class="comment">//或(int **)malloc(n*sizeof(int *));</span></span><br><span class="line"><span class="comment">//calloc 会初始化为0 malloc不会</span></span><br><span class="line"><span class="comment">//（int **）强制类型转换 指向int型变量指针的指针</span></span><br><span class="line"><span class="comment">//sizeof(int *) int型指针占的字节数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">    a[i]=(<span class="type">int</span> *)<span class="built_in">calloc</span>(n,<span class="built_in">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">&#125; <span class="comment">//定义n个int型变量指针</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">free</span>(a);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">    <span class="built_in">free</span>(a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//释放内存</span></span><br></pre></td></tr></table></figure><h3 id="输入到文件末尾"><a href="#输入到文件末尾" class="headerlink" title="输入到文件末尾"></a>输入到文件末尾</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a)!=EOF)</span><br><span class="line"><span class="keyword">while</span>(cin&gt;&gt;a)</span><br><span class="line"><span class="comment">//输入时 换行ctrl+z结束输入</span></span><br></pre></td></tr></table></figure><h3 id="ASCII表"><a href="#ASCII表" class="headerlink" title="ASCII表"></a>ASCII表</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">大写字母 A-Z 对应的 ASCII 码是 65-90</span><br><span class="line">小写字母 a-z 对应的 ASCII 码是 97-122</span><br></pre></td></tr></table></figure><h3 id="字符串处理"><a href="#字符串处理" class="headerlink" title="字符串处理"></a>字符串处理</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x27;\0&#x27; 空字符</span><br><span class="line">scanf输入到空格即停止</span><br><span class="line">gets会输入空格 输入到换行符停止（换行符也会被读入）</span><br><span class="line">gets会把空格当&#x27; &#x27;保存 而scanf会把他当&#x27;\0&#x27;</span><br><span class="line">sscanf ssprintf memset strlen</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//sscanf和sprintf函数</span></span><br><span class="line"><span class="built_in">sscanf</span>(s,<span class="string">&quot;%d&quot;</span>,&amp;c); <span class="comment">//字符串s -&gt; 整数c</span></span><br><span class="line"><span class="built_in">sprintf</span>(s,<span class="string">&quot;%d&quot;</span>,&amp;c); <span class="comment">//整数c -&gt; 字符串s</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//memset</span></span><br><span class="line"><span class="built_in">memset</span>(s,<span class="number">0</span>,<span class="built_in">sizeof</span>(s));</span><br><span class="line"></span><br><span class="line"><span class="comment">//strlen s.length求字符串长度函数</span></span><br><span class="line"><span class="comment">//strlen要计算长度的字符串，直到以空字符\0结尾的字符</span></span><br><span class="line"><span class="comment">//s.length计算长度的字符串,可以计算空格</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//getline整行输入 会计入空格符 但是cin&gt;&gt;s不会</span></span><br><span class="line">string s;</span><br><span class="line"><span class="built_in">getline</span>(cin,s);</span><br><span class="line"></span><br><span class="line"><span class="comment">//a串+b串</span></span><br><span class="line"><span class="comment">//1 string</span></span><br><span class="line">string s,s1;</span><br><span class="line">s+=s1;</span><br><span class="line"><span class="comment">//2 字符数组</span></span><br><span class="line"><span class="type">char</span> s[<span class="number">100</span>],s1[<span class="number">100</span>]</span><br><span class="line"><span class="built_in">strcat</span>(s,s1); <span class="comment">//等于上面的s+=s1 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//s串复制到s1串</span></span><br><span class="line"><span class="comment">//1 string</span></span><br><span class="line">string s,s1;</span><br><span class="line">s=s1;</span><br><span class="line"><span class="comment">//2 字符数组</span></span><br><span class="line"><span class="type">char</span> s[<span class="number">100</span>],s1[<span class="number">100</span>]</span><br><span class="line"><span class="built_in">strcpy</span>(s1,s);</span><br><span class="line"></span><br><span class="line"><span class="comment">//子串 </span></span><br><span class="line"><span class="comment">//string</span></span><br><span class="line">string s；</span><br><span class="line">s.<span class="built_in">substr</span>(a,b); <span class="comment">//从位置a起 b个字符</span></span><br><span class="line">s.<span class="built_in">substr</span>(a); <span class="comment">//从位置a起至字符串末尾</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//s找子串s1位置</span></span><br><span class="line"><span class="comment">//1 string</span></span><br><span class="line">string s,s1;</span><br><span class="line">s.<span class="built_in">find</span>(s1) <span class="comment">//若找到返回位置 若没找到返回一个很怪的值</span></span><br><span class="line">s.<span class="built_in">find</span>(s1,a) <span class="comment">//从s的a位置找s1</span></span><br><span class="line"><span class="keyword">if</span>(s.<span class="built_in">find</span>(s1)==string::npos) <span class="comment">//没找到的判定条件</span></span><br><span class="line"><span class="comment">//2 字符数组 </span></span><br><span class="line"><span class="type">char</span> s[<span class="number">100</span>],s1[<span class="number">100</span>];</span><br><span class="line"><span class="built_in">strstr</span>(s,s1) <span class="comment">//若找到返回位置 没找到返回NULL</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//s中插入s1,在第a个字符串前</span></span><br><span class="line"><span class="comment">//string</span></span><br><span class="line">string s,s1;</span><br><span class="line">s.<span class="built_in">insert</span> (a,s1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将字符串中小写字母变大写 大写变小写</span></span><br><span class="line">string s;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.length;i++)&#123;</span><br><span class="line">    s[i]=<span class="built_in">toupper</span>(s[i]) <span class="comment">//或 s[i]=tolower(s[i])</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//统计字串出现次数</span></span><br><span class="line"><span class="type">int</span> <span class="built_in">cs</span>(string s)&#123;</span><br><span class="line">    string s1=<span class="string">&quot;VK&quot;</span>;</span><br><span class="line">    <span class="type">int</span> c=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> b=s.<span class="built_in">find</span>(s1);</span><br><span class="line">    <span class="keyword">while</span>(s.<span class="built_in">find</span>(s1,b)!=string::npos)&#123;</span><br><span class="line">        c++;</span><br><span class="line">        b=s.<span class="built_in">find</span>(s1,b+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//strcmp 字符串比较函数 返回一个int</span></span><br><span class="line"><span class="built_in">strcmp</span>(str1,str2) </span><br><span class="line"><span class="comment">// 如果str1与str2相等，则返回值为0。</span></span><br><span class="line"><span class="comment">// 如果str1长度小于str2，则返回值小于0。</span></span><br><span class="line"><span class="comment">// 如果str1长度大于str2，则返回值大于0。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">strcpy</span>(str1,str2)</span><br><span class="line"><span class="comment">//把str2的内容赋值到str1里</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">strcat</span>(str1,str2)</span><br><span class="line"><span class="comment">//把str2内容贴到str1末尾</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">to_string</span>(<span class="type">int</span> a)</span><br><span class="line"><span class="comment">//把整数a变成string型</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="质数判断"><a href="#质数判断" class="headerlink" title="质数判断"></a>质数判断</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//大于1且只能被1和自身整除的数</span></span><br><span class="line"><span class="comment">//0 1  不是质数</span></span><br><span class="line"><span class="comment">//2 是质数</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">prime</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>||n==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i*i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n%i==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="switch语句举例"><a href="#switch语句举例" class="headerlink" title="switch语句举例"></a>switch语句举例</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (month) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;冬季\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;春季\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最大公因数"><a href="#最大公因数" class="headerlink" title="最大公因数"></a>最大公因数</h3><p>欧几里得算法，两个数相除，将余数作为新除数，直到除尽为止</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//递归写法</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(b==<span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">gcd</span>(b,a%b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//不用递归</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(b!=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="type">int</span> temp=b;</span><br><span class="line">        b=a%b;</span><br><span class="line">        a=temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="斐波那契"><a href="#斐波那契" class="headerlink" title="斐波那契"></a>斐波那契</h3><p>第1项 0 第2项 1 ，之后的每项都为前两项之和</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//递归写法</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">f</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">f</span>(n<span class="number">-1</span>)+<span class="built_in">f</span>(n<span class="number">-2</span>); </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//不用递归</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">f</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">int</span> a=<span class="number">0</span>,b=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">3</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="type">int</span> t=a+b;</span><br><span class="line">            a=b;</span><br><span class="line">            b=t;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="闰年"><a href="#闰年" class="headerlink" title="闰年"></a>闰年</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//能被4整除但不能被100整除 但能被400整除也是闰年</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="高精度"><a href="#高精度" class="headerlink" title="高精度"></a>高精度</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">string <span class="title">multiply</span><span class="params">(string num1,<span class="type">int</span> num2)</span></span>&#123; <span class="comment">//字符串表示高精度</span></span><br><span class="line">    string result = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="type">int</span> carry=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=num1.<span class="built_in">length</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123; <span class="comment">//字符串与一般数组的高低位是反着的</span></span><br><span class="line">        <span class="type">int</span> product=(num1[i]-<span class="string">&#x27;0&#x27;</span>)*num2+carry;</span><br><span class="line">        result=<span class="built_in">to_string</span>(product%<span class="number">10</span>)+result;</span><br><span class="line">        carry=product/<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(carry&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        result=<span class="built_in">to_string</span>(carry%<span class="number">10</span>)+result;</span><br><span class="line">        carry/=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125; 字符串高精度乘法</span><br><span class="line"><span class="built_in">sort</span>(a+<span class="number">1</span>,a+n+<span class="number">1</span>); 排a[<span class="number">1</span>]到a[n]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line">### 汉诺塔</span><br><span class="line">```c++</span><br><span class="line">//递归写法</span><br><span class="line">void digui(int n,char a,char b,char c)&#123; //n个盘移动从a移动到c，通过b</span><br><span class="line">    if(n==1) &#123;</span><br><span class="line">        cout&lt;&lt;a&lt;&lt;&quot;--&gt;&quot;&lt;&lt;c&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        digui(n-1,a,c,b);//n-1个盘移动从a移动到b，通过c</span><br><span class="line">        cout&lt;&lt;a&lt;&lt;&quot;--&gt;&quot;&lt;&lt;c&lt;&lt;endl;</span><br><span class="line">        digui(n-1,b,a,c);//n-1个盘移动从b移动到c，通过a</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//迭代写法 用栈</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="整数划分（不是很懂）"><a href="#整数划分（不是很懂）" class="headerlink" title="整数划分（不是很懂）"></a>整数划分（不是很懂）</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">digui</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> m)</span></span>&#123; <span class="comment">//n为待划分的数 m为最大划分数</span></span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">0</span>||m==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">//n==0时return1 因为n=0时已经在计算有一个m的情况了</span></span><br><span class="line">    <span class="keyword">if</span>(n&gt;=m)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">digui</span>(n,m<span class="number">-1</span>)+<span class="built_in">digui</span>(n-m,m);</span><br><span class="line">        <span class="comment">//digui(n,m-1)是指 划分数中不包含m的情况</span></span><br><span class="line">        <span class="comment">//digui（n-m，m）是指划分数中已经有一个m 在计算其他情况</span></span><br><span class="line">        <span class="comment">//两者相加即为所得</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">digui</span>(n,n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(cin&gt;&gt;n)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="built_in">digui</span>(n,n)&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>auto current = circle.begin()vector.begin()vector.end()push_back(value)：将元素添加到vector的末尾。pop_back()：移除vector的最后一个元素。size()：返回vector中元素的个数。empty()：检查vector是否为空，如果为空返回true，否则返回false。clear()：清空vector中的所有元素。resize(newSize)：改变vector的大小，使其包含指定数量的元素。front()：返回vector的第一个元素。back()：返回vector的最后一个元素。at(index)：返回指定索引处的元素。begin() 和 end()：返回指向vector首元素和尾后元素的迭代器，用于遍历vector中的元素。insert(iterator, value)：在指定位置之前插入元素。erase(iterator)：移除指定位置的元素。swap(vector2)：交换两个vector容器的元素。大整数乘法 </code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> c </tag>
            
            <tag> c++ </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown相关</title>
      <link href="/2023/07/24/markdown%E7%9B%B8%E5%85%B3/"/>
      <url>/2023/07/24/markdown%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<h2 id="多个标签用法"><a href="#多个标签用法" class="headerlink" title="多个标签用法"></a>多个标签用法</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tags: </span><br><span class="line"><span class="bullet">  -</span> hexo   </span><br><span class="line"><span class="bullet">  -</span> gitee</span><br><span class="line"><span class="bullet">  -</span> 命令行</span><br><span class="line">  &lt;!-- -加空格  --&gt;</span><br></pre></td></tr></table></figure><h2 id="Markdown文档通常应该怎么写"><a href="#Markdown文档通常应该怎么写" class="headerlink" title="Markdown文档通常应该怎么写"></a>Markdown文档通常应该怎么写</h2><h3 id="使用标题："><a href="#使用标题：" class="headerlink" title="使用标题："></a>使用标题：</h3><p>使用井号（#）开头创建标题。使用多个井号表示不同级别的标题。例如：</p>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 标题1</span><br><span class="line">## 标题2</span><br><span class="line">### 标题3</span><br></pre></td></tr></table></figure><h3 id="强调内容："><a href="#强调内容：" class="headerlink" title="强调内容："></a>强调内容：</h3><p>使用星号（*）或下划线（_）对内容进行强调。单个星号或下划线是斜体，两个是粗体，三个是粗斜体。例如：</p>   <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="emphasis">*斜体*</span></span><br><span class="line"><span class="strong">**粗体**</span></span><br><span class="line"><span class="strong">**<span class="emphasis">*粗斜体*</span>**</span></span><br></pre></td></tr></table></figure><h3 id="列表："><a href="#列表：" class="headerlink" title="列表："></a>列表：</h3><p>使用短横线（-）或数字加点创建无序或有序列表。例如：</p>   <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> 无序列表项1</span><br><span class="line"><span class="bullet">-</span> 无序列表项2</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 有序列表项1</span><br><span class="line"><span class="bullet">2.</span> 有序列表项2</span><br></pre></td></tr></table></figure><h3 id="链接和图片："><a href="#链接和图片：" class="headerlink" title="链接和图片："></a>链接和图片：</h3><p>使用中括号（[]）输入链接文本，并使用小括号（()）输入链接地址。例如：</p>   <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">链接文本</span>](<span class="link">链接地址</span>)</span><br><span class="line">![<span class="string">图片描述</span>](<span class="link">图片链接地址</span>)</span><br></pre></td></tr></table></figure><h3 id="引用块："><a href="#引用块：" class="headerlink" title="引用块："></a>引用块：</h3><p>使用大于号（&gt;）创建引用块。例如：</p>   <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; 这是引用的内容。</span></span><br></pre></td></tr></table></figure><h3 id="代码块："><a href="#代码块：" class="headerlink" title="代码块："></a>代码块：</h3><p>使用三个反引号（&#96;&#96;&#96;)创建代码块，并指定代码语言。例如：</p>   <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello, world!&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="分割线："><a href="#分割线：" class="headerlink" title="分割线："></a>分割线：</h3><p>使用三个或更多的连字符（-）或星号（*）创建分割线。例如：</p>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">---</span><br></pre></td></tr></table></figure><h3 id="表格："><a href="#表格：" class="headerlink" title="表格："></a>表格：</h3><p>使用垂直竖线（|）和连字符（-）创建简单的表格。例如：</p>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">| 列1 | 列2 |</span><br><span class="line">|-----|-----|</span><br><span class="line">| 内容1 | 内容2 |</span><br></pre></td></tr></table></figure><h3 id="注释："><a href="#注释：" class="headerlink" title="注释："></a>注释：</h3><p>使用HTML注释语法添加注释<br>    <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 注释 --&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>My_First_Blog</title>
      <link href="/2023/07/22/My-First-Blog/"/>
      <url>/2023/07/22/My-First-Blog/</url>
      
        <content type="html"><![CDATA[<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="hexo常用操作"><a href="#hexo常用操作" class="headerlink" title="hexo常用操作"></a>hexo常用操作</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="built_in">test</span> <span class="comment">#新建一个test文档</span></span><br><span class="line">$ hexo s -p 8080 <span class="comment">#启动服务 本地看 8080端口、</span></span><br><span class="line">$ hexo clean          <span class="comment"># 清除所有记录</span></span><br><span class="line">$ hexo generate       <span class="comment"># 生成静态网页 hexo g</span></span><br><span class="line">$ hexo deplore <span class="comment">#部署 hexo d</span></span><br></pre></td></tr></table></figure><h3 id="相对路径写法"><a href="#相对路径写法" class="headerlink" title="相对路径写法"></a>相对路径写法</h3><p><strong>.&#x2F;</strong> 用于相对于当前文件夹<br><strong>…&#x2F;</strong> 用于相对于当前文件夹的上一级文件夹</p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> gitee </tag>
            
            <tag> 命令行 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
